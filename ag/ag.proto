syntax = "proto3";
package ag;
option go_package = "github.com/autograde/quickfeed/ag";
option swift_prefix="";

import "kit/score/score.proto";
import "patch/go.proto";

// Note on use of protopatch's go.field to translate to a database schema via GORM
//
// To define fields that should be ignored by the database, use this tag:
//   [(go.field) = {tags: 'gorm:"-"'}];
//
// To define multiple database attributes (fields) that combine to form a unique identifier,
// use the following tag, replacing the <id_name> with the specific unique database identifier;
// this will set the SQL UNIQUE constraint for the database:
//   [(go.field) = {tags: 'gorm:"uniqueIndex:<id_name>"'}];


// USERS AND USERGROUPS //

message User {
    uint64 ID = 1;
    bool isAdmin = 2;
    string name = 3;
    string studentID = 4;
    string email = 5;
    string avatarURL = 6;
    string login = 7;

    repeated RemoteIdentity remoteIdentities = 8;
    repeated Enrollment enrollments = 9;
}

message Users {
    repeated User users = 1;
}

message RemoteIdentity {
    uint64 ID = 1;
    string provider = 2 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_provider_remote_id"'}]; 
    uint64 remoteID = 3 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_provider_remote_id"'}]; 
    string accessToken = 4;
    uint64 userID = 5;
}

message Group {
    enum GroupStatus {
        PENDING = 0;
        APPROVED = 1;
    }
    uint64 ID = 1;
    string name = 2 [(go.field) = {tags: 'gorm:"uniqueIndex:idx_unique_group_name"'}];
    uint64 courseID = 3 [(go.field) = {tags: 'gorm:"uniqueIndex:idx_unique_group_name"'}]; 
    uint64 teamID = 4;
    GroupStatus status = 5;

    repeated User users = 6 [(go.field) = {tags: 'gorm:"many2many:group_users;"'}];
    repeated Enrollment enrollments = 7;
}

message Groups {
    repeated Group groups = 1;
}

//   COURSES   //

message Course {
    uint64 ID = 1;
    uint64 courseCreatorID = 2;
    string name = 3;
    string code = 4;
    uint32 year = 5;
    string tag = 6;
    string provider = 7;
    uint64 organizationID = 8;
    string organizationPath = 9; // The organization's SCM name, e.g. uis-dat520-2020.
    uint32 slipDays = 10;
    string dockerfile = 11;
    Enrollment.UserStatus enrolled = 12 [(go.field) = {tags: 'gorm:"-"'}];

    repeated Enrollment enrollments = 13;
    repeated Assignment assignments = 14;
    repeated Group groups = 15;
}

message Courses {
    repeated Course courses = 1;
}

message Repository {
    enum Type {
        NONE = 0;
        COURSEINFO = 1;
        ASSIGNMENTS = 2;
        TESTS = 3;
        USER = 4;
        GROUP = 5;
    }
    uint64 ID = 1;
    uint64 organizationID = 2 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_gid_org_type"'}];
    uint64 repositoryID = 3; // ID of a github repository
    uint64 userID = 4 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_gid_org_type"'}];
    uint64 groupID = 5 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_gid_org_type"'}];
    string HTMLURL = 6;
    Type repoType = 7 [(go.field) = {tags: 'gorm:"uniqueIndex:uid_gid_org_type"'}];
}

message Enrollment {
    enum UserStatus {
        NONE = 0;
        PENDING = 1;
        STUDENT = 2;
        TEACHER = 3;
    }
    enum DisplayState {
        UNSET = 0;
        HIDDEN = 1;
        VISIBLE = 2;
        FAVORITE = 3;
    }
    uint64 ID = 1;
    uint64 courseID = 2 [(go.field) = {tags: 'gorm:"uniqueIndex:idx_unique_enrollment"'}];
    uint64 userID = 3 [(go.field) = {tags: 'gorm:"uniqueIndex:idx_unique_enrollment"'}]; 
    uint64 groupID = 4;
    bool hasTeacherScopes = 5;
    User user = 6;
    Course course = 7;
    Group group = 8;
    UserStatus status = 9;
    DisplayState state = 10;
    uint32 slipDaysRemaining = 11 [(go.field) = {tags: 'gorm:"-"'}];
    string lastActivityDate = 12;
    uint64 totalApproved = 13;
    repeated UsedSlipDays usedSlipDays = 14;
}

message UsedSlipDays {
    uint64 ID = 1;
    uint64 enrollmentID = 2;
    uint64 assignmentID = 3;
    uint32 usedSlipDays = 4;
}

message Enrollments {
    repeated Enrollment enrollments = 1;
} 

//   UI structures, never saved in the database   //

message SubmissionLink {
    Assignment assignment = 1;
    Submission submission = 2;
}

message EnrollmentLink {
    Enrollment enrollment = 2; // must have course and user/group preloaded
    repeated SubmissionLink submissions = 3;
}

message CourseSubmissions {
    Course course = 1; // preloaded assignments
    repeated EnrollmentLink links = 2;
}

//   LABS    //

message Assignment {
    uint64 ID = 1;
    uint64 CourseID = 2; // foreign key
    string name = 3;
    string scriptFile = 4;
    string deadline = 5; 
    bool autoApprove = 6;
    uint32 order = 7;
    bool isGroupLab = 8;
    uint32 scoreLimit = 9;                            // minimal score limit for auto approval
    uint32 reviewers = 10;                            // number of reviewers that will review submissions for this assignment 
    repeated Submission submissions = 11;             // submissions produced for this assignment
    repeated GradingBenchmark gradingBenchmarks = 12; // grading benchmarks for this assignment
    uint32 containerTimeout = 13; // TODO(meling) Do we need this?
}

message Assignments {
    repeated Assignment assignments = 1;
}

message Submission {
    enum Status {
        NONE = 0;
        APPROVED = 1;
        REJECTED = 2;
        REVISION = 3;
    }
    uint64 ID = 1;
    uint64 AssignmentID = 2; // foreign key
    uint64 userID = 3;
    uint64 groupID = 4;
    uint32 score = 5;
    string commitHash = 6;
    bool released = 7;       // true => feedback is visible to the student or group members
    Status status = 8;
    string approvedDate = 9;
    repeated Review reviews = 10;     // reviews produced for this submission
    score.BuildInfo BuildInfo = 11;   // build info for tests
    repeated score.Score Scores = 12; // list of scores for different tests
}

message Submissions {
    repeated Submission submissions = 1;
}

//   MANUAL GRADING   //

message GradingBenchmark {
    uint64 ID = 1;
    uint64 AssignmentID = 2; // foreign key
    uint64 ReviewID = 3; // foreign key
    string heading = 4;
    string comment = 5;
    repeated GradingCriterion criteria = 6 [(go.field) = {tags: 'gorm:"foreignKey:BenchmarkID"'}];
}

message Benchmarks {
    repeated GradingBenchmark benchmarks = 1;
}

message GradingCriterion {
    enum Grade {
        NONE = 0;
        FAILED = 1;
        PASSED = 2;
    }
    uint64 ID = 1;
    uint64 BenchmarkID = 2; // foreign key
    uint64 points = 3;
    string description = 4;
    Grade grade = 5;
    string comment = 6;
}

message Review {
    uint64 ID = 1;
    uint64 SubmissionID = 2; // foreign key
    uint64 ReviewerID = 3;   // UserID of the reviewer
    string feedback = 4;
    bool ready = 5;
    uint32 score = 6;
    repeated GradingBenchmark gradingBenchmarks = 7 [(go.field) = {tags: 'gorm:"foreignKey:ReviewID"'}];
    string edited = 8;
}

message Reviewers {
    repeated User reviewers = 1;
}

////    REQUESTS AND RESPONSES      \\\\

message ReviewRequest {
    uint64 courseID = 1;
    Review review = 2;
}

message CourseRequest {
    uint64 courseID = 1;
}

message UserRequest {
    uint64 userID = 1;
}

message GetGroupRequest {
    uint64 groupID = 1;
}

message GroupRequest {
    uint64 userID = 1;
    uint64 groupID = 2;
    uint64 courseID = 3;
}

message Provider {
    string provider = 1;
}

message OrgRequest {
    string orgName = 1;
}

message Organization {
    uint64 ID = 1;
    string path = 2;
    string avatar = 3;
    string paymentPlan = 4;
}

message Organizations {
    repeated Organization organizations = 1;
}

// EnrollmentRequest is a request for enrolled users of a given course,
// whose enrollment status match those provided in the request. To ignore group members 
// that otherwise match the enrollment request, set ignoreGroupMembers to true.
message EnrollmentRequest {
    uint64 courseID = 1;
    bool ignoreGroupMembers = 2;
    bool withActivity = 3;
    repeated Enrollment.UserStatus statuses = 4;
}

// EnrollmentStatusRequest is a request for a given user, with a specific enrollment status.
message EnrollmentStatusRequest {
    uint64 userID = 1;
    repeated Enrollment.UserStatus statuses = 2;
}

message SubmissionRequest {
    uint64 userID = 1;
    uint64 groupID = 2;
    uint64 courseID = 3;
}

message UpdateSubmissionRequest {
    uint64 submissionID = 1;
    uint64 courseID = 2;
    uint32 score = 3;
    bool released = 4;
    Submission.Status status = 5;
}

message UpdateSubmissionsRequest {
    uint64 courseID = 1;
    uint64 assignmentID = 2;
    uint32 scoreLimit = 3;
    bool release = 4;
    bool approve = 5;
}

message SubmissionReviewersRequest {
    uint64 submissionID = 1;
    uint64 courseID = 2;
}

message Providers {
    repeated string providers = 1;
}

message URLRequest {
    uint64 courseID = 1;
    repeated Repository.Type repoTypes = 2;
}

// used to check whether student/group submission repo is empty
message RepositoryRequest {
    uint64 userID = 1;
    uint64 groupID = 2;
    uint64 courseID = 3;
}

message Repositories {
    map<string, string> URLs = 1;
}

message AuthorizationResponse {
    bool IsAuthorized = 1;
}

message Status {
    uint64 Code = 1;
    string Error = 2;
}

message SubmissionsForCourseRequest {
    enum Type {
        ALL = 0;
        INDIVIDUAL = 1;
        GROUP = 2;
    }
    uint64 courseID = 1;
    Type type = 2;
    bool withBuildInfo = 3;
}

message RebuildRequest {
    uint64 submissionID = 1;
    uint64 assignmentID = 2;
}

message CourseUserRequest {
    string courseCode = 1;
    uint32 courseYear = 2;
    string userLogin = 3;
}

message AssignmentRequest {
    uint64 courseID = 1;
    uint64 assignmentID = 2;
}

// Void contains no fields. A server response with a Void still contains a gRPC status code,
// which can be checked for success or failure. Status code 0 indicates that the requested action was successful,
// whereas any other status code indicates some failure. As such, the status code can be used as a boolean result from the server.
message Void {}

service AutograderService {

    // users //

    rpc GetUser(Void) returns (User) {}
    rpc GetUsers(Void) returns (Users) {}
    rpc GetUserByCourse(CourseUserRequest) returns (User) {}
    rpc UpdateUser(User) returns (Void) {}
    rpc IsAuthorizedTeacher(Void) returns (AuthorizationResponse) {}  

    // groups //

    rpc GetGroup(GetGroupRequest) returns (Group) {}
    rpc GetGroupByUserAndCourse(GroupRequest) returns (Group) {} 
    rpc GetGroupsByCourse(CourseRequest) returns (Groups) {} 
    rpc CreateGroup(Group) returns (Group) {} 
    rpc UpdateGroup(Group) returns (Void) {}
    rpc DeleteGroup(GroupRequest) returns (Void) {}

    // courses //

    rpc GetCourse(CourseRequest) returns (Course) {} 
    rpc GetCourses(Void) returns (Courses) {} 
    rpc GetCoursesByUser(EnrollmentStatusRequest) returns (Courses) {}
    rpc CreateCourse(Course) returns (Course) {}
    rpc UpdateCourse(Course) returns (Void) {}
    rpc UpdateCourseVisibility(Enrollment) returns (Void) {}
 
    // assignments //
    
    rpc GetAssignments(CourseRequest) returns (Assignments) {}
    rpc UpdateAssignments(CourseRequest) returns (Void) {}

    // enrollments //

    rpc GetEnrollmentsByUser(EnrollmentStatusRequest) returns (Enrollments) {}
    rpc GetEnrollmentsByCourse(EnrollmentRequest) returns (Enrollments) {}
    rpc CreateEnrollment(Enrollment) returns (Void) {} 
    rpc UpdateEnrollment(Enrollment) returns (Void) {} 
    rpc UpdateEnrollments(CourseRequest) returns (Void) {}

    // submissions //

    // Get latest submissions for all course assignments for a user or a group.
    rpc GetSubmissions(SubmissionRequest) returns (Submissions) {}
    // Get lab submissions for every course user or every course group
    rpc GetSubmissionsByCourse(SubmissionsForCourseRequest) returns (CourseSubmissions) {}
    rpc UpdateSubmission(UpdateSubmissionRequest) returns (Void) {}
    rpc UpdateSubmissions(UpdateSubmissionsRequest) returns (Void) {}
    rpc RebuildSubmission(RebuildRequest) returns (Submission) {}
    rpc RebuildSubmissions(AssignmentRequest) returns (Void) {}

    // manual grading //
    
    rpc CreateBenchmark(GradingBenchmark) returns (GradingBenchmark) {}
    rpc UpdateBenchmark(GradingBenchmark) returns (Void) {}
    rpc DeleteBenchmark(GradingBenchmark) returns (Void) {}

    rpc CreateCriterion(GradingCriterion) returns (GradingCriterion) {}
    rpc UpdateCriterion(GradingCriterion) returns (Void) {}
    rpc DeleteCriterion(GradingCriterion) returns (Void) {}

    rpc CreateReview(ReviewRequest) returns (Review) {}
    rpc UpdateReview(ReviewRequest) returns (Review) {}
    rpc GetReviewers(SubmissionReviewersRequest) returns (Reviewers) {}

    // misc //
    
    rpc GetProviders(Void) returns (Providers) {}
    rpc GetOrganization(OrgRequest) returns (Organization) {}
    rpc GetRepositories(URLRequest) returns (Repositories) {}
    rpc IsEmptyRepo(RepositoryRequest) returns (Void) {}
}
