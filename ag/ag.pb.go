// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ag/ag.proto

package ag

import (
	_ "github.com/alta/protopatch/patch/gopb"
	score "github.com/autograde/quickfeed/kit/score"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Group_GroupStatus int32

const (
	Group_PENDING  Group_GroupStatus = 0
	Group_APPROVED Group_GroupStatus = 1
)

// Enum value maps for Group_GroupStatus.
var (
	Group_GroupStatus_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
	}
	Group_GroupStatus_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
	}
)

func (x Group_GroupStatus) Enum() *Group_GroupStatus {
	p := new(Group_GroupStatus)
	*p = x
	return p
}

func (x Group_GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Group_GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[0].Descriptor()
}

func (Group_GroupStatus) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[0]
}

func (x Group_GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Group_GroupStatus.Descriptor instead.
func (Group_GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{3, 0}
}

type Repository_Type int32

const (
	Repository_NONE        Repository_Type = 0
	Repository_COURSEINFO  Repository_Type = 1
	Repository_ASSIGNMENTS Repository_Type = 2
	Repository_TESTS       Repository_Type = 3
	Repository_USER        Repository_Type = 4
	Repository_GROUP       Repository_Type = 5
)

// Enum value maps for Repository_Type.
var (
	Repository_Type_name = map[int32]string{
		0: "NONE",
		1: "COURSEINFO",
		2: "ASSIGNMENTS",
		3: "TESTS",
		4: "USER",
		5: "GROUP",
	}
	Repository_Type_value = map[string]int32{
		"NONE":        0,
		"COURSEINFO":  1,
		"ASSIGNMENTS": 2,
		"TESTS":       3,
		"USER":        4,
		"GROUP":       5,
	}
)

func (x Repository_Type) Enum() *Repository_Type {
	p := new(Repository_Type)
	*p = x
	return p
}

func (x Repository_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Repository_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[1].Descriptor()
}

func (Repository_Type) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[1]
}

func (x Repository_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Repository_Type.Descriptor instead.
func (Repository_Type) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{7, 0}
}

type Enrollment_UserStatus int32

const (
	Enrollment_NONE    Enrollment_UserStatus = 0
	Enrollment_PENDING Enrollment_UserStatus = 1
	Enrollment_STUDENT Enrollment_UserStatus = 2
	Enrollment_TEACHER Enrollment_UserStatus = 3
)

// Enum value maps for Enrollment_UserStatus.
var (
	Enrollment_UserStatus_name = map[int32]string{
		0: "NONE",
		1: "PENDING",
		2: "STUDENT",
		3: "TEACHER",
	}
	Enrollment_UserStatus_value = map[string]int32{
		"NONE":    0,
		"PENDING": 1,
		"STUDENT": 2,
		"TEACHER": 3,
	}
)

func (x Enrollment_UserStatus) Enum() *Enrollment_UserStatus {
	p := new(Enrollment_UserStatus)
	*p = x
	return p
}

func (x Enrollment_UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enrollment_UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[2].Descriptor()
}

func (Enrollment_UserStatus) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[2]
}

func (x Enrollment_UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enrollment_UserStatus.Descriptor instead.
func (Enrollment_UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{8, 0}
}

type Enrollment_DisplayState int32

const (
	Enrollment_UNSET    Enrollment_DisplayState = 0
	Enrollment_HIDDEN   Enrollment_DisplayState = 1
	Enrollment_VISIBLE  Enrollment_DisplayState = 2
	Enrollment_FAVORITE Enrollment_DisplayState = 3
)

// Enum value maps for Enrollment_DisplayState.
var (
	Enrollment_DisplayState_name = map[int32]string{
		0: "UNSET",
		1: "HIDDEN",
		2: "VISIBLE",
		3: "FAVORITE",
	}
	Enrollment_DisplayState_value = map[string]int32{
		"UNSET":    0,
		"HIDDEN":   1,
		"VISIBLE":  2,
		"FAVORITE": 3,
	}
)

func (x Enrollment_DisplayState) Enum() *Enrollment_DisplayState {
	p := new(Enrollment_DisplayState)
	*p = x
	return p
}

func (x Enrollment_DisplayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enrollment_DisplayState) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[3].Descriptor()
}

func (Enrollment_DisplayState) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[3]
}

func (x Enrollment_DisplayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enrollment_DisplayState.Descriptor instead.
func (Enrollment_DisplayState) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{8, 1}
}

type Submission_Status int32

const (
	Submission_NONE     Submission_Status = 0
	Submission_APPROVED Submission_Status = 1
	Submission_REJECTED Submission_Status = 2
	Submission_REVISION Submission_Status = 3
)

// Enum value maps for Submission_Status.
var (
	Submission_Status_name = map[int32]string{
		0: "NONE",
		1: "APPROVED",
		2: "REJECTED",
		3: "REVISION",
	}
	Submission_Status_value = map[string]int32{
		"NONE":     0,
		"APPROVED": 1,
		"REJECTED": 2,
		"REVISION": 3,
	}
)

func (x Submission_Status) Enum() *Submission_Status {
	p := new(Submission_Status)
	*p = x
	return p
}

func (x Submission_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Submission_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[4].Descriptor()
}

func (Submission_Status) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[4]
}

func (x Submission_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Submission_Status.Descriptor instead.
func (Submission_Status) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{16, 0}
}

type GradingCriterion_Grade int32

const (
	GradingCriterion_NONE   GradingCriterion_Grade = 0
	GradingCriterion_FAILED GradingCriterion_Grade = 1
	GradingCriterion_PASSED GradingCriterion_Grade = 2
)

// Enum value maps for GradingCriterion_Grade.
var (
	GradingCriterion_Grade_name = map[int32]string{
		0: "NONE",
		1: "FAILED",
		2: "PASSED",
	}
	GradingCriterion_Grade_value = map[string]int32{
		"NONE":   0,
		"FAILED": 1,
		"PASSED": 2,
	}
)

func (x GradingCriterion_Grade) Enum() *GradingCriterion_Grade {
	p := new(GradingCriterion_Grade)
	*p = x
	return p
}

func (x GradingCriterion_Grade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GradingCriterion_Grade) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[5].Descriptor()
}

func (GradingCriterion_Grade) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[5]
}

func (x GradingCriterion_Grade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GradingCriterion_Grade.Descriptor instead.
func (GradingCriterion_Grade) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{20, 0}
}

type SubmissionsForCourseRequest_Type int32

const (
	SubmissionsForCourseRequest_ALL        SubmissionsForCourseRequest_Type = 0
	SubmissionsForCourseRequest_INDIVIDUAL SubmissionsForCourseRequest_Type = 1
	SubmissionsForCourseRequest_GROUP      SubmissionsForCourseRequest_Type = 2
)

// Enum value maps for SubmissionsForCourseRequest_Type.
var (
	SubmissionsForCourseRequest_Type_name = map[int32]string{
		0: "ALL",
		1: "INDIVIDUAL",
		2: "GROUP",
	}
	SubmissionsForCourseRequest_Type_value = map[string]int32{
		"ALL":        0,
		"INDIVIDUAL": 1,
		"GROUP":      2,
	}
)

func (x SubmissionsForCourseRequest_Type) Enum() *SubmissionsForCourseRequest_Type {
	p := new(SubmissionsForCourseRequest_Type)
	*p = x
	return p
}

func (x SubmissionsForCourseRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionsForCourseRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ag_ag_proto_enumTypes[6].Descriptor()
}

func (SubmissionsForCourseRequest_Type) Type() protoreflect.EnumType {
	return &file_ag_ag_proto_enumTypes[6]
}

func (x SubmissionsForCourseRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionsForCourseRequest_Type.Descriptor instead.
func (SubmissionsForCourseRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{44, 0}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsAdmin          bool              `protobuf:"varint,2,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	Name             string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	StudentID        string            `protobuf:"bytes,4,opt,name=studentID,proto3" json:"studentID,omitempty"`
	Email            string            `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	AvatarURL        string            `protobuf:"bytes,6,opt,name=avatarURL,proto3" json:"avatarURL,omitempty"`
	Login            string            `protobuf:"bytes,7,opt,name=login,proto3" json:"login,omitempty"`
	RemoteIdentities []*RemoteIdentity `protobuf:"bytes,8,rep,name=remoteIdentities,proto3" json:"remoteIdentities,omitempty"`
	Enrollments      []*Enrollment     `protobuf:"bytes,9,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetStudentID() string {
	if x != nil {
		return x.StudentID
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

func (x *User) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *User) GetRemoteIdentities() []*RemoteIdentity {
	if x != nil {
		return x.RemoteIdentities
	}
	return nil
}

func (x *User) GetEnrollments() []*Enrollment {
	if x != nil {
		return x.Enrollments
	}
	return nil
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{1}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type RemoteIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Provider    string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty" gorm:"uniqueIndex:uid_provider_remote_id"`
	RemoteID    uint64 `protobuf:"varint,3,opt,name=remoteID,proto3" json:"remoteID,omitempty" gorm:"uniqueIndex:uid_provider_remote_id"`
	AccessToken string `protobuf:"bytes,4,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	UserID      uint64 `protobuf:"varint,5,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *RemoteIdentity) Reset() {
	*x = RemoteIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteIdentity) ProtoMessage() {}

func (x *RemoteIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteIdentity.ProtoReflect.Descriptor instead.
func (*RemoteIdentity) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteIdentity) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RemoteIdentity) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoteIdentity) GetRemoteID() uint64 {
	if x != nil {
		return x.RemoteID
	}
	return 0
}

func (x *RemoteIdentity) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RemoteIdentity) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"uniqueIndex:idx_unique_group_name"`
	CourseID    uint64            `protobuf:"varint,3,opt,name=courseID,proto3" json:"courseID,omitempty" gorm:"uniqueIndex:idx_unique_group_name"`
	TeamID      uint64            `protobuf:"varint,4,opt,name=teamID,proto3" json:"teamID,omitempty"`
	Status      Group_GroupStatus `protobuf:"varint,5,opt,name=status,proto3,enum=ag.Group_GroupStatus" json:"status,omitempty"`
	Users       []*User           `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty" gorm:"many2many:group_users;"`
	Enrollments []*Enrollment     `protobuf:"bytes,7,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{3}
}

func (x *Group) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *Group) GetTeamID() uint64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *Group) GetStatus() Group_GroupStatus {
	if x != nil {
		return x.Status
	}
	return Group_PENDING
}

func (x *Group) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Group) GetEnrollments() []*Enrollment {
	if x != nil {
		return x.Enrollments
	}
	return nil
}

type Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *Groups) Reset() {
	*x = Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groups) ProtoMessage() {}

func (x *Groups) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groups.ProtoReflect.Descriptor instead.
func (*Groups) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{4}
}

func (x *Groups) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CourseCreatorID  uint64                `protobuf:"varint,2,opt,name=courseCreatorID,proto3" json:"courseCreatorID,omitempty"`
	Name             string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code             string                `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Year             uint32                `protobuf:"varint,5,opt,name=year,proto3" json:"year,omitempty"`
	Tag              string                `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	Provider         string                `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	OrganizationID   uint64                `protobuf:"varint,8,opt,name=organizationID,proto3" json:"organizationID,omitempty"`
	OrganizationPath string                `protobuf:"bytes,9,opt,name=organizationPath,proto3" json:"organizationPath,omitempty"` // The organization's SCM name, e.g. uis-dat520-2020.
	SlipDays         uint32                `protobuf:"varint,10,opt,name=slipDays,proto3" json:"slipDays,omitempty"`
	Dockerfile       string                `protobuf:"bytes,11,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	Enrolled         Enrollment_UserStatus `protobuf:"varint,12,opt,name=enrolled,proto3,enum=ag.Enrollment_UserStatus" json:"enrolled,omitempty" gorm:"-"`
	Enrollments      []*Enrollment         `protobuf:"bytes,13,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	Assignments      []*Assignment         `protobuf:"bytes,14,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Groups           []*Group              `protobuf:"bytes,15,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{5}
}

func (x *Course) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Course) GetCourseCreatorID() uint64 {
	if x != nil {
		return x.CourseCreatorID
	}
	return 0
}

func (x *Course) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Course) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Course) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Course) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Course) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Course) GetOrganizationID() uint64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *Course) GetOrganizationPath() string {
	if x != nil {
		return x.OrganizationPath
	}
	return ""
}

func (x *Course) GetSlipDays() uint32 {
	if x != nil {
		return x.SlipDays
	}
	return 0
}

func (x *Course) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *Course) GetEnrolled() Enrollment_UserStatus {
	if x != nil {
		return x.Enrolled
	}
	return Enrollment_NONE
}

func (x *Course) GetEnrollments() []*Enrollment {
	if x != nil {
		return x.Enrollments
	}
	return nil
}

func (x *Course) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *Course) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Courses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courses []*Course `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
}

func (x *Courses) Reset() {
	*x = Courses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courses) ProtoMessage() {}

func (x *Courses) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courses.ProtoReflect.Descriptor instead.
func (*Courses) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{6}
}

func (x *Courses) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OrganizationID uint64          `protobuf:"varint,2,opt,name=organizationID,proto3" json:"organizationID,omitempty" gorm:"uniqueIndex:uid_gid_org_type"`
	RepositoryID   uint64          `protobuf:"varint,3,opt,name=repositoryID,proto3" json:"repositoryID,omitempty"` // ID of a github repository
	UserID         uint64          `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty" gorm:"uniqueIndex:uid_gid_org_type"`
	GroupID        uint64          `protobuf:"varint,5,opt,name=groupID,proto3" json:"groupID,omitempty" gorm:"uniqueIndex:uid_gid_org_type"`
	HTMLURL        string          `protobuf:"bytes,6,opt,name=HTMLURL,proto3" json:"HTMLURL,omitempty"`
	RepoType       Repository_Type `protobuf:"varint,7,opt,name=repoType,proto3,enum=ag.Repository_Type" json:"repoType,omitempty" gorm:"uniqueIndex:uid_gid_org_type"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{7}
}

func (x *Repository) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Repository) GetOrganizationID() uint64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *Repository) GetRepositoryID() uint64 {
	if x != nil {
		return x.RepositoryID
	}
	return 0
}

func (x *Repository) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Repository) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *Repository) GetHTMLURL() string {
	if x != nil {
		return x.HTMLURL
	}
	return ""
}

func (x *Repository) GetRepoType() Repository_Type {
	if x != nil {
		return x.RepoType
	}
	return Repository_NONE
}

type Enrollment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CourseID          uint64                  `protobuf:"varint,2,opt,name=courseID,proto3" json:"courseID,omitempty" gorm:"uniqueIndex:idx_unique_enrollment"`
	UserID            uint64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty" gorm:"uniqueIndex:idx_unique_enrollment"`
	GroupID           uint64                  `protobuf:"varint,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	HasTeacherScopes  bool                    `protobuf:"varint,5,opt,name=hasTeacherScopes,proto3" json:"hasTeacherScopes,omitempty"`
	User              *User                   `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Course            *Course                 `protobuf:"bytes,7,opt,name=course,proto3" json:"course,omitempty"`
	Group             *Group                  `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	Status            Enrollment_UserStatus   `protobuf:"varint,9,opt,name=status,proto3,enum=ag.Enrollment_UserStatus" json:"status,omitempty"`
	State             Enrollment_DisplayState `protobuf:"varint,10,opt,name=state,proto3,enum=ag.Enrollment_DisplayState" json:"state,omitempty"`
	SlipDaysRemaining uint32                  `protobuf:"varint,11,opt,name=slipDaysRemaining,proto3" json:"slipDaysRemaining,omitempty" gorm:"-"`
	LastActivityDate  string                  `protobuf:"bytes,12,opt,name=lastActivityDate,proto3" json:"lastActivityDate,omitempty"`
	TotalApproved     uint64                  `protobuf:"varint,13,opt,name=totalApproved,proto3" json:"totalApproved,omitempty"`
	UsedSlipDays      []*UsedSlipDays         `protobuf:"bytes,14,rep,name=usedSlipDays,proto3" json:"usedSlipDays,omitempty"`
}

func (x *Enrollment) Reset() {
	*x = Enrollment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrollment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrollment) ProtoMessage() {}

func (x *Enrollment) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrollment.ProtoReflect.Descriptor instead.
func (*Enrollment) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{8}
}

func (x *Enrollment) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Enrollment) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *Enrollment) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Enrollment) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *Enrollment) GetHasTeacherScopes() bool {
	if x != nil {
		return x.HasTeacherScopes
	}
	return false
}

func (x *Enrollment) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Enrollment) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *Enrollment) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Enrollment) GetStatus() Enrollment_UserStatus {
	if x != nil {
		return x.Status
	}
	return Enrollment_NONE
}

func (x *Enrollment) GetState() Enrollment_DisplayState {
	if x != nil {
		return x.State
	}
	return Enrollment_UNSET
}

func (x *Enrollment) GetSlipDaysRemaining() uint32 {
	if x != nil {
		return x.SlipDaysRemaining
	}
	return 0
}

func (x *Enrollment) GetLastActivityDate() string {
	if x != nil {
		return x.LastActivityDate
	}
	return ""
}

func (x *Enrollment) GetTotalApproved() uint64 {
	if x != nil {
		return x.TotalApproved
	}
	return 0
}

func (x *Enrollment) GetUsedSlipDays() []*UsedSlipDays {
	if x != nil {
		return x.UsedSlipDays
	}
	return nil
}

type UsedSlipDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EnrollmentID uint64 `protobuf:"varint,2,opt,name=enrollmentID,proto3" json:"enrollmentID,omitempty"`
	AssignmentID uint64 `protobuf:"varint,3,opt,name=assignmentID,proto3" json:"assignmentID,omitempty"`
	UsedSlipDays uint32 `protobuf:"varint,4,opt,name=usedSlipDays,proto3" json:"usedSlipDays,omitempty"`
}

func (x *UsedSlipDays) Reset() {
	*x = UsedSlipDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsedSlipDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsedSlipDays) ProtoMessage() {}

func (x *UsedSlipDays) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsedSlipDays.ProtoReflect.Descriptor instead.
func (*UsedSlipDays) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{9}
}

func (x *UsedSlipDays) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UsedSlipDays) GetEnrollmentID() uint64 {
	if x != nil {
		return x.EnrollmentID
	}
	return 0
}

func (x *UsedSlipDays) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

func (x *UsedSlipDays) GetUsedSlipDays() uint32 {
	if x != nil {
		return x.UsedSlipDays
	}
	return 0
}

type Enrollments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enrollments []*Enrollment `protobuf:"bytes,1,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
}

func (x *Enrollments) Reset() {
	*x = Enrollments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrollments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrollments) ProtoMessage() {}

func (x *Enrollments) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrollments.ProtoReflect.Descriptor instead.
func (*Enrollments) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{10}
}

func (x *Enrollments) GetEnrollments() []*Enrollment {
	if x != nil {
		return x.Enrollments
	}
	return nil
}

type SubmissionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignment *Assignment `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	Submission *Submission `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *SubmissionLink) Reset() {
	*x = SubmissionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionLink) ProtoMessage() {}

func (x *SubmissionLink) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionLink.ProtoReflect.Descriptor instead.
func (*SubmissionLink) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{11}
}

func (x *SubmissionLink) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *SubmissionLink) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

type EnrollmentLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enrollment  *Enrollment       `protobuf:"bytes,2,opt,name=enrollment,proto3" json:"enrollment,omitempty"` // must have course and user/group preloaded
	Submissions []*SubmissionLink `protobuf:"bytes,3,rep,name=submissions,proto3" json:"submissions,omitempty"`
}

func (x *EnrollmentLink) Reset() {
	*x = EnrollmentLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentLink) ProtoMessage() {}

func (x *EnrollmentLink) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentLink.ProtoReflect.Descriptor instead.
func (*EnrollmentLink) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{12}
}

func (x *EnrollmentLink) GetEnrollment() *Enrollment {
	if x != nil {
		return x.Enrollment
	}
	return nil
}

func (x *EnrollmentLink) GetSubmissions() []*SubmissionLink {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type CourseSubmissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course *Course           `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"` // preloaded assignments
	Links  []*EnrollmentLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *CourseSubmissions) Reset() {
	*x = CourseSubmissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseSubmissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseSubmissions) ProtoMessage() {}

func (x *CourseSubmissions) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseSubmissions.ProtoReflect.Descriptor instead.
func (*CourseSubmissions) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{13}
}

func (x *CourseSubmissions) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *CourseSubmissions) GetLinks() []*EnrollmentLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CourseID          uint64              `protobuf:"varint,2,opt,name=CourseID,proto3" json:"CourseID,omitempty"` // foreign key
	Name              string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ScriptFile        string              `protobuf:"bytes,4,opt,name=scriptFile,proto3" json:"scriptFile,omitempty"`
	Deadline          string              `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	AutoApprove       bool                `protobuf:"varint,6,opt,name=autoApprove,proto3" json:"autoApprove,omitempty"`
	Order             uint32              `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	IsGroupLab        bool                `protobuf:"varint,8,opt,name=isGroupLab,proto3" json:"isGroupLab,omitempty"`
	ScoreLimit        uint32              `protobuf:"varint,9,opt,name=scoreLimit,proto3" json:"scoreLimit,omitempty"`               // minimal score limit for auto approval
	Reviewers         uint32              `protobuf:"varint,10,opt,name=reviewers,proto3" json:"reviewers,omitempty"`                // number of reviewers that will review submissions for this assignment
	Submissions       []*Submission       `protobuf:"bytes,11,rep,name=submissions,proto3" json:"submissions,omitempty"`             // submissions produced for this assignment
	GradingBenchmarks []*GradingBenchmark `protobuf:"bytes,12,rep,name=gradingBenchmarks,proto3" json:"gradingBenchmarks,omitempty"` // grading benchmarks for this assignment
	ContainerTimeout  uint32              `protobuf:"varint,13,opt,name=containerTimeout,proto3" json:"containerTimeout,omitempty"`  // TODO(meling) Do we need this?
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{14}
}

func (x *Assignment) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Assignment) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *Assignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Assignment) GetScriptFile() string {
	if x != nil {
		return x.ScriptFile
	}
	return ""
}

func (x *Assignment) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *Assignment) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *Assignment) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Assignment) GetIsGroupLab() bool {
	if x != nil {
		return x.IsGroupLab
	}
	return false
}

func (x *Assignment) GetScoreLimit() uint32 {
	if x != nil {
		return x.ScoreLimit
	}
	return 0
}

func (x *Assignment) GetReviewers() uint32 {
	if x != nil {
		return x.Reviewers
	}
	return 0
}

func (x *Assignment) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *Assignment) GetGradingBenchmarks() []*GradingBenchmark {
	if x != nil {
		return x.GradingBenchmarks
	}
	return nil
}

func (x *Assignment) GetContainerTimeout() uint32 {
	if x != nil {
		return x.ContainerTimeout
	}
	return 0
}

type Assignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *Assignments) Reset() {
	*x = Assignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignments) ProtoMessage() {}

func (x *Assignments) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignments.ProtoReflect.Descriptor instead.
func (*Assignments) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{15}
}

func (x *Assignments) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AssignmentID uint64            `protobuf:"varint,2,opt,name=AssignmentID,proto3" json:"AssignmentID,omitempty"` // foreign key
	UserID       uint64            `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID      uint64            `protobuf:"varint,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Score        uint32            `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	CommitHash   string            `protobuf:"bytes,6,opt,name=commitHash,proto3" json:"commitHash,omitempty"`
	Released     bool              `protobuf:"varint,7,opt,name=released,proto3" json:"released,omitempty"` // true => feedback is visible to the student or group members
	Status       Submission_Status `protobuf:"varint,8,opt,name=status,proto3,enum=ag.Submission_Status" json:"status,omitempty"`
	ApprovedDate string            `protobuf:"bytes,9,opt,name=approvedDate,proto3" json:"approvedDate,omitempty"`
	Reviews      []*Review         `protobuf:"bytes,10,rep,name=reviews,proto3" json:"reviews,omitempty"`     // reviews produced for this submission
	BuildInfo    *score.BuildInfo  `protobuf:"bytes,11,opt,name=BuildInfo,proto3" json:"BuildInfo,omitempty"` // build info for tests
	Scores       []*score.Score    `protobuf:"bytes,12,rep,name=Scores,proto3" json:"Scores,omitempty"`       // list of scores for different tests
}

func (x *Submission) Reset() {
	*x = Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{16}
}

func (x *Submission) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Submission) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

func (x *Submission) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Submission) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *Submission) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *Submission) GetReleased() bool {
	if x != nil {
		return x.Released
	}
	return false
}

func (x *Submission) GetStatus() Submission_Status {
	if x != nil {
		return x.Status
	}
	return Submission_NONE
}

func (x *Submission) GetApprovedDate() string {
	if x != nil {
		return x.ApprovedDate
	}
	return ""
}

func (x *Submission) GetReviews() []*Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Submission) GetBuildInfo() *score.BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *Submission) GetScores() []*score.Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

type Submissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submissions []*Submission `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
}

func (x *Submissions) Reset() {
	*x = Submissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submissions) ProtoMessage() {}

func (x *Submissions) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submissions.ProtoReflect.Descriptor instead.
func (*Submissions) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{17}
}

func (x *Submissions) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type GradingBenchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AssignmentID uint64              `protobuf:"varint,2,opt,name=AssignmentID,proto3" json:"AssignmentID,omitempty"` // foreign key
	ReviewID     uint64              `protobuf:"varint,3,opt,name=ReviewID,proto3" json:"ReviewID,omitempty"`         // foreign key
	Heading      string              `protobuf:"bytes,4,opt,name=heading,proto3" json:"heading,omitempty"`
	Comment      string              `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Criteria     []*GradingCriterion `protobuf:"bytes,6,rep,name=criteria,proto3" json:"criteria,omitempty" gorm:"foreignKey:BenchmarkID"`
}

func (x *GradingBenchmark) Reset() {
	*x = GradingBenchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradingBenchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradingBenchmark) ProtoMessage() {}

func (x *GradingBenchmark) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradingBenchmark.ProtoReflect.Descriptor instead.
func (*GradingBenchmark) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{18}
}

func (x *GradingBenchmark) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GradingBenchmark) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

func (x *GradingBenchmark) GetReviewID() uint64 {
	if x != nil {
		return x.ReviewID
	}
	return 0
}

func (x *GradingBenchmark) GetHeading() string {
	if x != nil {
		return x.Heading
	}
	return ""
}

func (x *GradingBenchmark) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GradingBenchmark) GetCriteria() []*GradingCriterion {
	if x != nil {
		return x.Criteria
	}
	return nil
}

type Benchmarks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Benchmarks []*GradingBenchmark `protobuf:"bytes,1,rep,name=benchmarks,proto3" json:"benchmarks,omitempty"`
}

func (x *Benchmarks) Reset() {
	*x = Benchmarks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Benchmarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Benchmarks) ProtoMessage() {}

func (x *Benchmarks) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Benchmarks.ProtoReflect.Descriptor instead.
func (*Benchmarks) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{19}
}

func (x *Benchmarks) GetBenchmarks() []*GradingBenchmark {
	if x != nil {
		return x.Benchmarks
	}
	return nil
}

type GradingCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BenchmarkID uint64                 `protobuf:"varint,2,opt,name=BenchmarkID,proto3" json:"BenchmarkID,omitempty"` // foreign key
	Points      uint64                 `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Grade       GradingCriterion_Grade `protobuf:"varint,5,opt,name=grade,proto3,enum=ag.GradingCriterion_Grade" json:"grade,omitempty"`
	Comment     string                 `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *GradingCriterion) Reset() {
	*x = GradingCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradingCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradingCriterion) ProtoMessage() {}

func (x *GradingCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradingCriterion.ProtoReflect.Descriptor instead.
func (*GradingCriterion) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{20}
}

func (x *GradingCriterion) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GradingCriterion) GetBenchmarkID() uint64 {
	if x != nil {
		return x.BenchmarkID
	}
	return 0
}

func (x *GradingCriterion) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *GradingCriterion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GradingCriterion) GetGrade() GradingCriterion_Grade {
	if x != nil {
		return x.Grade
	}
	return GradingCriterion_NONE
}

func (x *GradingCriterion) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SubmissionID      uint64              `protobuf:"varint,2,opt,name=SubmissionID,proto3" json:"SubmissionID,omitempty"` // foreign key
	ReviewerID        uint64              `protobuf:"varint,3,opt,name=ReviewerID,proto3" json:"ReviewerID,omitempty"`     // UserID of the reviewer
	Feedback          string              `protobuf:"bytes,4,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Ready             bool                `protobuf:"varint,5,opt,name=ready,proto3" json:"ready,omitempty"`
	Score             uint32              `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	GradingBenchmarks []*GradingBenchmark `protobuf:"bytes,7,rep,name=gradingBenchmarks,proto3" json:"gradingBenchmarks,omitempty" gorm:"foreignKey:ReviewID"`
	Edited            string              `protobuf:"bytes,8,opt,name=edited,proto3" json:"edited,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{21}
}

func (x *Review) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Review) GetSubmissionID() uint64 {
	if x != nil {
		return x.SubmissionID
	}
	return 0
}

func (x *Review) GetReviewerID() uint64 {
	if x != nil {
		return x.ReviewerID
	}
	return 0
}

func (x *Review) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *Review) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *Review) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Review) GetGradingBenchmarks() []*GradingBenchmark {
	if x != nil {
		return x.GradingBenchmarks
	}
	return nil
}

func (x *Review) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

type Reviewers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reviewers []*User `protobuf:"bytes,1,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
}

func (x *Reviewers) Reset() {
	*x = Reviewers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reviewers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reviewers) ProtoMessage() {}

func (x *Reviewers) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reviewers.ProtoReflect.Descriptor instead.
func (*Reviewers) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{22}
}

func (x *Reviewers) GetReviewers() []*User {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

type ReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID uint64  `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	Review   *Review `protobuf:"bytes,2,opt,name=review,proto3" json:"review,omitempty"`
}

func (x *ReviewRequest) Reset() {
	*x = ReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewRequest) ProtoMessage() {}

func (x *ReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewRequest.ProtoReflect.Descriptor instead.
func (*ReviewRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{23}
}

func (x *ReviewRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *ReviewRequest) GetReview() *Review {
	if x != nil {
		return x.Review
	}
	return nil
}

type CourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID uint64 `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
}

func (x *CourseRequest) Reset() {
	*x = CourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseRequest) ProtoMessage() {}

func (x *CourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseRequest.ProtoReflect.Descriptor instead.
func (*CourseRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{24}
}

func (x *CourseRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{25}
}

func (x *UserRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID uint64 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{26}
}

func (x *GetGroupRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type GroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  uint64 `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	CourseID uint64 `protobuf:"varint,3,opt,name=courseID,proto3" json:"courseID,omitempty"`
}

func (x *GroupRequest) Reset() {
	*x = GroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRequest) ProtoMessage() {}

func (x *GroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRequest.ProtoReflect.Descriptor instead.
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{27}
}

func (x *GroupRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GroupRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{28}
}

func (x *Provider) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type OrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string `protobuf:"bytes,1,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *OrgRequest) Reset() {
	*x = OrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRequest) ProtoMessage() {}

func (x *OrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRequest.ProtoReflect.Descriptor instead.
func (*OrgRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{29}
}

func (x *OrgRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	PaymentPlan string `protobuf:"bytes,4,opt,name=paymentPlan,proto3" json:"paymentPlan,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{30}
}

func (x *Organization) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Organization) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Organization) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Organization) GetPaymentPlan() string {
	if x != nil {
		return x.PaymentPlan
	}
	return ""
}

type Organizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *Organizations) Reset() {
	*x = Organizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations) ProtoMessage() {}

func (x *Organizations) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations.ProtoReflect.Descriptor instead.
func (*Organizations) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{31}
}

func (x *Organizations) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// EnrollmentRequest is a request for enrolled users of a given course,
// whose enrollment status match those provided in the request. To ignore group members
// that otherwise match the enrollment request, set ignoreGroupMembers to true.
type EnrollmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID           uint64                  `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	IgnoreGroupMembers bool                    `protobuf:"varint,2,opt,name=ignoreGroupMembers,proto3" json:"ignoreGroupMembers,omitempty"`
	WithActivity       bool                    `protobuf:"varint,3,opt,name=withActivity,proto3" json:"withActivity,omitempty"`
	Statuses           []Enrollment_UserStatus `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=ag.Enrollment_UserStatus" json:"statuses,omitempty"`
}

func (x *EnrollmentRequest) Reset() {
	*x = EnrollmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentRequest) ProtoMessage() {}

func (x *EnrollmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentRequest.ProtoReflect.Descriptor instead.
func (*EnrollmentRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{32}
}

func (x *EnrollmentRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *EnrollmentRequest) GetIgnoreGroupMembers() bool {
	if x != nil {
		return x.IgnoreGroupMembers
	}
	return false
}

func (x *EnrollmentRequest) GetWithActivity() bool {
	if x != nil {
		return x.WithActivity
	}
	return false
}

func (x *EnrollmentRequest) GetStatuses() []Enrollment_UserStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// EnrollmentStatusRequest is a request for a given user, with a specific enrollment status.
type EnrollmentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   uint64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Statuses []Enrollment_UserStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=ag.Enrollment_UserStatus" json:"statuses,omitempty"`
}

func (x *EnrollmentStatusRequest) Reset() {
	*x = EnrollmentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentStatusRequest) ProtoMessage() {}

func (x *EnrollmentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentStatusRequest.ProtoReflect.Descriptor instead.
func (*EnrollmentStatusRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{33}
}

func (x *EnrollmentStatusRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *EnrollmentStatusRequest) GetStatuses() []Enrollment_UserStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  uint64 `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	CourseID uint64 `protobuf:"varint,3,opt,name=courseID,proto3" json:"courseID,omitempty"`
}

func (x *SubmissionRequest) Reset() {
	*x = SubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequest) ProtoMessage() {}

func (x *SubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequest.ProtoReflect.Descriptor instead.
func (*SubmissionRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{34}
}

func (x *SubmissionRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SubmissionRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *SubmissionRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

type UpdateSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionID uint64            `protobuf:"varint,1,opt,name=submissionID,proto3" json:"submissionID,omitempty"`
	CourseID     uint64            `protobuf:"varint,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	Score        uint32            `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Released     bool              `protobuf:"varint,4,opt,name=released,proto3" json:"released,omitempty"`
	Status       Submission_Status `protobuf:"varint,5,opt,name=status,proto3,enum=ag.Submission_Status" json:"status,omitempty"`
}

func (x *UpdateSubmissionRequest) Reset() {
	*x = UpdateSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubmissionRequest) ProtoMessage() {}

func (x *UpdateSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubmissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateSubmissionRequest) GetSubmissionID() uint64 {
	if x != nil {
		return x.SubmissionID
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetReleased() bool {
	if x != nil {
		return x.Released
	}
	return false
}

func (x *UpdateSubmissionRequest) GetStatus() Submission_Status {
	if x != nil {
		return x.Status
	}
	return Submission_NONE
}

type UpdateSubmissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID     uint64 `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	AssignmentID uint64 `protobuf:"varint,2,opt,name=assignmentID,proto3" json:"assignmentID,omitempty"`
	ScoreLimit   uint32 `protobuf:"varint,3,opt,name=scoreLimit,proto3" json:"scoreLimit,omitempty"`
	Release      bool   `protobuf:"varint,4,opt,name=release,proto3" json:"release,omitempty"`
	Approve      bool   `protobuf:"varint,5,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *UpdateSubmissionsRequest) Reset() {
	*x = UpdateSubmissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubmissionsRequest) ProtoMessage() {}

func (x *UpdateSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateSubmissionsRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *UpdateSubmissionsRequest) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

func (x *UpdateSubmissionsRequest) GetScoreLimit() uint32 {
	if x != nil {
		return x.ScoreLimit
	}
	return 0
}

func (x *UpdateSubmissionsRequest) GetRelease() bool {
	if x != nil {
		return x.Release
	}
	return false
}

func (x *UpdateSubmissionsRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type SubmissionReviewersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionID uint64 `protobuf:"varint,1,opt,name=submissionID,proto3" json:"submissionID,omitempty"`
	CourseID     uint64 `protobuf:"varint,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
}

func (x *SubmissionReviewersRequest) Reset() {
	*x = SubmissionReviewersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionReviewersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionReviewersRequest) ProtoMessage() {}

func (x *SubmissionReviewersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionReviewersRequest.ProtoReflect.Descriptor instead.
func (*SubmissionReviewersRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{37}
}

func (x *SubmissionReviewersRequest) GetSubmissionID() uint64 {
	if x != nil {
		return x.SubmissionID
	}
	return 0
}

func (x *SubmissionReviewersRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

type Providers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *Providers) Reset() {
	*x = Providers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Providers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Providers) ProtoMessage() {}

func (x *Providers) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Providers.ProtoReflect.Descriptor instead.
func (*Providers) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{38}
}

func (x *Providers) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

type URLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID  uint64            `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	RepoTypes []Repository_Type `protobuf:"varint,2,rep,packed,name=repoTypes,proto3,enum=ag.Repository_Type" json:"repoTypes,omitempty"`
}

func (x *URLRequest) Reset() {
	*x = URLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLRequest) ProtoMessage() {}

func (x *URLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLRequest.ProtoReflect.Descriptor instead.
func (*URLRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{39}
}

func (x *URLRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *URLRequest) GetRepoTypes() []Repository_Type {
	if x != nil {
		return x.RepoTypes
	}
	return nil
}

// used to check whether student/group submission repo is empty
type RepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  uint64 `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	CourseID uint64 `protobuf:"varint,3,opt,name=courseID,proto3" json:"courseID,omitempty"`
}

func (x *RepositoryRequest) Reset() {
	*x = RepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRequest) ProtoMessage() {}

func (x *RepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRequest.ProtoReflect.Descriptor instead.
func (*RepositoryRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{40}
}

func (x *RepositoryRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RepositoryRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *RepositoryRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

type Repositories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URLs map[string]string `protobuf:"bytes,1,rep,name=URLs,proto3" json:"URLs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Repositories) Reset() {
	*x = Repositories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repositories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repositories) ProtoMessage() {}

func (x *Repositories) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repositories.ProtoReflect.Descriptor instead.
func (*Repositories) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{41}
}

func (x *Repositories) GetURLs() map[string]string {
	if x != nil {
		return x.URLs
	}
	return nil
}

type AuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuthorized bool `protobuf:"varint,1,opt,name=IsAuthorized,proto3" json:"IsAuthorized,omitempty"`
}

func (x *AuthorizationResponse) Reset() {
	*x = AuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationResponse) ProtoMessage() {}

func (x *AuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationResponse.ProtoReflect.Descriptor instead.
func (*AuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{42}
}

func (x *AuthorizationResponse) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint64 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{43}
}

func (x *Status) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SubmissionsForCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID      uint64                           `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	Type          SubmissionsForCourseRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ag.SubmissionsForCourseRequest_Type" json:"type,omitempty"`
	WithBuildInfo bool                             `protobuf:"varint,3,opt,name=withBuildInfo,proto3" json:"withBuildInfo,omitempty"`
}

func (x *SubmissionsForCourseRequest) Reset() {
	*x = SubmissionsForCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionsForCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionsForCourseRequest) ProtoMessage() {}

func (x *SubmissionsForCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionsForCourseRequest.ProtoReflect.Descriptor instead.
func (*SubmissionsForCourseRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{44}
}

func (x *SubmissionsForCourseRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *SubmissionsForCourseRequest) GetType() SubmissionsForCourseRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubmissionsForCourseRequest_ALL
}

func (x *SubmissionsForCourseRequest) GetWithBuildInfo() bool {
	if x != nil {
		return x.WithBuildInfo
	}
	return false
}

type RebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionID uint64 `protobuf:"varint,1,opt,name=submissionID,proto3" json:"submissionID,omitempty"`
	AssignmentID uint64 `protobuf:"varint,2,opt,name=assignmentID,proto3" json:"assignmentID,omitempty"`
}

func (x *RebuildRequest) Reset() {
	*x = RebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildRequest) ProtoMessage() {}

func (x *RebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildRequest.ProtoReflect.Descriptor instead.
func (*RebuildRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{45}
}

func (x *RebuildRequest) GetSubmissionID() uint64 {
	if x != nil {
		return x.SubmissionID
	}
	return 0
}

func (x *RebuildRequest) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

type CourseUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseCode string `protobuf:"bytes,1,opt,name=courseCode,proto3" json:"courseCode,omitempty"`
	CourseYear uint32 `protobuf:"varint,2,opt,name=courseYear,proto3" json:"courseYear,omitempty"`
	UserLogin  string `protobuf:"bytes,3,opt,name=userLogin,proto3" json:"userLogin,omitempty"`
}

func (x *CourseUserRequest) Reset() {
	*x = CourseUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseUserRequest) ProtoMessage() {}

func (x *CourseUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseUserRequest.ProtoReflect.Descriptor instead.
func (*CourseUserRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{46}
}

func (x *CourseUserRequest) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *CourseUserRequest) GetCourseYear() uint32 {
	if x != nil {
		return x.CourseYear
	}
	return 0
}

func (x *CourseUserRequest) GetUserLogin() string {
	if x != nil {
		return x.UserLogin
	}
	return ""
}

type AssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseID     uint64 `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	AssignmentID uint64 `protobuf:"varint,2,opt,name=assignmentID,proto3" json:"assignmentID,omitempty"`
}

func (x *AssignmentRequest) Reset() {
	*x = AssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentRequest) ProtoMessage() {}

func (x *AssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentRequest.ProtoReflect.Descriptor instead.
func (*AssignmentRequest) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{47}
}

func (x *AssignmentRequest) GetCourseID() uint64 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *AssignmentRequest) GetAssignmentID() uint64 {
	if x != nil {
		return x.AssignmentID
	}
	return 0
}

// Void contains no fields. A server response with a Void still contains a gRPC status code,
// which can be checked for success or failure. Status code 0 indicates that the requested action was successful,
// whereas any other status code indicates some failure. As such, the status code can be used as a boolean result from the server.
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ag_ag_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_ag_ag_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_ag_ag_proto_rawDescGZIP(), []int{48}
}

var File_ag_ag_proto protoreflect.FileDescriptor

var file_ag_ag_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x2f, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x61,
	0x67, 0x1a, 0x15, 0x6b, 0x69, 0x74, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52,
	0x4c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xca, 0xb5, 0x03, 0x2c, 0xa2, 0x01, 0x29,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x3a, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x30, 0xca, 0xb5, 0x03, 0x2c, 0xa2, 0x01, 0x29, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a,
	0x75, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x92, 0x03, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64,
	0x78, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0xca, 0xb5,
	0x03, 0x2b, 0xa2, 0x01, 0x28, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x24, 0xca, 0xb5, 0x03, 0x20, 0xa2, 0x01, 0x1d,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79, 0x3a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3b, 0x22, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01,
	0x22, 0x2b, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x67, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x8b, 0x04,
	0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x08,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0xca, 0xb5, 0x03, 0x0b, 0xa2,
	0x01, 0x08, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x2f, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0xe8, 0x03, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x75, 0x69,
	0x64, 0x5f, 0x67, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x75, 0x69,
	0x64, 0x5f, 0x67, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01,
	0x23, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x75, 0x69, 0x64, 0x5f, 0x67, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x48, 0x54, 0x4d, 0x4c, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x48, 0x54, 0x4d, 0x4c, 0x55, 0x52, 0x4c, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2a,
	0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x75, 0x69, 0x64, 0x5f, 0x67, 0x69, 0x64,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x53, 0x54, 0x53,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x05, 0x22, 0x89, 0x06, 0x0a, 0x0a, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01,
	0x28, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64,
	0x78, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x73,
	0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xca, 0xb5, 0x03, 0x0b, 0xa2, 0x01, 0x08, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70,
	0x44, 0x61, 0x79, 0x73, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61,
	0x79, 0x73, 0x22, 0x3d, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x10,
	0x03, 0x22, 0x40, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x03, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x79, 0x73,
	0x22, 0x3f, 0x0a, 0x0b, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xc0,
	0x03, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61,
	0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x42, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x11, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x3f, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x3f, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x67, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x56, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0xca, 0xb5, 0x03, 0x20, 0xa2, 0x01,
	0x1d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65,
	0x79, 0x3a, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x44, 0x22, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x42, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0a, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xf5, 0x01, 0x0a,
	0x10, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x05, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x02, 0x22, 0xa3, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x21, 0xca, 0xb5,
	0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x3a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x22, 0x52,
	0x11, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x22,
	0x4f, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x25, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x22, 0x5c, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22,
	0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x0a, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6c, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x47, 0x0a,
	0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x17, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x61, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44,
	0x22, 0xba, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x5c,
	0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x0a, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x55, 0x52, 0x4c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x52, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x55, 0x52, 0x4c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x55, 0x52, 0x4c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3b, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x32, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x67,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x53, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x06, 0x0a, 0x04, 0x56,
	0x6f, 0x69, 0x64, 0x32, 0xf4, 0x11, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x08,
	0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x08, 0x2e, 0x61, 0x67,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x13, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x08,
	0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x13, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x10,
	0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x09, 0x2e,
	0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x09, 0x2e, 0x61, 0x67, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x2b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x10, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x1a, 0x0b, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x12, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x0a,
	0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x61,
	0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x08,
	0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x61,
	0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x61, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x67,
	0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x61,
	0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x67, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x67,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x12, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x1a,
	0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x61, 0x67, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x2e, 0x61, 0x67,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x1a, 0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x11, 0x2e, 0x61,
	0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x2f, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x11, 0x2e,
	0x61, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x2e, 0x61, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12,
	0x29, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x08, 0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0d, 0x2e, 0x61, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e,
	0x61, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x61, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x61, 0x67, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08,
	0x2e, 0x61, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x61, 0x67, 0xba,
	0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ag_ag_proto_rawDescOnce sync.Once
	file_ag_ag_proto_rawDescData = file_ag_ag_proto_rawDesc
)

func file_ag_ag_proto_rawDescGZIP() []byte {
	file_ag_ag_proto_rawDescOnce.Do(func() {
		file_ag_ag_proto_rawDescData = protoimpl.X.CompressGZIP(file_ag_ag_proto_rawDescData)
	})
	return file_ag_ag_proto_rawDescData
}

var file_ag_ag_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_ag_ag_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_ag_ag_proto_goTypes = []interface{}{
	(Group_GroupStatus)(0),                // 0: ag.Group.GroupStatus
	(Repository_Type)(0),                  // 1: ag.Repository.Type
	(Enrollment_UserStatus)(0),            // 2: ag.Enrollment.UserStatus
	(Enrollment_DisplayState)(0),          // 3: ag.Enrollment.DisplayState
	(Submission_Status)(0),                // 4: ag.Submission.Status
	(GradingCriterion_Grade)(0),           // 5: ag.GradingCriterion.Grade
	(SubmissionsForCourseRequest_Type)(0), // 6: ag.SubmissionsForCourseRequest.Type
	(*User)(nil),                          // 7: ag.User
	(*Users)(nil),                         // 8: ag.Users
	(*RemoteIdentity)(nil),                // 9: ag.RemoteIdentity
	(*Group)(nil),                         // 10: ag.Group
	(*Groups)(nil),                        // 11: ag.Groups
	(*Course)(nil),                        // 12: ag.Course
	(*Courses)(nil),                       // 13: ag.Courses
	(*Repository)(nil),                    // 14: ag.Repository
	(*Enrollment)(nil),                    // 15: ag.Enrollment
	(*UsedSlipDays)(nil),                  // 16: ag.UsedSlipDays
	(*Enrollments)(nil),                   // 17: ag.Enrollments
	(*SubmissionLink)(nil),                // 18: ag.SubmissionLink
	(*EnrollmentLink)(nil),                // 19: ag.EnrollmentLink
	(*CourseSubmissions)(nil),             // 20: ag.CourseSubmissions
	(*Assignment)(nil),                    // 21: ag.Assignment
	(*Assignments)(nil),                   // 22: ag.Assignments
	(*Submission)(nil),                    // 23: ag.Submission
	(*Submissions)(nil),                   // 24: ag.Submissions
	(*GradingBenchmark)(nil),              // 25: ag.GradingBenchmark
	(*Benchmarks)(nil),                    // 26: ag.Benchmarks
	(*GradingCriterion)(nil),              // 27: ag.GradingCriterion
	(*Review)(nil),                        // 28: ag.Review
	(*Reviewers)(nil),                     // 29: ag.Reviewers
	(*ReviewRequest)(nil),                 // 30: ag.ReviewRequest
	(*CourseRequest)(nil),                 // 31: ag.CourseRequest
	(*UserRequest)(nil),                   // 32: ag.UserRequest
	(*GetGroupRequest)(nil),               // 33: ag.GetGroupRequest
	(*GroupRequest)(nil),                  // 34: ag.GroupRequest
	(*Provider)(nil),                      // 35: ag.Provider
	(*OrgRequest)(nil),                    // 36: ag.OrgRequest
	(*Organization)(nil),                  // 37: ag.Organization
	(*Organizations)(nil),                 // 38: ag.Organizations
	(*EnrollmentRequest)(nil),             // 39: ag.EnrollmentRequest
	(*EnrollmentStatusRequest)(nil),       // 40: ag.EnrollmentStatusRequest
	(*SubmissionRequest)(nil),             // 41: ag.SubmissionRequest
	(*UpdateSubmissionRequest)(nil),       // 42: ag.UpdateSubmissionRequest
	(*UpdateSubmissionsRequest)(nil),      // 43: ag.UpdateSubmissionsRequest
	(*SubmissionReviewersRequest)(nil),    // 44: ag.SubmissionReviewersRequest
	(*Providers)(nil),                     // 45: ag.Providers
	(*URLRequest)(nil),                    // 46: ag.URLRequest
	(*RepositoryRequest)(nil),             // 47: ag.RepositoryRequest
	(*Repositories)(nil),                  // 48: ag.Repositories
	(*AuthorizationResponse)(nil),         // 49: ag.AuthorizationResponse
	(*Status)(nil),                        // 50: ag.Status
	(*SubmissionsForCourseRequest)(nil),   // 51: ag.SubmissionsForCourseRequest
	(*RebuildRequest)(nil),                // 52: ag.RebuildRequest
	(*CourseUserRequest)(nil),             // 53: ag.CourseUserRequest
	(*AssignmentRequest)(nil),             // 54: ag.AssignmentRequest
	(*Void)(nil),                          // 55: ag.Void
	nil,                                   // 56: ag.Repositories.URLsEntry
	(*score.BuildInfo)(nil),               // 57: score.BuildInfo
	(*score.Score)(nil),                   // 58: score.Score
}
var file_ag_ag_proto_depIdxs = []int32{
	9,  // 0: ag.User.remoteIdentities:type_name -> ag.RemoteIdentity
	15, // 1: ag.User.enrollments:type_name -> ag.Enrollment
	7,  // 2: ag.Users.users:type_name -> ag.User
	0,  // 3: ag.Group.status:type_name -> ag.Group.GroupStatus
	7,  // 4: ag.Group.users:type_name -> ag.User
	15, // 5: ag.Group.enrollments:type_name -> ag.Enrollment
	10, // 6: ag.Groups.groups:type_name -> ag.Group
	2,  // 7: ag.Course.enrolled:type_name -> ag.Enrollment.UserStatus
	15, // 8: ag.Course.enrollments:type_name -> ag.Enrollment
	21, // 9: ag.Course.assignments:type_name -> ag.Assignment
	10, // 10: ag.Course.groups:type_name -> ag.Group
	12, // 11: ag.Courses.courses:type_name -> ag.Course
	1,  // 12: ag.Repository.repoType:type_name -> ag.Repository.Type
	7,  // 13: ag.Enrollment.user:type_name -> ag.User
	12, // 14: ag.Enrollment.course:type_name -> ag.Course
	10, // 15: ag.Enrollment.group:type_name -> ag.Group
	2,  // 16: ag.Enrollment.status:type_name -> ag.Enrollment.UserStatus
	3,  // 17: ag.Enrollment.state:type_name -> ag.Enrollment.DisplayState
	16, // 18: ag.Enrollment.usedSlipDays:type_name -> ag.UsedSlipDays
	15, // 19: ag.Enrollments.enrollments:type_name -> ag.Enrollment
	21, // 20: ag.SubmissionLink.assignment:type_name -> ag.Assignment
	23, // 21: ag.SubmissionLink.submission:type_name -> ag.Submission
	15, // 22: ag.EnrollmentLink.enrollment:type_name -> ag.Enrollment
	18, // 23: ag.EnrollmentLink.submissions:type_name -> ag.SubmissionLink
	12, // 24: ag.CourseSubmissions.course:type_name -> ag.Course
	19, // 25: ag.CourseSubmissions.links:type_name -> ag.EnrollmentLink
	23, // 26: ag.Assignment.submissions:type_name -> ag.Submission
	25, // 27: ag.Assignment.gradingBenchmarks:type_name -> ag.GradingBenchmark
	21, // 28: ag.Assignments.assignments:type_name -> ag.Assignment
	4,  // 29: ag.Submission.status:type_name -> ag.Submission.Status
	28, // 30: ag.Submission.reviews:type_name -> ag.Review
	57, // 31: ag.Submission.BuildInfo:type_name -> score.BuildInfo
	58, // 32: ag.Submission.Scores:type_name -> score.Score
	23, // 33: ag.Submissions.submissions:type_name -> ag.Submission
	27, // 34: ag.GradingBenchmark.criteria:type_name -> ag.GradingCriterion
	25, // 35: ag.Benchmarks.benchmarks:type_name -> ag.GradingBenchmark
	5,  // 36: ag.GradingCriterion.grade:type_name -> ag.GradingCriterion.Grade
	25, // 37: ag.Review.gradingBenchmarks:type_name -> ag.GradingBenchmark
	7,  // 38: ag.Reviewers.reviewers:type_name -> ag.User
	28, // 39: ag.ReviewRequest.review:type_name -> ag.Review
	37, // 40: ag.Organizations.organizations:type_name -> ag.Organization
	2,  // 41: ag.EnrollmentRequest.statuses:type_name -> ag.Enrollment.UserStatus
	2,  // 42: ag.EnrollmentStatusRequest.statuses:type_name -> ag.Enrollment.UserStatus
	4,  // 43: ag.UpdateSubmissionRequest.status:type_name -> ag.Submission.Status
	1,  // 44: ag.URLRequest.repoTypes:type_name -> ag.Repository.Type
	56, // 45: ag.Repositories.URLs:type_name -> ag.Repositories.URLsEntry
	6,  // 46: ag.SubmissionsForCourseRequest.type:type_name -> ag.SubmissionsForCourseRequest.Type
	55, // 47: ag.AutograderService.GetUser:input_type -> ag.Void
	55, // 48: ag.AutograderService.GetUsers:input_type -> ag.Void
	53, // 49: ag.AutograderService.GetUserByCourse:input_type -> ag.CourseUserRequest
	7,  // 50: ag.AutograderService.UpdateUser:input_type -> ag.User
	55, // 51: ag.AutograderService.IsAuthorizedTeacher:input_type -> ag.Void
	33, // 52: ag.AutograderService.GetGroup:input_type -> ag.GetGroupRequest
	34, // 53: ag.AutograderService.GetGroupByUserAndCourse:input_type -> ag.GroupRequest
	31, // 54: ag.AutograderService.GetGroupsByCourse:input_type -> ag.CourseRequest
	10, // 55: ag.AutograderService.CreateGroup:input_type -> ag.Group
	10, // 56: ag.AutograderService.UpdateGroup:input_type -> ag.Group
	34, // 57: ag.AutograderService.DeleteGroup:input_type -> ag.GroupRequest
	31, // 58: ag.AutograderService.GetCourse:input_type -> ag.CourseRequest
	55, // 59: ag.AutograderService.GetCourses:input_type -> ag.Void
	40, // 60: ag.AutograderService.GetCoursesByUser:input_type -> ag.EnrollmentStatusRequest
	12, // 61: ag.AutograderService.CreateCourse:input_type -> ag.Course
	12, // 62: ag.AutograderService.UpdateCourse:input_type -> ag.Course
	15, // 63: ag.AutograderService.UpdateCourseVisibility:input_type -> ag.Enrollment
	31, // 64: ag.AutograderService.GetAssignments:input_type -> ag.CourseRequest
	31, // 65: ag.AutograderService.UpdateAssignments:input_type -> ag.CourseRequest
	40, // 66: ag.AutograderService.GetEnrollmentsByUser:input_type -> ag.EnrollmentStatusRequest
	39, // 67: ag.AutograderService.GetEnrollmentsByCourse:input_type -> ag.EnrollmentRequest
	15, // 68: ag.AutograderService.CreateEnrollment:input_type -> ag.Enrollment
	15, // 69: ag.AutograderService.UpdateEnrollment:input_type -> ag.Enrollment
	31, // 70: ag.AutograderService.UpdateEnrollments:input_type -> ag.CourseRequest
	41, // 71: ag.AutograderService.GetSubmissions:input_type -> ag.SubmissionRequest
	51, // 72: ag.AutograderService.GetSubmissionsByCourse:input_type -> ag.SubmissionsForCourseRequest
	42, // 73: ag.AutograderService.UpdateSubmission:input_type -> ag.UpdateSubmissionRequest
	43, // 74: ag.AutograderService.UpdateSubmissions:input_type -> ag.UpdateSubmissionsRequest
	52, // 75: ag.AutograderService.RebuildSubmission:input_type -> ag.RebuildRequest
	54, // 76: ag.AutograderService.RebuildSubmissions:input_type -> ag.AssignmentRequest
	25, // 77: ag.AutograderService.CreateBenchmark:input_type -> ag.GradingBenchmark
	25, // 78: ag.AutograderService.UpdateBenchmark:input_type -> ag.GradingBenchmark
	25, // 79: ag.AutograderService.DeleteBenchmark:input_type -> ag.GradingBenchmark
	27, // 80: ag.AutograderService.CreateCriterion:input_type -> ag.GradingCriterion
	27, // 81: ag.AutograderService.UpdateCriterion:input_type -> ag.GradingCriterion
	27, // 82: ag.AutograderService.DeleteCriterion:input_type -> ag.GradingCriterion
	30, // 83: ag.AutograderService.CreateReview:input_type -> ag.ReviewRequest
	30, // 84: ag.AutograderService.UpdateReview:input_type -> ag.ReviewRequest
	44, // 85: ag.AutograderService.GetReviewers:input_type -> ag.SubmissionReviewersRequest
	55, // 86: ag.AutograderService.GetProviders:input_type -> ag.Void
	36, // 87: ag.AutograderService.GetOrganization:input_type -> ag.OrgRequest
	46, // 88: ag.AutograderService.GetRepositories:input_type -> ag.URLRequest
	47, // 89: ag.AutograderService.IsEmptyRepo:input_type -> ag.RepositoryRequest
	7,  // 90: ag.AutograderService.GetUser:output_type -> ag.User
	8,  // 91: ag.AutograderService.GetUsers:output_type -> ag.Users
	7,  // 92: ag.AutograderService.GetUserByCourse:output_type -> ag.User
	55, // 93: ag.AutograderService.UpdateUser:output_type -> ag.Void
	49, // 94: ag.AutograderService.IsAuthorizedTeacher:output_type -> ag.AuthorizationResponse
	10, // 95: ag.AutograderService.GetGroup:output_type -> ag.Group
	10, // 96: ag.AutograderService.GetGroupByUserAndCourse:output_type -> ag.Group
	11, // 97: ag.AutograderService.GetGroupsByCourse:output_type -> ag.Groups
	10, // 98: ag.AutograderService.CreateGroup:output_type -> ag.Group
	55, // 99: ag.AutograderService.UpdateGroup:output_type -> ag.Void
	55, // 100: ag.AutograderService.DeleteGroup:output_type -> ag.Void
	12, // 101: ag.AutograderService.GetCourse:output_type -> ag.Course
	13, // 102: ag.AutograderService.GetCourses:output_type -> ag.Courses
	13, // 103: ag.AutograderService.GetCoursesByUser:output_type -> ag.Courses
	12, // 104: ag.AutograderService.CreateCourse:output_type -> ag.Course
	55, // 105: ag.AutograderService.UpdateCourse:output_type -> ag.Void
	55, // 106: ag.AutograderService.UpdateCourseVisibility:output_type -> ag.Void
	22, // 107: ag.AutograderService.GetAssignments:output_type -> ag.Assignments
	55, // 108: ag.AutograderService.UpdateAssignments:output_type -> ag.Void
	17, // 109: ag.AutograderService.GetEnrollmentsByUser:output_type -> ag.Enrollments
	17, // 110: ag.AutograderService.GetEnrollmentsByCourse:output_type -> ag.Enrollments
	55, // 111: ag.AutograderService.CreateEnrollment:output_type -> ag.Void
	55, // 112: ag.AutograderService.UpdateEnrollment:output_type -> ag.Void
	55, // 113: ag.AutograderService.UpdateEnrollments:output_type -> ag.Void
	24, // 114: ag.AutograderService.GetSubmissions:output_type -> ag.Submissions
	20, // 115: ag.AutograderService.GetSubmissionsByCourse:output_type -> ag.CourseSubmissions
	55, // 116: ag.AutograderService.UpdateSubmission:output_type -> ag.Void
	55, // 117: ag.AutograderService.UpdateSubmissions:output_type -> ag.Void
	23, // 118: ag.AutograderService.RebuildSubmission:output_type -> ag.Submission
	55, // 119: ag.AutograderService.RebuildSubmissions:output_type -> ag.Void
	25, // 120: ag.AutograderService.CreateBenchmark:output_type -> ag.GradingBenchmark
	55, // 121: ag.AutograderService.UpdateBenchmark:output_type -> ag.Void
	55, // 122: ag.AutograderService.DeleteBenchmark:output_type -> ag.Void
	27, // 123: ag.AutograderService.CreateCriterion:output_type -> ag.GradingCriterion
	55, // 124: ag.AutograderService.UpdateCriterion:output_type -> ag.Void
	55, // 125: ag.AutograderService.DeleteCriterion:output_type -> ag.Void
	28, // 126: ag.AutograderService.CreateReview:output_type -> ag.Review
	28, // 127: ag.AutograderService.UpdateReview:output_type -> ag.Review
	29, // 128: ag.AutograderService.GetReviewers:output_type -> ag.Reviewers
	45, // 129: ag.AutograderService.GetProviders:output_type -> ag.Providers
	37, // 130: ag.AutograderService.GetOrganization:output_type -> ag.Organization
	48, // 131: ag.AutograderService.GetRepositories:output_type -> ag.Repositories
	55, // 132: ag.AutograderService.IsEmptyRepo:output_type -> ag.Void
	90, // [90:133] is the sub-list for method output_type
	47, // [47:90] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_ag_ag_proto_init() }
func file_ag_ag_proto_init() {
	if File_ag_ag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ag_ag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrollment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsedSlipDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrollments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseSubmissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradingBenchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Benchmarks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradingCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reviewers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubmissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionReviewersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Providers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repositories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionsForCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ag_ag_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ag_ag_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ag_ag_proto_goTypes,
		DependencyIndexes: file_ag_ag_proto_depIdxs,
		EnumInfos:         file_ag_ag_proto_enumTypes,
		MessageInfos:      file_ag_ag_proto_msgTypes,
	}.Build()
	File_ag_ag_proto = out.File
	file_ag_ag_proto_rawDesc = nil
	file_ag_ag_proto_goTypes = nil
	file_ag_ag_proto_depIdxs = nil
}
