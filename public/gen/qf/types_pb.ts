// @generated by protoc-gen-es v0.0.10 with parameter "target=ts"
// @generated from file qf/types.proto (package qf, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";
import {BuildInfo, Score} from "../kit/score/score_pb.js";

/**
 * @generated from message qf.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: bool isAdmin = 2;
   */
  isAdmin = false;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string studentID = 4;
   */
  studentID = "";

  /**
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * @generated from field: string avatarURL = 6;
   */
  avatarURL = "";

  /**
   * @generated from field: string login = 7;
   */
  login = "";

  /**
   * @generated from field: bool updateToken = 8;
   */
  updateToken = false;

  /**
   * @generated from field: repeated qf.RemoteIdentity remoteIdentities = 9;
   */
  remoteIdentities: RemoteIdentity[] = [];

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 10;
   */
  enrollments: Enrollment[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "isAdmin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "studentID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "avatarURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "updateToken", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "remoteIdentities", kind: "message", T: RemoteIdentity, repeated: true },
    { no: 10, name: "enrollments", kind: "message", T: Enrollment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message qf.Users
 */
export class Users extends Message<Users> {
  /**
   * @generated from field: repeated qf.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<Users>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Users";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Users {
    return new Users().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJsonString(jsonString, options);
  }

  static equals(a: Users | PlainMessage<Users> | undefined, b: Users | PlainMessage<Users> | undefined): boolean {
    return proto3.util.equals(Users, a, b);
  }
}

/**
 * @generated from message qf.RemoteIdentity
 */
export class RemoteIdentity extends Message<RemoteIdentity> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: string provider = 2;
   */
  provider = "";

  /**
   * @generated from field: uint64 remoteID = 3;
   */
  remoteID = protoInt64.zero;

  /**
   * @generated from field: string accessToken = 4;
   */
  accessToken = "";

  /**
   * @generated from field: uint64 userID = 5;
   */
  userID = protoInt64.zero;

  constructor(data?: PartialMessage<RemoteIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.RemoteIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remoteID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteIdentity {
    return new RemoteIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteIdentity {
    return new RemoteIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteIdentity {
    return new RemoteIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: RemoteIdentity | PlainMessage<RemoteIdentity> | undefined, b: RemoteIdentity | PlainMessage<RemoteIdentity> | undefined): boolean {
    return proto3.util.equals(RemoteIdentity, a, b);
  }
}

/**
 * @generated from message qf.Group
 */
export class Group extends Message<Group> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint64 courseID = 3;
   */
  courseID = protoInt64.zero;

  /**
   * @generated from field: uint64 teamID = 4;
   */
  teamID = protoInt64.zero;

  /**
   * @generated from field: qf.Group.GroupStatus status = 5;
   */
  status = Group_GroupStatus.PENDING;

  /**
   * @generated from field: repeated qf.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 7;
   */
  enrollments: Enrollment[] = [];

  constructor(data?: PartialMessage<Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "teamID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(Group_GroupStatus) },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "enrollments", kind: "message", T: Enrollment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {
    return new Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJsonString(jsonString, options);
  }

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {
    return proto3.util.equals(Group, a, b);
  }
}

/**
 * @generated from enum qf.Group.GroupStatus
 */
export enum Group_GroupStatus {
  /**
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * @generated from enum value: APPROVED = 1;
   */
  APPROVED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Group_GroupStatus)
proto3.util.setEnumType(Group_GroupStatus, "qf.Group.GroupStatus", [
  { no: 0, name: "PENDING" },
  { no: 1, name: "APPROVED" },
]);

/**
 * @generated from message qf.Groups
 */
export class Groups extends Message<Groups> {
  /**
   * @generated from field: repeated qf.Group groups = 1;
   */
  groups: Group[] = [];

  constructor(data?: PartialMessage<Groups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Groups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Groups {
    return new Groups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Groups {
    return new Groups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Groups {
    return new Groups().fromJsonString(jsonString, options);
  }

  static equals(a: Groups | PlainMessage<Groups> | undefined, b: Groups | PlainMessage<Groups> | undefined): boolean {
    return proto3.util.equals(Groups, a, b);
  }
}

/**
 * @generated from message qf.Course
 */
export class Course extends Message<Course> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: uint64 courseCreatorID = 2;
   */
  courseCreatorID = protoInt64.zero;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string code = 4;
   */
  code = "";

  /**
   * @generated from field: uint32 year = 5;
   */
  year = 0;

  /**
   * @generated from field: string tag = 6;
   */
  tag = "";

  /**
   * @generated from field: string provider = 7;
   */
  provider = "";

  /**
   * @generated from field: uint64 organizationID = 8;
   */
  organizationID = protoInt64.zero;

  /**
   * The organization's SCM name, e.g. uis-dat520-2020.
   *
   * @generated from field: string organizationName = 9;
   */
  organizationName = "";

  /**
   * @generated from field: uint32 slipDays = 10;
   */
  slipDays = 0;

  /**
   * @generated from field: string dockerfile = 11;
   */
  dockerfile = "";

  /**
   * @generated from field: qf.Enrollment.UserStatus enrolled = 12;
   */
  enrolled = Enrollment_UserStatus.NONE;

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 13;
   */
  enrollments: Enrollment[] = [];

  /**
   * @generated from field: repeated qf.Assignment assignments = 14;
   */
  assignments: Assignment[] = [];

  /**
   * @generated from field: repeated qf.Group groups = 15;
   */
  groups: Group[] = [];

  constructor(data?: PartialMessage<Course>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Course";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "courseCreatorID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "year", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "organizationID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "organizationName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "slipDays", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "dockerfile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "enrolled", kind: "enum", T: proto3.getEnumType(Enrollment_UserStatus) },
    { no: 13, name: "enrollments", kind: "message", T: Enrollment, repeated: true },
    { no: 14, name: "assignments", kind: "message", T: Assignment, repeated: true },
    { no: 15, name: "groups", kind: "message", T: Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Course {
    return new Course().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJsonString(jsonString, options);
  }

  static equals(a: Course | PlainMessage<Course> | undefined, b: Course | PlainMessage<Course> | undefined): boolean {
    return proto3.util.equals(Course, a, b);
  }
}

/**
 * @generated from message qf.Courses
 */
export class Courses extends Message<Courses> {
  /**
   * @generated from field: repeated qf.Course courses = 1;
   */
  courses: Course[] = [];

  constructor(data?: PartialMessage<Courses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Courses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Courses {
    return new Courses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Courses {
    return new Courses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Courses {
    return new Courses().fromJsonString(jsonString, options);
  }

  static equals(a: Courses | PlainMessage<Courses> | undefined, b: Courses | PlainMessage<Courses> | undefined): boolean {
    return proto3.util.equals(Courses, a, b);
  }
}

/**
 * @generated from message qf.Repository
 */
export class Repository extends Message<Repository> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: uint64 organizationID = 2;
   */
  organizationID = protoInt64.zero;

  /**
   * ID of a github repository
   *
   * @generated from field: uint64 repositoryID = 3;
   */
  repositoryID = protoInt64.zero;

  /**
   * @generated from field: uint64 userID = 4;
   */
  userID = protoInt64.zero;

  /**
   * @generated from field: uint64 groupID = 5;
   */
  groupID = protoInt64.zero;

  /**
   * @generated from field: string HTMLURL = 6;
   */
  HTMLURL = "";

  /**
   * @generated from field: qf.Repository.Type repoType = 7;
   */
  repoType = Repository_Type.NONE;

  /**
   * Issues associated with this repository
   *
   * @generated from field: repeated qf.Issue issues = 8;
   */
  issues: Issue[] = [];

  constructor(data?: PartialMessage<Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "organizationID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "repositoryID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "HTMLURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "repoType", kind: "enum", T: proto3.getEnumType(Repository_Type) },
    { no: 8, name: "issues", kind: "message", T: Issue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository {
    return new Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJsonString(jsonString, options);
  }

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean {
    return proto3.util.equals(Repository, a, b);
  }
}

/**
 * @generated from enum qf.Repository.Type
 */
export enum Repository_Type {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: ASSIGNMENTS = 2;
   */
  ASSIGNMENTS = 2,

  /**
   * @generated from enum value: TESTS = 3;
   */
  TESTS = 3,

  /**
   * @generated from enum value: USER = 4;
   */
  USER = 4,

  /**
   * @generated from enum value: GROUP = 5;
   */
  GROUP = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Repository_Type)
proto3.util.setEnumType(Repository_Type, "qf.Repository.Type", [
  { no: 0, name: "NONE" },
  { no: 1, name: "INFO" },
  { no: 2, name: "ASSIGNMENTS" },
  { no: 3, name: "TESTS" },
  { no: 4, name: "USER" },
  { no: 5, name: "GROUP" },
]);

/**
 * @generated from message qf.Enrollment
 */
export class Enrollment extends Message<Enrollment> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: uint64 courseID = 2;
   */
  courseID = protoInt64.zero;

  /**
   * @generated from field: uint64 userID = 3;
   */
  userID = protoInt64.zero;

  /**
   * @generated from field: uint64 groupID = 4;
   */
  groupID = protoInt64.zero;

  /**
   * @generated from field: qf.User user = 5;
   */
  user?: User;

  /**
   * @generated from field: qf.Course course = 6;
   */
  course?: Course;

  /**
   * @generated from field: qf.Group group = 7;
   */
  group?: Group;

  /**
   * @generated from field: qf.Enrollment.UserStatus status = 8;
   */
  status = Enrollment_UserStatus.NONE;

  /**
   * @generated from field: qf.Enrollment.DisplayState state = 9;
   */
  state = Enrollment_DisplayState.UNSET;

  /**
   * @generated from field: uint32 slipDaysRemaining = 10;
   */
  slipDaysRemaining = 0;

  /**
   * @generated from field: google.protobuf.Timestamp lastActivityDate = 11;
   */
  lastActivityDate?: Timestamp;

  /**
   * @generated from field: uint64 totalApproved = 12;
   */
  totalApproved = protoInt64.zero;

  /**
   * @generated from field: repeated qf.UsedSlipDays usedSlipDays = 13;
   */
  usedSlipDays: UsedSlipDays[] = [];

  constructor(data?: PartialMessage<Enrollment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Enrollment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "user", kind: "message", T: User },
    { no: 6, name: "course", kind: "message", T: Course },
    { no: 7, name: "group", kind: "message", T: Group },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(Enrollment_UserStatus) },
    { no: 9, name: "state", kind: "enum", T: proto3.getEnumType(Enrollment_DisplayState) },
    { no: 10, name: "slipDaysRemaining", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "lastActivityDate", kind: "message", T: Timestamp },
    { no: 12, name: "totalApproved", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "usedSlipDays", kind: "message", T: UsedSlipDays, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enrollment {
    return new Enrollment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enrollment {
    return new Enrollment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enrollment {
    return new Enrollment().fromJsonString(jsonString, options);
  }

  static equals(a: Enrollment | PlainMessage<Enrollment> | undefined, b: Enrollment | PlainMessage<Enrollment> | undefined): boolean {
    return proto3.util.equals(Enrollment, a, b);
  }
}

/**
 * @generated from enum qf.Enrollment.UserStatus
 */
export enum Enrollment_UserStatus {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: STUDENT = 2;
   */
  STUDENT = 2,

  /**
   * @generated from enum value: TEACHER = 3;
   */
  TEACHER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Enrollment_UserStatus)
proto3.util.setEnumType(Enrollment_UserStatus, "qf.Enrollment.UserStatus", [
  { no: 0, name: "NONE" },
  { no: 1, name: "PENDING" },
  { no: 2, name: "STUDENT" },
  { no: 3, name: "TEACHER" },
]);

/**
 * @generated from enum qf.Enrollment.DisplayState
 */
export enum Enrollment_DisplayState {
  /**
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: HIDDEN = 1;
   */
  HIDDEN = 1,

  /**
   * @generated from enum value: VISIBLE = 2;
   */
  VISIBLE = 2,

  /**
   * @generated from enum value: FAVORITE = 3;
   */
  FAVORITE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Enrollment_DisplayState)
proto3.util.setEnumType(Enrollment_DisplayState, "qf.Enrollment.DisplayState", [
  { no: 0, name: "UNSET" },
  { no: 1, name: "HIDDEN" },
  { no: 2, name: "VISIBLE" },
  { no: 3, name: "FAVORITE" },
]);

/**
 * @generated from message qf.UsedSlipDays
 */
export class UsedSlipDays extends Message<UsedSlipDays> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: uint64 enrollmentID = 2;
   */
  enrollmentID = protoInt64.zero;

  /**
   * @generated from field: uint64 assignmentID = 3;
   */
  assignmentID = protoInt64.zero;

  /**
   * @generated from field: uint32 usedDays = 4;
   */
  usedDays = 0;

  constructor(data?: PartialMessage<UsedSlipDays>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.UsedSlipDays";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "enrollmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "assignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "usedDays", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsedSlipDays {
    return new UsedSlipDays().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsedSlipDays {
    return new UsedSlipDays().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsedSlipDays {
    return new UsedSlipDays().fromJsonString(jsonString, options);
  }

  static equals(a: UsedSlipDays | PlainMessage<UsedSlipDays> | undefined, b: UsedSlipDays | PlainMessage<UsedSlipDays> | undefined): boolean {
    return proto3.util.equals(UsedSlipDays, a, b);
  }
}

/**
 * @generated from message qf.Enrollments
 */
export class Enrollments extends Message<Enrollments> {
  /**
   * @generated from field: repeated qf.Enrollment enrollments = 1;
   */
  enrollments: Enrollment[] = [];

  constructor(data?: PartialMessage<Enrollments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Enrollments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enrollments", kind: "message", T: Enrollment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enrollments {
    return new Enrollments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enrollments {
    return new Enrollments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enrollments {
    return new Enrollments().fromJsonString(jsonString, options);
  }

  static equals(a: Enrollments | PlainMessage<Enrollments> | undefined, b: Enrollments | PlainMessage<Enrollments> | undefined): boolean {
    return proto3.util.equals(Enrollments, a, b);
  }
}

/**
 * @generated from message qf.Assignment
 */
export class Assignment extends Message<Assignment> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 2;
   */
  CourseID = protoInt64.zero;

  /**
   * @generated from field: string Name = 3;
   */
  Name = "";

  /**
   * this assignment's run.sh script (the content)
   *
   * @generated from field: string RunScriptContent = 4;
   */
  RunScriptContent = "";

  /**
   * @generated from field: google.protobuf.Timestamp Deadline = 5;
   */
  Deadline?: Timestamp;

  /**
   * @generated from field: bool AutoApprove = 6;
   */
  AutoApprove = false;

  /**
   * @generated from field: uint32 Order = 7;
   */
  Order = 0;

  /**
   * @generated from field: bool IsGroupLab = 8;
   */
  IsGroupLab = false;

  /**
   * minimal score limit for auto approval
   *
   * @generated from field: uint32 ScoreLimit = 9;
   */
  ScoreLimit = 0;

  /**
   * number of reviewers that will review submissions for this assignment
   *
   * @generated from field: uint32 Reviewers = 10;
   */
  Reviewers = 0;

  /**
   * container timeout for this assignment
   *
   * @generated from field: uint32 ContainerTimeout = 11;
   */
  ContainerTimeout = 0;

  /**
   * submissions produced for this assignment
   *
   * @generated from field: repeated qf.Submission submissions = 12;
   */
  submissions: Submission[] = [];

  /**
   * tasks associated with this assignment
   *
   * @generated from field: repeated qf.Task tasks = 13;
   */
  tasks: Task[] = [];

  /**
   * grading benchmarks for this assignment
   *
   * @generated from field: repeated qf.GradingBenchmark gradingBenchmarks = 14;
   */
  gradingBenchmarks: GradingBenchmark[] = [];

  constructor(data?: PartialMessage<Assignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Assignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "CourseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "RunScriptContent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Deadline", kind: "message", T: Timestamp },
    { no: 6, name: "AutoApprove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "Order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "IsGroupLab", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "ScoreLimit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "Reviewers", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "ContainerTimeout", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "submissions", kind: "message", T: Submission, repeated: true },
    { no: 13, name: "tasks", kind: "message", T: Task, repeated: true },
    { no: 14, name: "gradingBenchmarks", kind: "message", T: GradingBenchmark, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assignment {
    return new Assignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assignment {
    return new Assignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assignment {
    return new Assignment().fromJsonString(jsonString, options);
  }

  static equals(a: Assignment | PlainMessage<Assignment> | undefined, b: Assignment | PlainMessage<Assignment> | undefined): boolean {
    return proto3.util.equals(Assignment, a, b);
  }
}

/**
 * @generated from message qf.Task
 */
export class Task extends Message<Task> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 assignmentID = 2;
   */
  assignmentID = protoInt64.zero;

  /**
   * @generated from field: uint32 assignmentOrder = 3;
   */
  assignmentOrder = 0;

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  /**
   * @generated from field: string body = 5;
   */
  body = "";

  /**
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * Issues that use this task as a benchmark
   *
   * @generated from field: repeated qf.Issue issues = 7;
   */
  issues: Issue[] = [];

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "assignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "assignmentOrder", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "issues", kind: "message", T: Issue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 * @generated from message qf.Issue
 */
export class Issue extends Message<Issue> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * Represents the internal ID of a repository
   *
   * @generated from field: uint64 repositoryID = 2;
   */
  repositoryID = protoInt64.zero;

  /**
   * Task that this issue draws its content from
   *
   * @generated from field: uint64 taskID = 3;
   */
  taskID = protoInt64.zero;

  /**
   * Issue number on scm. Needed for associating db issue with scm issue
   *
   * @generated from field: uint64 issueNumber = 4;
   */
  issueNumber = protoInt64.zero;

  constructor(data?: PartialMessage<Issue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Issue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "repositoryID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "taskID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "issueNumber", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Issue {
    return new Issue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Issue {
    return new Issue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Issue {
    return new Issue().fromJsonString(jsonString, options);
  }

  static equals(a: Issue | PlainMessage<Issue> | undefined, b: Issue | PlainMessage<Issue> | undefined): boolean {
    return proto3.util.equals(Issue, a, b);
  }
}

/**
 * @generated from message qf.PullRequest
 */
export class PullRequest extends Message<PullRequest> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * Represents the scm repository ID
   *
   * @generated from field: uint64 scmRepositoryID = 2;
   */
  scmRepositoryID = protoInt64.zero;

  /**
   * Foreign key
   *
   * @generated from field: uint64 taskID = 3;
   */
  taskID = protoInt64.zero;

  /**
   * Foreign key
   *
   * @generated from field: uint64 issueID = 4;
   */
  issueID = protoInt64.zero;

  /**
   * The user who owns this PR
   *
   * @generated from field: uint64 userID = 5;
   */
  userID = protoInt64.zero;

  /**
   * Scm ID of the comment used for automatic feedback
   *
   * @generated from field: uint64 scmCommentID = 6;
   */
  scmCommentID = protoInt64.zero;

  /**
   * The source branch for this pull request
   *
   * @generated from field: string sourceBranch = 7;
   */
  sourceBranch = "";

  /**
   * Pull request number
   *
   * @generated from field: uint64 number = 8;
   */
  number = protoInt64.zero;

  /**
   * @generated from field: qf.PullRequest.Stage stage = 9;
   */
  stage = PullRequest_Stage.NONE;

  constructor(data?: PartialMessage<PullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.PullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "scmRepositoryID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "taskID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "issueID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "scmCommentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "sourceBranch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "stage", kind: "enum", T: proto3.getEnumType(PullRequest_Stage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequest {
    return new PullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullRequest | PlainMessage<PullRequest> | undefined, b: PullRequest | PlainMessage<PullRequest> | undefined): boolean {
    return proto3.util.equals(PullRequest, a, b);
  }
}

/**
 * @generated from enum qf.PullRequest.Stage
 */
export enum PullRequest_Stage {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * @generated from enum value: REVIEW = 2;
   */
  REVIEW = 2,

  /**
   * @generated from enum value: APPROVED = 3;
   */
  APPROVED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PullRequest_Stage)
proto3.util.setEnumType(PullRequest_Stage, "qf.PullRequest.Stage", [
  { no: 0, name: "NONE" },
  { no: 1, name: "DRAFT" },
  { no: 2, name: "REVIEW" },
  { no: 3, name: "APPROVED" },
]);

/**
 * @generated from message qf.Assignments
 */
export class Assignments extends Message<Assignments> {
  /**
   * @generated from field: repeated qf.Assignment assignments = 1;
   */
  assignments: Assignment[] = [];

  constructor(data?: PartialMessage<Assignments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Assignments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assignments", kind: "message", T: Assignment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assignments {
    return new Assignments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assignments {
    return new Assignments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assignments {
    return new Assignments().fromJsonString(jsonString, options);
  }

  static equals(a: Assignments | PlainMessage<Assignments> | undefined, b: Assignments | PlainMessage<Assignments> | undefined): boolean {
    return proto3.util.equals(Assignments, a, b);
  }
}

/**
 * @generated from message qf.Submission
 */
export class Submission extends Message<Submission> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 AssignmentID = 2;
   */
  AssignmentID = protoInt64.zero;

  /**
   * @generated from field: uint64 UserID = 3;
   */
  UserID = protoInt64.zero;

  /**
   * @generated from field: uint64 GroupID = 4;
   */
  GroupID = protoInt64.zero;

  /**
   * @generated from field: uint32 Score = 5;
   */
  Score = 0;

  /**
   * @generated from field: string CommitHash = 6;
   */
  CommitHash = "";

  /**
   * true => feedback is visible to the student or group members
   *
   * @generated from field: bool Released = 7;
   */
  Released = false;

  /**
   * @generated from field: qf.Submission.Status status = 8;
   */
  status = Submission_Status.NONE;

  /**
   * @generated from field: google.protobuf.Timestamp ApprovedDate = 9;
   */
  ApprovedDate?: Timestamp;

  /**
   * reviews produced for this submission
   *
   * @generated from field: repeated qf.Review Reviews = 10;
   */
  Reviews: Review[] = [];

  /**
   * build info for tests
   *
   * @generated from field: score.BuildInfo BuildInfo = 11;
   */
  BuildInfo?: BuildInfo;

  /**
   * list of scores for different tests
   *
   * @generated from field: repeated score.Score Scores = 12;
   */
  Scores: Score[] = [];

  constructor(data?: PartialMessage<Submission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Submission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "AssignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "UserID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "GroupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "Score", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "CommitHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Released", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(Submission_Status) },
    { no: 9, name: "ApprovedDate", kind: "message", T: Timestamp },
    { no: 10, name: "Reviews", kind: "message", T: Review, repeated: true },
    { no: 11, name: "BuildInfo", kind: "message", T: BuildInfo },
    { no: 12, name: "Scores", kind: "message", T: Score, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Submission {
    return new Submission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Submission {
    return new Submission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Submission {
    return new Submission().fromJsonString(jsonString, options);
  }

  static equals(a: Submission | PlainMessage<Submission> | undefined, b: Submission | PlainMessage<Submission> | undefined): boolean {
    return proto3.util.equals(Submission, a, b);
  }
}

/**
 * @generated from enum qf.Submission.Status
 */
export enum Submission_Status {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: APPROVED = 1;
   */
  APPROVED = 1,

  /**
   * @generated from enum value: REJECTED = 2;
   */
  REJECTED = 2,

  /**
   * @generated from enum value: REVISION = 3;
   */
  REVISION = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Submission_Status)
proto3.util.setEnumType(Submission_Status, "qf.Submission.Status", [
  { no: 0, name: "NONE" },
  { no: 1, name: "APPROVED" },
  { no: 2, name: "REJECTED" },
  { no: 3, name: "REVISION" },
]);

/**
 * @generated from message qf.Submissions
 */
export class Submissions extends Message<Submissions> {
  /**
   * @generated from field: repeated qf.Submission submissions = 1;
   */
  submissions: Submission[] = [];

  constructor(data?: PartialMessage<Submissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Submissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submissions", kind: "message", T: Submission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Submissions {
    return new Submissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Submissions {
    return new Submissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Submissions {
    return new Submissions().fromJsonString(jsonString, options);
  }

  static equals(a: Submissions | PlainMessage<Submissions> | undefined, b: Submissions | PlainMessage<Submissions> | undefined): boolean {
    return proto3.util.equals(Submissions, a, b);
  }
}

/**
 * @generated from message qf.GradingBenchmark
 */
export class GradingBenchmark extends Message<GradingBenchmark> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 2;
   */
  CourseID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 AssignmentID = 3;
   */
  AssignmentID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 ReviewID = 4;
   */
  ReviewID = protoInt64.zero;

  /**
   * @generated from field: string heading = 5;
   */
  heading = "";

  /**
   * @generated from field: string comment = 6;
   */
  comment = "";

  /**
   * @generated from field: repeated qf.GradingCriterion criteria = 7;
   */
  criteria: GradingCriterion[] = [];

  constructor(data?: PartialMessage<GradingBenchmark>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.GradingBenchmark";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "CourseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "AssignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "ReviewID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "heading", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "criteria", kind: "message", T: GradingCriterion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradingBenchmark {
    return new GradingBenchmark().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradingBenchmark {
    return new GradingBenchmark().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradingBenchmark {
    return new GradingBenchmark().fromJsonString(jsonString, options);
  }

  static equals(a: GradingBenchmark | PlainMessage<GradingBenchmark> | undefined, b: GradingBenchmark | PlainMessage<GradingBenchmark> | undefined): boolean {
    return proto3.util.equals(GradingBenchmark, a, b);
  }
}

/**
 * @generated from message qf.Benchmarks
 */
export class Benchmarks extends Message<Benchmarks> {
  /**
   * @generated from field: repeated qf.GradingBenchmark benchmarks = 1;
   */
  benchmarks: GradingBenchmark[] = [];

  constructor(data?: PartialMessage<Benchmarks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Benchmarks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "benchmarks", kind: "message", T: GradingBenchmark, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Benchmarks {
    return new Benchmarks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Benchmarks {
    return new Benchmarks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Benchmarks {
    return new Benchmarks().fromJsonString(jsonString, options);
  }

  static equals(a: Benchmarks | PlainMessage<Benchmarks> | undefined, b: Benchmarks | PlainMessage<Benchmarks> | undefined): boolean {
    return proto3.util.equals(Benchmarks, a, b);
  }
}

/**
 * @generated from message qf.GradingCriterion
 */
export class GradingCriterion extends Message<GradingCriterion> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 BenchmarkID = 2;
   */
  BenchmarkID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 3;
   */
  CourseID = protoInt64.zero;

  /**
   * @generated from field: uint64 points = 4;
   */
  points = protoInt64.zero;

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: qf.GradingCriterion.Grade grade = 6;
   */
  grade = GradingCriterion_Grade.NONE;

  /**
   * @generated from field: string comment = 7;
   */
  comment = "";

  constructor(data?: PartialMessage<GradingCriterion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.GradingCriterion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "BenchmarkID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "CourseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "grade", kind: "enum", T: proto3.getEnumType(GradingCriterion_Grade) },
    { no: 7, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradingCriterion {
    return new GradingCriterion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradingCriterion {
    return new GradingCriterion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradingCriterion {
    return new GradingCriterion().fromJsonString(jsonString, options);
  }

  static equals(a: GradingCriterion | PlainMessage<GradingCriterion> | undefined, b: GradingCriterion | PlainMessage<GradingCriterion> | undefined): boolean {
    return proto3.util.equals(GradingCriterion, a, b);
  }
}

/**
 * @generated from enum qf.GradingCriterion.Grade
 */
export enum GradingCriterion_Grade {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: FAILED = 1;
   */
  FAILED = 1,

  /**
   * @generated from enum value: PASSED = 2;
   */
  PASSED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GradingCriterion_Grade)
proto3.util.setEnumType(GradingCriterion_Grade, "qf.GradingCriterion.Grade", [
  { no: 0, name: "NONE" },
  { no: 1, name: "FAILED" },
  { no: 2, name: "PASSED" },
]);

/**
 * @generated from message qf.Review
 */
export class Review extends Message<Review> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * foreign key
   *
   * @generated from field: uint64 SubmissionID = 2;
   */
  SubmissionID = protoInt64.zero;

  /**
   * UserID of the reviewer
   *
   * @generated from field: uint64 ReviewerID = 3;
   */
  ReviewerID = protoInt64.zero;

  /**
   * @generated from field: string feedback = 4;
   */
  feedback = "";

  /**
   * @generated from field: bool ready = 5;
   */
  ready = false;

  /**
   * @generated from field: uint32 score = 6;
   */
  score = 0;

  /**
   * @generated from field: repeated qf.GradingBenchmark gradingBenchmarks = 7;
   */
  gradingBenchmarks: GradingBenchmark[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp edited = 8;
   */
  edited?: Timestamp;

  constructor(data?: PartialMessage<Review>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.Review";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "SubmissionID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "ReviewerID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "feedback", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "score", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "gradingBenchmarks", kind: "message", T: GradingBenchmark, repeated: true },
    { no: 8, name: "edited", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Review {
    return new Review().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Review {
    return new Review().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Review {
    return new Review().fromJsonString(jsonString, options);
  }

  static equals(a: Review | PlainMessage<Review> | undefined, b: Review | PlainMessage<Review> | undefined): boolean {
    return proto3.util.equals(Review, a, b);
  }
}

/**
 * @generated from message qf.SubmissionLink
 */
export class SubmissionLink extends Message<SubmissionLink> {
  /**
   * @generated from field: qf.Assignment assignment = 1;
   */
  assignment?: Assignment;

  /**
   * @generated from field: qf.Submission submission = 2;
   */
  submission?: Submission;

  constructor(data?: PartialMessage<SubmissionLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.SubmissionLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assignment", kind: "message", T: Assignment },
    { no: 2, name: "submission", kind: "message", T: Submission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionLink {
    return new SubmissionLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionLink {
    return new SubmissionLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionLink {
    return new SubmissionLink().fromJsonString(jsonString, options);
  }

  static equals(a: SubmissionLink | PlainMessage<SubmissionLink> | undefined, b: SubmissionLink | PlainMessage<SubmissionLink> | undefined): boolean {
    return proto3.util.equals(SubmissionLink, a, b);
  }
}

/**
 * @generated from message qf.EnrollmentLink
 */
export class EnrollmentLink extends Message<EnrollmentLink> {
  /**
   * must have course and user/group preloaded
   *
   * @generated from field: qf.Enrollment enrollment = 2;
   */
  enrollment?: Enrollment;

  /**
   * @generated from field: repeated qf.SubmissionLink submissions = 3;
   */
  submissions: SubmissionLink[] = [];

  constructor(data?: PartialMessage<EnrollmentLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "qf.EnrollmentLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "enrollment", kind: "message", T: Enrollment },
    { no: 3, name: "submissions", kind: "message", T: SubmissionLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnrollmentLink {
    return new EnrollmentLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnrollmentLink {
    return new EnrollmentLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnrollmentLink {
    return new EnrollmentLink().fromJsonString(jsonString, options);
  }

  static equals(a: EnrollmentLink | PlainMessage<EnrollmentLink> | undefined, b: EnrollmentLink | PlainMessage<EnrollmentLink> | undefined): boolean {
    return proto3.util.equals(EnrollmentLink, a, b);
  }
}

