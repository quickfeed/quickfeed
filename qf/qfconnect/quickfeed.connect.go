// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qf/quickfeed.proto

package qfconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	qf "github.com/quickfeed/quickfeed/qf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QuickFeedServiceName is the fully-qualified name of the QuickFeedService service.
	QuickFeedServiceName = "qf.QuickFeedService"
)

// QuickFeedServiceClient is a client for the qf.QuickFeedService service.
type QuickFeedServiceClient interface {
	GetUser(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.User], error)
	GetUsers(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Users], error)
	GetUserByCourse(context.Context, *connect_go.Request[qf.CourseUserRequest]) (*connect_go.Response[qf.User], error)
	UpdateUser(context.Context, *connect_go.Request[qf.User]) (*connect_go.Response[qf.Void], error)
	GetGroup(context.Context, *connect_go.Request[qf.GetGroupRequest]) (*connect_go.Response[qf.Group], error)
	GetGroupByUserAndCourse(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Group], error)
	GetGroupsByCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Groups], error)
	CreateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error)
	UpdateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error)
	DeleteGroup(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Void], error)
	GetCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Course], error)
	GetCourses(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Courses], error)
	GetCoursesByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Courses], error)
	CreateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Course], error)
	UpdateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Void], error)
	UpdateCourseVisibility(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error)
	GetAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Assignments], error)
	UpdateAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Void], error)
	GetEnrollmentsByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Enrollments], error)
	GetEnrollmentsByCourse(context.Context, *connect_go.Request[qf.EnrollmentRequest]) (*connect_go.Response[qf.Enrollments], error)
	CreateEnrollment(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error)
	UpdateEnrollments(context.Context, *connect_go.Request[qf.Enrollments]) (*connect_go.Response[qf.Void], error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(context.Context, *connect_go.Request[qf.SubmissionRequest]) (*connect_go.Response[qf.Submissions], error)
	GetSubmission(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Submission], error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(context.Context, *connect_go.Request[qf.SubmissionsForCourseRequest]) (*connect_go.Response[qf.CourseSubmissions], error)
	UpdateSubmission(context.Context, *connect_go.Request[qf.UpdateSubmissionRequest]) (*connect_go.Response[qf.Void], error)
	UpdateSubmissions(context.Context, *connect_go.Request[qf.UpdateSubmissionsRequest]) (*connect_go.Response[qf.Void], error)
	RebuildSubmissions(context.Context, *connect_go.Request[qf.RebuildRequest]) (*connect_go.Response[qf.Void], error)
	CreateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.GradingBenchmark], error)
	UpdateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error)
	DeleteBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error)
	CreateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.GradingCriterion], error)
	UpdateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error)
	DeleteCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error)
	CreateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error)
	UpdateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error)
	GetReviewers(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Reviewers], error)
	GetOrganization(context.Context, *connect_go.Request[qf.OrgRequest]) (*connect_go.Response[qf.Organization], error)
	GetRepositories(context.Context, *connect_go.Request[qf.URLRequest]) (*connect_go.Response[qf.Repositories], error)
	IsEmptyRepo(context.Context, *connect_go.Request[qf.RepositoryRequest]) (*connect_go.Response[qf.Void], error)
}

// NewQuickFeedServiceClient constructs a client for the qf.QuickFeedService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuickFeedServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QuickFeedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &quickFeedServiceClient{
		getUser: connect_go.NewClient[qf.Void, qf.User](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetUser",
			opts...,
		),
		getUsers: connect_go.NewClient[qf.Void, qf.Users](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetUsers",
			opts...,
		),
		getUserByCourse: connect_go.NewClient[qf.CourseUserRequest, qf.User](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetUserByCourse",
			opts...,
		),
		updateUser: connect_go.NewClient[qf.User, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateUser",
			opts...,
		),
		getGroup: connect_go.NewClient[qf.GetGroupRequest, qf.Group](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetGroup",
			opts...,
		),
		getGroupByUserAndCourse: connect_go.NewClient[qf.GroupRequest, qf.Group](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetGroupByUserAndCourse",
			opts...,
		),
		getGroupsByCourse: connect_go.NewClient[qf.CourseRequest, qf.Groups](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetGroupsByCourse",
			opts...,
		),
		createGroup: connect_go.NewClient[qf.Group, qf.Group](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateGroup",
			opts...,
		),
		updateGroup: connect_go.NewClient[qf.Group, qf.Group](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateGroup",
			opts...,
		),
		deleteGroup: connect_go.NewClient[qf.GroupRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/DeleteGroup",
			opts...,
		),
		getCourse: connect_go.NewClient[qf.CourseRequest, qf.Course](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetCourse",
			opts...,
		),
		getCourses: connect_go.NewClient[qf.Void, qf.Courses](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetCourses",
			opts...,
		),
		getCoursesByUser: connect_go.NewClient[qf.EnrollmentStatusRequest, qf.Courses](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetCoursesByUser",
			opts...,
		),
		createCourse: connect_go.NewClient[qf.Course, qf.Course](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateCourse",
			opts...,
		),
		updateCourse: connect_go.NewClient[qf.Course, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateCourse",
			opts...,
		),
		updateCourseVisibility: connect_go.NewClient[qf.Enrollment, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateCourseVisibility",
			opts...,
		),
		getAssignments: connect_go.NewClient[qf.CourseRequest, qf.Assignments](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetAssignments",
			opts...,
		),
		updateAssignments: connect_go.NewClient[qf.CourseRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateAssignments",
			opts...,
		),
		getEnrollmentsByUser: connect_go.NewClient[qf.EnrollmentStatusRequest, qf.Enrollments](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetEnrollmentsByUser",
			opts...,
		),
		getEnrollmentsByCourse: connect_go.NewClient[qf.EnrollmentRequest, qf.Enrollments](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetEnrollmentsByCourse",
			opts...,
		),
		createEnrollment: connect_go.NewClient[qf.Enrollment, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateEnrollment",
			opts...,
		),
		updateEnrollments: connect_go.NewClient[qf.Enrollments, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateEnrollments",
			opts...,
		),
		getSubmissions: connect_go.NewClient[qf.SubmissionRequest, qf.Submissions](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetSubmissions",
			opts...,
		),
		getSubmission: connect_go.NewClient[qf.SubmissionReviewersRequest, qf.Submission](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetSubmission",
			opts...,
		),
		getSubmissionsByCourse: connect_go.NewClient[qf.SubmissionsForCourseRequest, qf.CourseSubmissions](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetSubmissionsByCourse",
			opts...,
		),
		updateSubmission: connect_go.NewClient[qf.UpdateSubmissionRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateSubmission",
			opts...,
		),
		updateSubmissions: connect_go.NewClient[qf.UpdateSubmissionsRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateSubmissions",
			opts...,
		),
		rebuildSubmissions: connect_go.NewClient[qf.RebuildRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/RebuildSubmissions",
			opts...,
		),
		createBenchmark: connect_go.NewClient[qf.GradingBenchmark, qf.GradingBenchmark](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateBenchmark",
			opts...,
		),
		updateBenchmark: connect_go.NewClient[qf.GradingBenchmark, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateBenchmark",
			opts...,
		),
		deleteBenchmark: connect_go.NewClient[qf.GradingBenchmark, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/DeleteBenchmark",
			opts...,
		),
		createCriterion: connect_go.NewClient[qf.GradingCriterion, qf.GradingCriterion](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateCriterion",
			opts...,
		),
		updateCriterion: connect_go.NewClient[qf.GradingCriterion, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateCriterion",
			opts...,
		),
		deleteCriterion: connect_go.NewClient[qf.GradingCriterion, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/DeleteCriterion",
			opts...,
		),
		createReview: connect_go.NewClient[qf.ReviewRequest, qf.Review](
			httpClient,
			baseURL+"/qf.QuickFeedService/CreateReview",
			opts...,
		),
		updateReview: connect_go.NewClient[qf.ReviewRequest, qf.Review](
			httpClient,
			baseURL+"/qf.QuickFeedService/UpdateReview",
			opts...,
		),
		getReviewers: connect_go.NewClient[qf.SubmissionReviewersRequest, qf.Reviewers](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetReviewers",
			opts...,
		),
		getOrganization: connect_go.NewClient[qf.OrgRequest, qf.Organization](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetOrganization",
			opts...,
		),
		getRepositories: connect_go.NewClient[qf.URLRequest, qf.Repositories](
			httpClient,
			baseURL+"/qf.QuickFeedService/GetRepositories",
			opts...,
		),
		isEmptyRepo: connect_go.NewClient[qf.RepositoryRequest, qf.Void](
			httpClient,
			baseURL+"/qf.QuickFeedService/IsEmptyRepo",
			opts...,
		),
	}
}

// quickFeedServiceClient implements QuickFeedServiceClient.
type quickFeedServiceClient struct {
	getUser                 *connect_go.Client[qf.Void, qf.User]
	getUsers                *connect_go.Client[qf.Void, qf.Users]
	getUserByCourse         *connect_go.Client[qf.CourseUserRequest, qf.User]
	updateUser              *connect_go.Client[qf.User, qf.Void]
	getGroup                *connect_go.Client[qf.GetGroupRequest, qf.Group]
	getGroupByUserAndCourse *connect_go.Client[qf.GroupRequest, qf.Group]
	getGroupsByCourse       *connect_go.Client[qf.CourseRequest, qf.Groups]
	createGroup             *connect_go.Client[qf.Group, qf.Group]
	updateGroup             *connect_go.Client[qf.Group, qf.Group]
	deleteGroup             *connect_go.Client[qf.GroupRequest, qf.Void]
	getCourse               *connect_go.Client[qf.CourseRequest, qf.Course]
	getCourses              *connect_go.Client[qf.Void, qf.Courses]
	getCoursesByUser        *connect_go.Client[qf.EnrollmentStatusRequest, qf.Courses]
	createCourse            *connect_go.Client[qf.Course, qf.Course]
	updateCourse            *connect_go.Client[qf.Course, qf.Void]
	updateCourseVisibility  *connect_go.Client[qf.Enrollment, qf.Void]
	getAssignments          *connect_go.Client[qf.CourseRequest, qf.Assignments]
	updateAssignments       *connect_go.Client[qf.CourseRequest, qf.Void]
	getEnrollmentsByUser    *connect_go.Client[qf.EnrollmentStatusRequest, qf.Enrollments]
	getEnrollmentsByCourse  *connect_go.Client[qf.EnrollmentRequest, qf.Enrollments]
	createEnrollment        *connect_go.Client[qf.Enrollment, qf.Void]
	updateEnrollments       *connect_go.Client[qf.Enrollments, qf.Void]
	getSubmissions          *connect_go.Client[qf.SubmissionRequest, qf.Submissions]
	getSubmission           *connect_go.Client[qf.SubmissionReviewersRequest, qf.Submission]
	getSubmissionsByCourse  *connect_go.Client[qf.SubmissionsForCourseRequest, qf.CourseSubmissions]
	updateSubmission        *connect_go.Client[qf.UpdateSubmissionRequest, qf.Void]
	updateSubmissions       *connect_go.Client[qf.UpdateSubmissionsRequest, qf.Void]
	rebuildSubmissions      *connect_go.Client[qf.RebuildRequest, qf.Void]
	createBenchmark         *connect_go.Client[qf.GradingBenchmark, qf.GradingBenchmark]
	updateBenchmark         *connect_go.Client[qf.GradingBenchmark, qf.Void]
	deleteBenchmark         *connect_go.Client[qf.GradingBenchmark, qf.Void]
	createCriterion         *connect_go.Client[qf.GradingCriterion, qf.GradingCriterion]
	updateCriterion         *connect_go.Client[qf.GradingCriterion, qf.Void]
	deleteCriterion         *connect_go.Client[qf.GradingCriterion, qf.Void]
	createReview            *connect_go.Client[qf.ReviewRequest, qf.Review]
	updateReview            *connect_go.Client[qf.ReviewRequest, qf.Review]
	getReviewers            *connect_go.Client[qf.SubmissionReviewersRequest, qf.Reviewers]
	getOrganization         *connect_go.Client[qf.OrgRequest, qf.Organization]
	getRepositories         *connect_go.Client[qf.URLRequest, qf.Repositories]
	isEmptyRepo             *connect_go.Client[qf.RepositoryRequest, qf.Void]
}

// GetUser calls qf.QuickFeedService.GetUser.
func (c *quickFeedServiceClient) GetUser(ctx context.Context, req *connect_go.Request[qf.Void]) (*connect_go.Response[qf.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUsers calls qf.QuickFeedService.GetUsers.
func (c *quickFeedServiceClient) GetUsers(ctx context.Context, req *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Users], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetUserByCourse calls qf.QuickFeedService.GetUserByCourse.
func (c *quickFeedServiceClient) GetUserByCourse(ctx context.Context, req *connect_go.Request[qf.CourseUserRequest]) (*connect_go.Response[qf.User], error) {
	return c.getUserByCourse.CallUnary(ctx, req)
}

// UpdateUser calls qf.QuickFeedService.UpdateUser.
func (c *quickFeedServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[qf.User]) (*connect_go.Response[qf.Void], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetGroup calls qf.QuickFeedService.GetGroup.
func (c *quickFeedServiceClient) GetGroup(ctx context.Context, req *connect_go.Request[qf.GetGroupRequest]) (*connect_go.Response[qf.Group], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupByUserAndCourse calls qf.QuickFeedService.GetGroupByUserAndCourse.
func (c *quickFeedServiceClient) GetGroupByUserAndCourse(ctx context.Context, req *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Group], error) {
	return c.getGroupByUserAndCourse.CallUnary(ctx, req)
}

// GetGroupsByCourse calls qf.QuickFeedService.GetGroupsByCourse.
func (c *quickFeedServiceClient) GetGroupsByCourse(ctx context.Context, req *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Groups], error) {
	return c.getGroupsByCourse.CallUnary(ctx, req)
}

// CreateGroup calls qf.QuickFeedService.CreateGroup.
func (c *quickFeedServiceClient) CreateGroup(ctx context.Context, req *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// UpdateGroup calls qf.QuickFeedService.UpdateGroup.
func (c *quickFeedServiceClient) UpdateGroup(ctx context.Context, req *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls qf.QuickFeedService.DeleteGroup.
func (c *quickFeedServiceClient) DeleteGroup(ctx context.Context, req *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Void], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// GetCourse calls qf.QuickFeedService.GetCourse.
func (c *quickFeedServiceClient) GetCourse(ctx context.Context, req *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Course], error) {
	return c.getCourse.CallUnary(ctx, req)
}

// GetCourses calls qf.QuickFeedService.GetCourses.
func (c *quickFeedServiceClient) GetCourses(ctx context.Context, req *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Courses], error) {
	return c.getCourses.CallUnary(ctx, req)
}

// GetCoursesByUser calls qf.QuickFeedService.GetCoursesByUser.
func (c *quickFeedServiceClient) GetCoursesByUser(ctx context.Context, req *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Courses], error) {
	return c.getCoursesByUser.CallUnary(ctx, req)
}

// CreateCourse calls qf.QuickFeedService.CreateCourse.
func (c *quickFeedServiceClient) CreateCourse(ctx context.Context, req *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Course], error) {
	return c.createCourse.CallUnary(ctx, req)
}

// UpdateCourse calls qf.QuickFeedService.UpdateCourse.
func (c *quickFeedServiceClient) UpdateCourse(ctx context.Context, req *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Void], error) {
	return c.updateCourse.CallUnary(ctx, req)
}

// UpdateCourseVisibility calls qf.QuickFeedService.UpdateCourseVisibility.
func (c *quickFeedServiceClient) UpdateCourseVisibility(ctx context.Context, req *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error) {
	return c.updateCourseVisibility.CallUnary(ctx, req)
}

// GetAssignments calls qf.QuickFeedService.GetAssignments.
func (c *quickFeedServiceClient) GetAssignments(ctx context.Context, req *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Assignments], error) {
	return c.getAssignments.CallUnary(ctx, req)
}

// UpdateAssignments calls qf.QuickFeedService.UpdateAssignments.
func (c *quickFeedServiceClient) UpdateAssignments(ctx context.Context, req *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Void], error) {
	return c.updateAssignments.CallUnary(ctx, req)
}

// GetEnrollmentsByUser calls qf.QuickFeedService.GetEnrollmentsByUser.
func (c *quickFeedServiceClient) GetEnrollmentsByUser(ctx context.Context, req *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Enrollments], error) {
	return c.getEnrollmentsByUser.CallUnary(ctx, req)
}

// GetEnrollmentsByCourse calls qf.QuickFeedService.GetEnrollmentsByCourse.
func (c *quickFeedServiceClient) GetEnrollmentsByCourse(ctx context.Context, req *connect_go.Request[qf.EnrollmentRequest]) (*connect_go.Response[qf.Enrollments], error) {
	return c.getEnrollmentsByCourse.CallUnary(ctx, req)
}

// CreateEnrollment calls qf.QuickFeedService.CreateEnrollment.
func (c *quickFeedServiceClient) CreateEnrollment(ctx context.Context, req *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error) {
	return c.createEnrollment.CallUnary(ctx, req)
}

// UpdateEnrollments calls qf.QuickFeedService.UpdateEnrollments.
func (c *quickFeedServiceClient) UpdateEnrollments(ctx context.Context, req *connect_go.Request[qf.Enrollments]) (*connect_go.Response[qf.Void], error) {
	return c.updateEnrollments.CallUnary(ctx, req)
}

// GetSubmissions calls qf.QuickFeedService.GetSubmissions.
func (c *quickFeedServiceClient) GetSubmissions(ctx context.Context, req *connect_go.Request[qf.SubmissionRequest]) (*connect_go.Response[qf.Submissions], error) {
	return c.getSubmissions.CallUnary(ctx, req)
}

// GetSubmission calls qf.QuickFeedService.GetSubmission.
func (c *quickFeedServiceClient) GetSubmission(ctx context.Context, req *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Submission], error) {
	return c.getSubmission.CallUnary(ctx, req)
}

// GetSubmissionsByCourse calls qf.QuickFeedService.GetSubmissionsByCourse.
func (c *quickFeedServiceClient) GetSubmissionsByCourse(ctx context.Context, req *connect_go.Request[qf.SubmissionsForCourseRequest]) (*connect_go.Response[qf.CourseSubmissions], error) {
	return c.getSubmissionsByCourse.CallUnary(ctx, req)
}

// UpdateSubmission calls qf.QuickFeedService.UpdateSubmission.
func (c *quickFeedServiceClient) UpdateSubmission(ctx context.Context, req *connect_go.Request[qf.UpdateSubmissionRequest]) (*connect_go.Response[qf.Void], error) {
	return c.updateSubmission.CallUnary(ctx, req)
}

// UpdateSubmissions calls qf.QuickFeedService.UpdateSubmissions.
func (c *quickFeedServiceClient) UpdateSubmissions(ctx context.Context, req *connect_go.Request[qf.UpdateSubmissionsRequest]) (*connect_go.Response[qf.Void], error) {
	return c.updateSubmissions.CallUnary(ctx, req)
}

// RebuildSubmissions calls qf.QuickFeedService.RebuildSubmissions.
func (c *quickFeedServiceClient) RebuildSubmissions(ctx context.Context, req *connect_go.Request[qf.RebuildRequest]) (*connect_go.Response[qf.Void], error) {
	return c.rebuildSubmissions.CallUnary(ctx, req)
}

// CreateBenchmark calls qf.QuickFeedService.CreateBenchmark.
func (c *quickFeedServiceClient) CreateBenchmark(ctx context.Context, req *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.GradingBenchmark], error) {
	return c.createBenchmark.CallUnary(ctx, req)
}

// UpdateBenchmark calls qf.QuickFeedService.UpdateBenchmark.
func (c *quickFeedServiceClient) UpdateBenchmark(ctx context.Context, req *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error) {
	return c.updateBenchmark.CallUnary(ctx, req)
}

// DeleteBenchmark calls qf.QuickFeedService.DeleteBenchmark.
func (c *quickFeedServiceClient) DeleteBenchmark(ctx context.Context, req *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error) {
	return c.deleteBenchmark.CallUnary(ctx, req)
}

// CreateCriterion calls qf.QuickFeedService.CreateCriterion.
func (c *quickFeedServiceClient) CreateCriterion(ctx context.Context, req *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.GradingCriterion], error) {
	return c.createCriterion.CallUnary(ctx, req)
}

// UpdateCriterion calls qf.QuickFeedService.UpdateCriterion.
func (c *quickFeedServiceClient) UpdateCriterion(ctx context.Context, req *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error) {
	return c.updateCriterion.CallUnary(ctx, req)
}

// DeleteCriterion calls qf.QuickFeedService.DeleteCriterion.
func (c *quickFeedServiceClient) DeleteCriterion(ctx context.Context, req *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error) {
	return c.deleteCriterion.CallUnary(ctx, req)
}

// CreateReview calls qf.QuickFeedService.CreateReview.
func (c *quickFeedServiceClient) CreateReview(ctx context.Context, req *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error) {
	return c.createReview.CallUnary(ctx, req)
}

// UpdateReview calls qf.QuickFeedService.UpdateReview.
func (c *quickFeedServiceClient) UpdateReview(ctx context.Context, req *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error) {
	return c.updateReview.CallUnary(ctx, req)
}

// GetReviewers calls qf.QuickFeedService.GetReviewers.
func (c *quickFeedServiceClient) GetReviewers(ctx context.Context, req *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Reviewers], error) {
	return c.getReviewers.CallUnary(ctx, req)
}

// GetOrganization calls qf.QuickFeedService.GetOrganization.
func (c *quickFeedServiceClient) GetOrganization(ctx context.Context, req *connect_go.Request[qf.OrgRequest]) (*connect_go.Response[qf.Organization], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// GetRepositories calls qf.QuickFeedService.GetRepositories.
func (c *quickFeedServiceClient) GetRepositories(ctx context.Context, req *connect_go.Request[qf.URLRequest]) (*connect_go.Response[qf.Repositories], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// IsEmptyRepo calls qf.QuickFeedService.IsEmptyRepo.
func (c *quickFeedServiceClient) IsEmptyRepo(ctx context.Context, req *connect_go.Request[qf.RepositoryRequest]) (*connect_go.Response[qf.Void], error) {
	return c.isEmptyRepo.CallUnary(ctx, req)
}

// QuickFeedServiceHandler is an implementation of the qf.QuickFeedService service.
type QuickFeedServiceHandler interface {
	GetUser(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.User], error)
	GetUsers(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Users], error)
	GetUserByCourse(context.Context, *connect_go.Request[qf.CourseUserRequest]) (*connect_go.Response[qf.User], error)
	UpdateUser(context.Context, *connect_go.Request[qf.User]) (*connect_go.Response[qf.Void], error)
	GetGroup(context.Context, *connect_go.Request[qf.GetGroupRequest]) (*connect_go.Response[qf.Group], error)
	GetGroupByUserAndCourse(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Group], error)
	GetGroupsByCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Groups], error)
	CreateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error)
	UpdateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error)
	DeleteGroup(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Void], error)
	GetCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Course], error)
	GetCourses(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Courses], error)
	GetCoursesByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Courses], error)
	CreateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Course], error)
	UpdateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Void], error)
	UpdateCourseVisibility(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error)
	GetAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Assignments], error)
	UpdateAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Void], error)
	GetEnrollmentsByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Enrollments], error)
	GetEnrollmentsByCourse(context.Context, *connect_go.Request[qf.EnrollmentRequest]) (*connect_go.Response[qf.Enrollments], error)
	CreateEnrollment(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error)
	UpdateEnrollments(context.Context, *connect_go.Request[qf.Enrollments]) (*connect_go.Response[qf.Void], error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(context.Context, *connect_go.Request[qf.SubmissionRequest]) (*connect_go.Response[qf.Submissions], error)
	GetSubmission(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Submission], error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(context.Context, *connect_go.Request[qf.SubmissionsForCourseRequest]) (*connect_go.Response[qf.CourseSubmissions], error)
	UpdateSubmission(context.Context, *connect_go.Request[qf.UpdateSubmissionRequest]) (*connect_go.Response[qf.Void], error)
	UpdateSubmissions(context.Context, *connect_go.Request[qf.UpdateSubmissionsRequest]) (*connect_go.Response[qf.Void], error)
	RebuildSubmissions(context.Context, *connect_go.Request[qf.RebuildRequest]) (*connect_go.Response[qf.Void], error)
	CreateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.GradingBenchmark], error)
	UpdateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error)
	DeleteBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error)
	CreateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.GradingCriterion], error)
	UpdateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error)
	DeleteCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error)
	CreateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error)
	UpdateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error)
	GetReviewers(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Reviewers], error)
	GetOrganization(context.Context, *connect_go.Request[qf.OrgRequest]) (*connect_go.Response[qf.Organization], error)
	GetRepositories(context.Context, *connect_go.Request[qf.URLRequest]) (*connect_go.Response[qf.Repositories], error)
	IsEmptyRepo(context.Context, *connect_go.Request[qf.RepositoryRequest]) (*connect_go.Response[qf.Void], error)
}

// NewQuickFeedServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuickFeedServiceHandler(svc QuickFeedServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/qf.QuickFeedService/GetUser", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetUser",
		svc.GetUser,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetUsers", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetUsers",
		svc.GetUsers,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetUserByCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetUserByCourse",
		svc.GetUserByCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateUser", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateUser",
		svc.UpdateUser,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetGroup", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetGroup",
		svc.GetGroup,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetGroupByUserAndCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetGroupByUserAndCourse",
		svc.GetGroupByUserAndCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetGroupsByCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetGroupsByCourse",
		svc.GetGroupsByCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateGroup", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateGroup",
		svc.CreateGroup,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateGroup", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateGroup",
		svc.UpdateGroup,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/DeleteGroup", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/DeleteGroup",
		svc.DeleteGroup,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetCourse",
		svc.GetCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetCourses", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetCourses",
		svc.GetCourses,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetCoursesByUser", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetCoursesByUser",
		svc.GetCoursesByUser,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateCourse",
		svc.CreateCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateCourse",
		svc.UpdateCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateCourseVisibility", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateCourseVisibility",
		svc.UpdateCourseVisibility,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetAssignments", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetAssignments",
		svc.GetAssignments,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateAssignments", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateAssignments",
		svc.UpdateAssignments,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetEnrollmentsByUser", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetEnrollmentsByUser",
		svc.GetEnrollmentsByUser,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetEnrollmentsByCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetEnrollmentsByCourse",
		svc.GetEnrollmentsByCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateEnrollment", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateEnrollment",
		svc.CreateEnrollment,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateEnrollments", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateEnrollments",
		svc.UpdateEnrollments,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetSubmissions", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetSubmissions",
		svc.GetSubmissions,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetSubmission", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetSubmission",
		svc.GetSubmission,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetSubmissionsByCourse", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetSubmissionsByCourse",
		svc.GetSubmissionsByCourse,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateSubmission", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateSubmission",
		svc.UpdateSubmission,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateSubmissions", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateSubmissions",
		svc.UpdateSubmissions,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/RebuildSubmissions", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/RebuildSubmissions",
		svc.RebuildSubmissions,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateBenchmark", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateBenchmark",
		svc.CreateBenchmark,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateBenchmark", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateBenchmark",
		svc.UpdateBenchmark,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/DeleteBenchmark", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/DeleteBenchmark",
		svc.DeleteBenchmark,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateCriterion", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateCriterion",
		svc.CreateCriterion,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateCriterion", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateCriterion",
		svc.UpdateCriterion,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/DeleteCriterion", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/DeleteCriterion",
		svc.DeleteCriterion,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/CreateReview", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/CreateReview",
		svc.CreateReview,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/UpdateReview", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/UpdateReview",
		svc.UpdateReview,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetReviewers", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetReviewers",
		svc.GetReviewers,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetOrganization", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetOrganization",
		svc.GetOrganization,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/GetRepositories", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/GetRepositories",
		svc.GetRepositories,
		opts...,
	))
	mux.Handle("/qf.QuickFeedService/IsEmptyRepo", connect_go.NewUnaryHandler(
		"/qf.QuickFeedService/IsEmptyRepo",
		svc.IsEmptyRepo,
		opts...,
	))
	return "/qf.QuickFeedService/", mux
}

// UnimplementedQuickFeedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuickFeedServiceHandler struct{}

func (UnimplementedQuickFeedServiceHandler) GetUser(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetUser is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetUsers(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Users], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetUsers is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetUserByCourse(context.Context, *connect_go.Request[qf.CourseUserRequest]) (*connect_go.Response[qf.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetUserByCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateUser(context.Context, *connect_go.Request[qf.User]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateUser is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetGroup(context.Context, *connect_go.Request[qf.GetGroupRequest]) (*connect_go.Response[qf.Group], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetGroup is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetGroupByUserAndCourse(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Group], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetGroupByUserAndCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetGroupsByCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Groups], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetGroupsByCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateGroup is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateGroup(context.Context, *connect_go.Request[qf.Group]) (*connect_go.Response[qf.Group], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateGroup is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) DeleteGroup(context.Context, *connect_go.Request[qf.GroupRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.DeleteGroup is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetCourse(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Course], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetCourses(context.Context, *connect_go.Request[qf.Void]) (*connect_go.Response[qf.Courses], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetCourses is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetCoursesByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Courses], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetCoursesByUser is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Course], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateCourse(context.Context, *connect_go.Request[qf.Course]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateCourseVisibility(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateCourseVisibility is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Assignments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetAssignments is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateAssignments(context.Context, *connect_go.Request[qf.CourseRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateAssignments is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetEnrollmentsByUser(context.Context, *connect_go.Request[qf.EnrollmentStatusRequest]) (*connect_go.Response[qf.Enrollments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetEnrollmentsByUser is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetEnrollmentsByCourse(context.Context, *connect_go.Request[qf.EnrollmentRequest]) (*connect_go.Response[qf.Enrollments], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetEnrollmentsByCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateEnrollment(context.Context, *connect_go.Request[qf.Enrollment]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateEnrollment is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateEnrollments(context.Context, *connect_go.Request[qf.Enrollments]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateEnrollments is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetSubmissions(context.Context, *connect_go.Request[qf.SubmissionRequest]) (*connect_go.Response[qf.Submissions], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetSubmissions is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetSubmission(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Submission], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetSubmission is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetSubmissionsByCourse(context.Context, *connect_go.Request[qf.SubmissionsForCourseRequest]) (*connect_go.Response[qf.CourseSubmissions], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetSubmissionsByCourse is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateSubmission(context.Context, *connect_go.Request[qf.UpdateSubmissionRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateSubmission is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateSubmissions(context.Context, *connect_go.Request[qf.UpdateSubmissionsRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateSubmissions is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) RebuildSubmissions(context.Context, *connect_go.Request[qf.RebuildRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.RebuildSubmissions is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.GradingBenchmark], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateBenchmark is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateBenchmark is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) DeleteBenchmark(context.Context, *connect_go.Request[qf.GradingBenchmark]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.DeleteBenchmark is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.GradingCriterion], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateCriterion is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateCriterion is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) DeleteCriterion(context.Context, *connect_go.Request[qf.GradingCriterion]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.DeleteCriterion is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) CreateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.CreateReview is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) UpdateReview(context.Context, *connect_go.Request[qf.ReviewRequest]) (*connect_go.Response[qf.Review], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.UpdateReview is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetReviewers(context.Context, *connect_go.Request[qf.SubmissionReviewersRequest]) (*connect_go.Response[qf.Reviewers], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetReviewers is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetOrganization(context.Context, *connect_go.Request[qf.OrgRequest]) (*connect_go.Response[qf.Organization], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetOrganization is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) GetRepositories(context.Context, *connect_go.Request[qf.URLRequest]) (*connect_go.Response[qf.Repositories], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.GetRepositories is not implemented"))
}

func (UnimplementedQuickFeedServiceHandler) IsEmptyRepo(context.Context, *connect_go.Request[qf.RepositoryRequest]) (*connect_go.Response[qf.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("qf.QuickFeedService.IsEmptyRepo is not implemented"))
}
