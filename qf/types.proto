syntax = "proto3";
package qf;
option go_package   = "github.com/quickfeed/quickfeed/qf";
option swift_prefix = "";

import "google/protobuf/timestamp.proto";
import "kit/score/score.proto";
import "patch/go.proto";

// Collection of all message types that are saved in the database.

// Note on use of protopatch's go.field to translate to a database schema via GORM
//
// To define fields that should be ignored by the database, use this tag:
//   [(go.field) = {tags: 'gorm:"-"'}];
//
// To define multiple database attributes (fields) that combine to form a unique identifier,
// use the following tag, replacing the <id_name> with the specific unique database identifier;
// this will set the SQL UNIQUE constraint for the database:
//   [(go.field) = {tags: 'gorm:"uniqueIndex:<id_name>"'}];

// USERS AND USERGROUPS //

message User {
    uint64 ID        = 1;
    bool isAdmin     = 2;
    string name      = 3;
    string studentID = 4;
    string email     = 5;
    string avatarURL = 6;
    string login     = 7;

    repeated RemoteIdentity remoteIdentities = 8;
    repeated Enrollment enrollments          = 9;
}

message Users {
    repeated User users = 1;
}

message RemoteIdentity {
    uint64 ID          = 1;
    string provider    = 2 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_provider_remote_id"' }];
    uint64 remoteID    = 3 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_provider_remote_id"' }];
    string accessToken = 4;
    uint64 userID      = 5;
}

message Group {
    enum GroupStatus {
        PENDING  = 0;
        APPROVED = 1;
    }
    uint64 ID          = 1;
    string name        = 2 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_group_name"' }];
    uint64 courseID    = 3 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_group_name"' }];
    uint64 teamID      = 4;
    GroupStatus status = 5;

    repeated User users             = 6 [(go.field) = { tags: 'gorm:"many2many:group_users;"' }];
    repeated Enrollment enrollments = 7;
}

message Groups {
    repeated Group groups = 1;
}

//   COURSES   //

message Course {
    uint64 ID                      = 1;
    uint64 courseCreatorID         = 2;
    string name                    = 3;
    string code                    = 4 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_course"' }];
    uint32 year                    = 5 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_course"' }];
    string tag                     = 6;
    string provider                = 7;
    uint64 organizationID          = 8;
    string organizationPath        = 9;  // The organization's SCM name, e.g. uis-dat520-2020.
    uint32 slipDays                = 10;
    string dockerfile              = 11;
    Enrollment.UserStatus enrolled = 12 [(go.field) = { tags: 'gorm:"-"' }];

    repeated Enrollment enrollments = 13;
    repeated Assignment assignments = 14;
    repeated Group groups           = 15;
}

message Courses {
    repeated Course courses = 1;
}

message Repository {
    enum Type {
        NONE        = 0;
        INFO        = 1;
        ASSIGNMENTS = 2;
        TESTS       = 3;
        USER        = 4;
        GROUP       = 5;
    }
    uint64 ID             = 1;
    uint64 organizationID = 2 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_gid_org_type"' }];
    uint64 repositoryID   = 3;  // ID of a github repository
    uint64 userID         = 4 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_gid_org_type"' }];
    uint64 groupID        = 5 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_gid_org_type"' }];
    string HTMLURL        = 6;
    Type repoType         = 7 [(go.field) = { tags: 'gorm:"uniqueIndex:uid_gid_org_type"' }];
    repeated Issue issues = 8;  // Issues associated with this repository
}

message Enrollment {
    enum UserStatus {
        NONE    = 0;
        PENDING = 1;
        STUDENT = 2;
        TEACHER = 3;
    }
    enum DisplayState {
        UNSET    = 0;
        HIDDEN   = 1;
        VISIBLE  = 2;
        FAVORITE = 3;
    }
    uint64 ID                                  = 1;
    uint64 courseID                            = 2 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_enrollment"' }];
    uint64 userID                              = 3 [(go.field) = { tags: 'gorm:"uniqueIndex:idx_unique_enrollment"' }];
    uint64 groupID                             = 4;
    bool hasTeacherScopes                      = 5;
    User user                                  = 6;
    Course course                              = 7;
    Group group                                = 8;
    UserStatus status                          = 9;
    DisplayState state                         = 10;
    uint32 slipDaysRemaining                   = 11 [(go.field) = { tags: 'gorm:"-"' }];
    google.protobuf.Timestamp lastActivityDate = 12 [(go.field) = { tags: 'gorm:"serializer:timestamp"' }];
    uint64 totalApproved                       = 13;
    repeated UsedSlipDays usedSlipDays         = 14;
}

message UsedSlipDays {
    uint64 ID           = 1;
    uint64 enrollmentID = 2;
    uint64 assignmentID = 3;
    uint32 usedDays     = 4;
}

message Enrollments {
    repeated Enrollment enrollments = 1;
}

//   LABS    //

message Assignment {
    uint64 ID                          = 1;
    uint64 CourseID                    = 2;  // foreign key
    string Name                        = 3;
    string RunScriptContent            = 4;  // this assignment's run.sh script (the content)
    google.protobuf.Timestamp Deadline = 5 [(go.field) = { tags: 'gorm:"serializer:timestamp"' }];
    bool AutoApprove                   = 6;
    uint32 Order                       = 7;
    bool IsGroupLab                    = 8;
    uint32 ScoreLimit                  = 9;   // minimal score limit for auto approval
    uint32 Reviewers                   = 10;  // number of reviewers that will review submissions for this assignment
    uint32 ContainerTimeout            = 11;  // container timeout for this assignment
    repeated Submission submissions    = 12;  // submissions produced for this assignment
    repeated Task tasks                = 13;  // tasks associated with this assignment
    repeated GradingBenchmark gradingBenchmarks = 14;  // grading benchmarks for this assignment
}

message Task {
    uint64 ID              = 1;
    uint64 assignmentID    = 2;  // foreign key
    uint32 assignmentOrder = 3;
    string title           = 4;
    string body            = 5;
    string name            = 6;
    repeated Issue issues  = 7;  // Issues that use this task as a benchmark
}

message Issue {
    uint64 ID           = 1;
    uint64 repositoryID = 2;  // Represents the internal ID of a repository
    uint64 taskID       = 3;  // Task that this issue draws its content from
    uint64 issueNumber  = 4;  // Issue number on scm. Needed for associating db issue with scm issue
}

message PullRequest {
    enum Stage {
        NONE     = 0;
        DRAFT    = 1;
        REVIEW   = 2;
        APPROVED = 3;
    }
    uint64 ID              = 1;
    uint64 scmRepositoryID = 2;  // Represents the scm repository ID
    uint64 taskID          = 3;  // Foreign key
    uint64 issueID         = 4;  // Foreign key
    uint64 userID          = 5;  // The user who owns this PR
    uint64 scmCommentID    = 6;  // Scm ID of the comment used for automatic feedback
    string sourceBranch    = 7;  // The source branch for this pull request
    uint64 number          = 8;  // Pull request number
    Stage stage            = 9;
}

message Assignments {
    repeated Assignment assignments = 1;
}

message Submission {
    enum Status {
        NONE     = 0;
        APPROVED = 1;
        REJECTED = 2;
        REVISION = 3;
    }
    uint64 ID                              = 1;
    uint64 AssignmentID                    = 2;  // foreign key
    uint64 UserID                          = 3;
    uint64 GroupID                         = 4;
    uint32 Score                           = 5;
    string CommitHash                      = 6;
    bool Released                          = 7;  // true => feedback is visible to the student or group members
    Status status                          = 8;
    google.protobuf.Timestamp ApprovedDate = 9 [(go.field) = { tags: 'gorm:"serializer:timestamp"' }];
    repeated Review Reviews                = 10;  // reviews produced for this submission
    score.BuildInfo BuildInfo              = 11;  // build info for tests
    repeated score.Score Scores            = 12;  // list of scores for different tests
}

message Submissions {
    repeated Submission submissions = 1;
}

//   MANUAL GRADING   //

message GradingBenchmark {
    uint64 ID                          = 1;
    uint64 AssignmentID                = 2;  // foreign key
    uint64 ReviewID                    = 3;  // foreign key
    string heading                     = 4;
    string comment                     = 5;
    repeated GradingCriterion criteria = 6 [(go.field) = { tags: 'gorm:"foreignKey:BenchmarkID"' }];
}

message Benchmarks {
    repeated GradingBenchmark benchmarks = 1;
}

message GradingCriterion {
    enum Grade {
        NONE   = 0;
        FAILED = 1;
        PASSED = 2;
    }
    uint64 ID          = 1;
    uint64 BenchmarkID = 2;  // foreign key
    uint64 points      = 3;
    string description = 4;
    Grade grade        = 5;
    string comment     = 6;
}

message Review {
    uint64 ID                                   = 1;
    uint64 SubmissionID                         = 2;  // foreign key
    uint64 ReviewerID                           = 3;  // UserID of the reviewer
    string feedback                             = 4;
    bool ready                                  = 5;
    uint32 score                                = 6;
    repeated GradingBenchmark gradingBenchmarks = 7 [(go.field) = { tags: 'gorm:"foreignKey:ReviewID"' }];
    google.protobuf.Timestamp edited            = 8 [(go.field) = { tags: 'gorm:"serializer:timestamp"' }];
}

message SubmissionLink {
    Assignment assignment = 1;
    Submission submission = 2;
}

message EnrollmentLink {
    Enrollment enrollment               = 2;  // must have course and user/group preloaded
    repeated SubmissionLink submissions = 3;
}
