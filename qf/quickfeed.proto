syntax = "proto3";
package qf;
option go_package   = "github.com/quickfeed/quickfeed/qf";
option swift_prefix = "";

import "qf/types.proto";
import "qf/requests.proto";

service QuickFeedService {
    // users //

    rpc GetUser(Void) returns (User) {}
    rpc GetUsers(Void) returns (Users) {}
    rpc GetUserByCourse(CourseUserRequest) returns (User) {}
    rpc UpdateUser(User) returns (Void) {}

    // groups //

    rpc GetGroup(GetGroupRequest) returns (Group) {}
    rpc GetGroupByUserAndCourse(GroupRequest) returns (Group) {}
    rpc GetGroupsByCourse(CourseRequest) returns (Groups) {}
    rpc CreateGroup(Group) returns (Group) {}
    rpc UpdateGroup(Group) returns (Group) {}
    rpc DeleteGroup(GroupRequest) returns (Void) {}

    // courses //

    rpc GetCourse(CourseRequest) returns (Course) {}
    rpc GetCourses(Void) returns (Courses) {}
    rpc GetCoursesByUser(EnrollmentStatusRequest) returns (Courses) {}
    rpc CreateCourse(Course) returns (Course) {}
    rpc UpdateCourse(Course) returns (Void) {}
    rpc UpdateCourseVisibility(Enrollment) returns (Void) {}

    // assignments //

    rpc GetAssignments(CourseRequest) returns (Assignments) {}
    rpc UpdateAssignments(CourseRequest) returns (Void) {}

    // enrollments //

    rpc GetEnrollmentsByUser(EnrollmentStatusRequest) returns (Enrollments) {}
    rpc GetEnrollmentsByCourse(EnrollmentRequest) returns (Enrollments) {}
    rpc CreateEnrollment(Enrollment) returns (Void) {}
    rpc UpdateEnrollments(Enrollments) returns (Void) {}

    // submissions //

    // Get latest submissions for all course assignments for a user or a group.
    rpc GetSubmissions(SubmissionRequest) returns (Submissions) {}
    rpc GetSubmission(SubmissionReviewersRequest) returns (Submission) {}
    // Get lab submissions for every course user or every course group
    rpc GetSubmissionsByCourse(SubmissionsForCourseRequest) returns (CourseSubmissions) {}
    rpc UpdateSubmission(UpdateSubmissionRequest) returns (Void) {}
    rpc UpdateSubmissions(UpdateSubmissionsRequest) returns (Void) {}
    rpc RebuildSubmissions(RebuildRequest) returns (Void) {}

    // manual grading //

    rpc CreateBenchmark(GradingBenchmark) returns (GradingBenchmark) {}
    rpc UpdateBenchmark(GradingBenchmark) returns (Void) {}
    rpc DeleteBenchmark(GradingBenchmark) returns (Void) {}

    rpc CreateCriterion(GradingCriterion) returns (GradingCriterion) {}
    rpc UpdateCriterion(GradingCriterion) returns (Void) {}
    rpc DeleteCriterion(GradingCriterion) returns (Void) {}

    rpc CreateReview(ReviewRequest) returns (Review) {}
    rpc UpdateReview(ReviewRequest) returns (Review) {}
    rpc GetReviewers(SubmissionReviewersRequest) returns (Reviewers) {}

    // misc //

    rpc GetOrganization(OrgRequest) returns (Organization) {}
    rpc GetRepositories(URLRequest) returns (Repositories) {}
    rpc IsEmptyRepo(RepositoryRequest) returns (Void) {}
}
