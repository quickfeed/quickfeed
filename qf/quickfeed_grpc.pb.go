// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: qf/quickfeed.proto

package qf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuickFeedServiceClient is the client API for QuickFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuickFeedServiceClient interface {
	GetUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error)
	GetUserByCourse(ctx context.Context, in *CourseUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroupByUserAndCourse(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroupsByCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Groups, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Void, error)
	GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Course, error)
	GetCourses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Courses, error)
	GetCoursesByUser(ctx context.Context, in *EnrollmentStatusRequest, opts ...grpc.CallOption) (*Courses, error)
	CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error)
	UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Void, error)
	UpdateCourseVisibility(ctx context.Context, in *Enrollment, opts ...grpc.CallOption) (*Void, error)
	GetAssignments(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Assignments, error)
	UpdateAssignments(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Void, error)
	GetEnrollmentsByUser(ctx context.Context, in *EnrollmentStatusRequest, opts ...grpc.CallOption) (*Enrollments, error)
	GetEnrollmentsByCourse(ctx context.Context, in *EnrollmentRequest, opts ...grpc.CallOption) (*Enrollments, error)
	CreateEnrollment(ctx context.Context, in *Enrollment, opts ...grpc.CallOption) (*Void, error)
	UpdateEnrollments(ctx context.Context, in *Enrollments, opts ...grpc.CallOption) (*Void, error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*Submissions, error)
	GetSubmission(ctx context.Context, in *SubmissionReviewersRequest, opts ...grpc.CallOption) (*Submission, error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(ctx context.Context, in *SubmissionsForCourseRequest, opts ...grpc.CallOption) (*CourseSubmissions, error)
	UpdateSubmission(ctx context.Context, in *UpdateSubmissionRequest, opts ...grpc.CallOption) (*Void, error)
	UpdateSubmissions(ctx context.Context, in *UpdateSubmissionsRequest, opts ...grpc.CallOption) (*Void, error)
	RebuildSubmissions(ctx context.Context, in *RebuildRequest, opts ...grpc.CallOption) (*Void, error)
	CreateBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*GradingBenchmark, error)
	UpdateBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*Void, error)
	DeleteBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*Void, error)
	CreateCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*GradingCriterion, error)
	UpdateCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*Void, error)
	DeleteCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*Void, error)
	CreateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Review, error)
	UpdateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Review, error)
	GetReviewers(ctx context.Context, in *SubmissionReviewersRequest, opts ...grpc.CallOption) (*Reviewers, error)
	GetOrganization(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*Organization, error)
	GetRepositories(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*Repositories, error)
	IsEmptyRepo(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*Void, error)
}

type quickFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuickFeedServiceClient(cc grpc.ClientConnInterface) QuickFeedServiceClient {
	return &quickFeedServiceClient{cc}
}

func (c *quickFeedServiceClient) GetUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetUserByCourse(ctx context.Context, in *CourseUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetUserByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetGroupByUserAndCourse(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetGroupByUserAndCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetGroupsByCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetGroupsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetCourses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetCoursesByUser(ctx context.Context, in *EnrollmentStatusRequest, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetCoursesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateCourseVisibility(ctx context.Context, in *Enrollment, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateCourseVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetAssignments(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Assignments, error) {
	out := new(Assignments)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateAssignments(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetEnrollmentsByUser(ctx context.Context, in *EnrollmentStatusRequest, opts ...grpc.CallOption) (*Enrollments, error) {
	out := new(Enrollments)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetEnrollmentsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetEnrollmentsByCourse(ctx context.Context, in *EnrollmentRequest, opts ...grpc.CallOption) (*Enrollments, error) {
	out := new(Enrollments)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetEnrollmentsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateEnrollment(ctx context.Context, in *Enrollment, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateEnrollments(ctx context.Context, in *Enrollments, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetSubmissions(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*Submissions, error) {
	out := new(Submissions)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetSubmission(ctx context.Context, in *SubmissionReviewersRequest, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetSubmissionsByCourse(ctx context.Context, in *SubmissionsForCourseRequest, opts ...grpc.CallOption) (*CourseSubmissions, error) {
	out := new(CourseSubmissions)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetSubmissionsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateSubmission(ctx context.Context, in *UpdateSubmissionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateSubmissions(ctx context.Context, in *UpdateSubmissionsRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) RebuildSubmissions(ctx context.Context, in *RebuildRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/RebuildSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*GradingBenchmark, error) {
	out := new(GradingBenchmark)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) DeleteBenchmark(ctx context.Context, in *GradingBenchmark, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/DeleteBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*GradingCriterion, error) {
	out := new(GradingCriterion)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) DeleteCriterion(ctx context.Context, in *GradingCriterion, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/DeleteCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) CreateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) UpdateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetReviewers(ctx context.Context, in *SubmissionReviewersRequest, opts ...grpc.CallOption) (*Reviewers, error) {
	out := new(Reviewers)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetReviewers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetOrganization(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) GetRepositories(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*Repositories, error) {
	out := new(Repositories)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/GetRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickFeedServiceClient) IsEmptyRepo(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/qf.QuickFeedService/IsEmptyRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuickFeedServiceServer is the server API for QuickFeedService service.
// All implementations must embed UnimplementedQuickFeedServiceServer
// for forward compatibility
type QuickFeedServiceServer interface {
	GetUser(context.Context, *Void) (*User, error)
	GetUsers(context.Context, *Void) (*Users, error)
	GetUserByCourse(context.Context, *CourseUserRequest) (*User, error)
	UpdateUser(context.Context, *User) (*Void, error)
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	GetGroupByUserAndCourse(context.Context, *GroupRequest) (*Group, error)
	GetGroupsByCourse(context.Context, *CourseRequest) (*Groups, error)
	CreateGroup(context.Context, *Group) (*Group, error)
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *GroupRequest) (*Void, error)
	GetCourse(context.Context, *CourseRequest) (*Course, error)
	GetCourses(context.Context, *Void) (*Courses, error)
	GetCoursesByUser(context.Context, *EnrollmentStatusRequest) (*Courses, error)
	CreateCourse(context.Context, *Course) (*Course, error)
	UpdateCourse(context.Context, *Course) (*Void, error)
	UpdateCourseVisibility(context.Context, *Enrollment) (*Void, error)
	GetAssignments(context.Context, *CourseRequest) (*Assignments, error)
	UpdateAssignments(context.Context, *CourseRequest) (*Void, error)
	GetEnrollmentsByUser(context.Context, *EnrollmentStatusRequest) (*Enrollments, error)
	GetEnrollmentsByCourse(context.Context, *EnrollmentRequest) (*Enrollments, error)
	CreateEnrollment(context.Context, *Enrollment) (*Void, error)
	UpdateEnrollments(context.Context, *Enrollments) (*Void, error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(context.Context, *SubmissionRequest) (*Submissions, error)
	GetSubmission(context.Context, *SubmissionReviewersRequest) (*Submission, error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(context.Context, *SubmissionsForCourseRequest) (*CourseSubmissions, error)
	UpdateSubmission(context.Context, *UpdateSubmissionRequest) (*Void, error)
	UpdateSubmissions(context.Context, *UpdateSubmissionsRequest) (*Void, error)
	RebuildSubmissions(context.Context, *RebuildRequest) (*Void, error)
	CreateBenchmark(context.Context, *GradingBenchmark) (*GradingBenchmark, error)
	UpdateBenchmark(context.Context, *GradingBenchmark) (*Void, error)
	DeleteBenchmark(context.Context, *GradingBenchmark) (*Void, error)
	CreateCriterion(context.Context, *GradingCriterion) (*GradingCriterion, error)
	UpdateCriterion(context.Context, *GradingCriterion) (*Void, error)
	DeleteCriterion(context.Context, *GradingCriterion) (*Void, error)
	CreateReview(context.Context, *ReviewRequest) (*Review, error)
	UpdateReview(context.Context, *ReviewRequest) (*Review, error)
	GetReviewers(context.Context, *SubmissionReviewersRequest) (*Reviewers, error)
	GetOrganization(context.Context, *OrgRequest) (*Organization, error)
	GetRepositories(context.Context, *URLRequest) (*Repositories, error)
	IsEmptyRepo(context.Context, *RepositoryRequest) (*Void, error)
	mustEmbedUnimplementedQuickFeedServiceServer()
}

// UnimplementedQuickFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuickFeedServiceServer struct {
}

func (UnimplementedQuickFeedServiceServer) GetUser(context.Context, *Void) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetUsers(context.Context, *Void) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetUserByCourse(context.Context, *CourseUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateUser(context.Context, *User) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetGroupByUserAndCourse(context.Context, *GroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByUserAndCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetGroupsByCourse(context.Context, *CourseRequest) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedQuickFeedServiceServer) DeleteGroup(context.Context, *GroupRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetCourse(context.Context, *CourseRequest) (*Course, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetCourses(context.Context, *Void) (*Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourses not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetCoursesByUser(context.Context, *EnrollmentStatusRequest) (*Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByUser not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateCourse(context.Context, *Course) (*Course, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateCourse(context.Context, *Course) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateCourseVisibility(context.Context, *Enrollment) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseVisibility not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetAssignments(context.Context, *CourseRequest) (*Assignments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignments not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateAssignments(context.Context, *CourseRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignments not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetEnrollmentsByUser(context.Context, *EnrollmentStatusRequest) (*Enrollments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByUser not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetEnrollmentsByCourse(context.Context, *EnrollmentRequest) (*Enrollments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateEnrollment(context.Context, *Enrollment) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateEnrollments(context.Context, *Enrollments) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollments not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetSubmissions(context.Context, *SubmissionRequest) (*Submissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissions not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetSubmission(context.Context, *SubmissionReviewersRequest) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmission not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetSubmissionsByCourse(context.Context, *SubmissionsForCourseRequest) (*CourseSubmissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionsByCourse not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateSubmission(context.Context, *UpdateSubmissionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmission not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateSubmissions(context.Context, *UpdateSubmissionsRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmissions not implemented")
}
func (UnimplementedQuickFeedServiceServer) RebuildSubmissions(context.Context, *RebuildRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildSubmissions not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateBenchmark(context.Context, *GradingBenchmark) (*GradingBenchmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBenchmark not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateBenchmark(context.Context, *GradingBenchmark) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBenchmark not implemented")
}
func (UnimplementedQuickFeedServiceServer) DeleteBenchmark(context.Context, *GradingBenchmark) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBenchmark not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateCriterion(context.Context, *GradingCriterion) (*GradingCriterion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCriterion not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateCriterion(context.Context, *GradingCriterion) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCriterion not implemented")
}
func (UnimplementedQuickFeedServiceServer) DeleteCriterion(context.Context, *GradingCriterion) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCriterion not implemented")
}
func (UnimplementedQuickFeedServiceServer) CreateReview(context.Context, *ReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedQuickFeedServiceServer) UpdateReview(context.Context, *ReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetReviewers(context.Context, *SubmissionReviewersRequest) (*Reviewers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewers not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetOrganization(context.Context, *OrgRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedQuickFeedServiceServer) GetRepositories(context.Context, *URLRequest) (*Repositories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedQuickFeedServiceServer) IsEmptyRepo(context.Context, *RepositoryRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmptyRepo not implemented")
}
func (UnimplementedQuickFeedServiceServer) mustEmbedUnimplementedQuickFeedServiceServer() {}

// UnsafeQuickFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuickFeedServiceServer will
// result in compilation errors.
type UnsafeQuickFeedServiceServer interface {
	mustEmbedUnimplementedQuickFeedServiceServer()
}

func RegisterQuickFeedServiceServer(s grpc.ServiceRegistrar, srv QuickFeedServiceServer) {
	s.RegisterService(&QuickFeedService_ServiceDesc, srv)
}

func _QuickFeedService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetUser(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetUsers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetUserByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetUserByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetUserByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetUserByCourse(ctx, req.(*CourseUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetGroupByUserAndCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetGroupByUserAndCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetGroupByUserAndCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetGroupByUserAndCourse(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetGroupsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetGroupsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetGroupsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetGroupsByCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetCourses(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetCoursesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetCoursesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetCoursesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetCoursesByUser(ctx, req.(*EnrollmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateCourseVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateCourseVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateCourseVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateCourseVisibility(ctx, req.(*Enrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetAssignments(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateAssignments(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetEnrollmentsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetEnrollmentsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetEnrollmentsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetEnrollmentsByUser(ctx, req.(*EnrollmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetEnrollmentsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetEnrollmentsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetEnrollmentsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetEnrollmentsByCourse(ctx, req.(*EnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateEnrollment(ctx, req.(*Enrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enrollments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateEnrollments(ctx, req.(*Enrollments))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetSubmissions(ctx, req.(*SubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionReviewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetSubmission(ctx, req.(*SubmissionReviewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetSubmissionsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionsForCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetSubmissionsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetSubmissionsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetSubmissionsByCourse(ctx, req.(*SubmissionsForCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateSubmission(ctx, req.(*UpdateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateSubmissions(ctx, req.(*UpdateSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_RebuildSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).RebuildSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/RebuildSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).RebuildSubmissions(ctx, req.(*RebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingBenchmark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateBenchmark(ctx, req.(*GradingBenchmark))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingBenchmark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateBenchmark(ctx, req.(*GradingBenchmark))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_DeleteBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingBenchmark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).DeleteBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/DeleteBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).DeleteBenchmark(ctx, req.(*GradingBenchmark))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingCriterion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateCriterion(ctx, req.(*GradingCriterion))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingCriterion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateCriterion(ctx, req.(*GradingCriterion))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_DeleteCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradingCriterion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).DeleteCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/DeleteCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).DeleteCriterion(ctx, req.(*GradingCriterion))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).CreateReview(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).UpdateReview(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetReviewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionReviewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetReviewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetReviewers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetReviewers(ctx, req.(*SubmissionReviewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetOrganization(ctx, req.(*OrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/GetRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).GetRepositories(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickFeedService_IsEmptyRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickFeedServiceServer).IsEmptyRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qf.QuickFeedService/IsEmptyRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickFeedServiceServer).IsEmptyRepo(ctx, req.(*RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuickFeedService_ServiceDesc is the grpc.ServiceDesc for QuickFeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuickFeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qf.QuickFeedService",
	HandlerType: (*QuickFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _QuickFeedService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _QuickFeedService_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByCourse",
			Handler:    _QuickFeedService_GetUserByCourse_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _QuickFeedService_UpdateUser_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _QuickFeedService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByUserAndCourse",
			Handler:    _QuickFeedService_GetGroupByUserAndCourse_Handler,
		},
		{
			MethodName: "GetGroupsByCourse",
			Handler:    _QuickFeedService_GetGroupsByCourse_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _QuickFeedService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _QuickFeedService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _QuickFeedService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _QuickFeedService_GetCourse_Handler,
		},
		{
			MethodName: "GetCourses",
			Handler:    _QuickFeedService_GetCourses_Handler,
		},
		{
			MethodName: "GetCoursesByUser",
			Handler:    _QuickFeedService_GetCoursesByUser_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _QuickFeedService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _QuickFeedService_UpdateCourse_Handler,
		},
		{
			MethodName: "UpdateCourseVisibility",
			Handler:    _QuickFeedService_UpdateCourseVisibility_Handler,
		},
		{
			MethodName: "GetAssignments",
			Handler:    _QuickFeedService_GetAssignments_Handler,
		},
		{
			MethodName: "UpdateAssignments",
			Handler:    _QuickFeedService_UpdateAssignments_Handler,
		},
		{
			MethodName: "GetEnrollmentsByUser",
			Handler:    _QuickFeedService_GetEnrollmentsByUser_Handler,
		},
		{
			MethodName: "GetEnrollmentsByCourse",
			Handler:    _QuickFeedService_GetEnrollmentsByCourse_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _QuickFeedService_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollments",
			Handler:    _QuickFeedService_UpdateEnrollments_Handler,
		},
		{
			MethodName: "GetSubmissions",
			Handler:    _QuickFeedService_GetSubmissions_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _QuickFeedService_GetSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionsByCourse",
			Handler:    _QuickFeedService_GetSubmissionsByCourse_Handler,
		},
		{
			MethodName: "UpdateSubmission",
			Handler:    _QuickFeedService_UpdateSubmission_Handler,
		},
		{
			MethodName: "UpdateSubmissions",
			Handler:    _QuickFeedService_UpdateSubmissions_Handler,
		},
		{
			MethodName: "RebuildSubmissions",
			Handler:    _QuickFeedService_RebuildSubmissions_Handler,
		},
		{
			MethodName: "CreateBenchmark",
			Handler:    _QuickFeedService_CreateBenchmark_Handler,
		},
		{
			MethodName: "UpdateBenchmark",
			Handler:    _QuickFeedService_UpdateBenchmark_Handler,
		},
		{
			MethodName: "DeleteBenchmark",
			Handler:    _QuickFeedService_DeleteBenchmark_Handler,
		},
		{
			MethodName: "CreateCriterion",
			Handler:    _QuickFeedService_CreateCriterion_Handler,
		},
		{
			MethodName: "UpdateCriterion",
			Handler:    _QuickFeedService_UpdateCriterion_Handler,
		},
		{
			MethodName: "DeleteCriterion",
			Handler:    _QuickFeedService_DeleteCriterion_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _QuickFeedService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _QuickFeedService_UpdateReview_Handler,
		},
		{
			MethodName: "GetReviewers",
			Handler:    _QuickFeedService_GetReviewers_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _QuickFeedService_GetOrganization_Handler,
		},
		{
			MethodName: "GetRepositories",
			Handler:    _QuickFeedService_GetRepositories_Handler,
		},
		{
			MethodName: "IsEmptyRepo",
			Handler:    _QuickFeedService_IsEmptyRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qf/quickfeed.proto",
}
