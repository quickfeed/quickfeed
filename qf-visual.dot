digraph QuickFeed {
    node [shape = ellipse; fontname = "Sans 10"; fontsize = 10;];
    edge [fontname = "Sans 10"; fontsize = 9;];
    graph [fontname = "Sans 10"; fontsize = 10;];

    subgraph cluster_assignments {
        label = "assignments (folder)";

        subgraph cluster_assignments_parser_go {
            label = "assignments_parser.go";

            assignments_newAssignmentFromFile [label = "newAssignmentFromFile()";shape = box;];
            assignments_FixDeadline [label = "FixDeadline()";shape = box;];
            assignments_FixDeadline -> assignments_newAssignmentFromFile;
        }
        assignments_newAssignmentFromFile -> assignments_readTestsRepositoryContent;

        subgraph cluster_assignments_go {
            label = "assignments.go";

            assignments_UpdateFromTestsRepo [label = "UpdateFromTestsRepo()";shape = box;];
            assignments_buildDockerImage [label = "buildDockerImage()";shape = box;];
            assignments_buildDockerImage -> assignments_UpdateFromTestsRepo;
        }

        subgraph cluster_pull_request_go {
            label = "pull_request.go";

            assignments_countMap [label = "countMap (Receiver)";];
            assignments_countMap -> assignments_initialize;
            assignments_initialize [label = "initialize()";shape = box;];
            assignments_initialize -> {assignments_getNextTeacherReviewer assignments_getNextStudentReviewer};


            assignments_AssignReviewers [label = "AssignReviewers()";shape = box;];
            assignments_getNextReviewer [label = "getNextReviewer()";shape = box;];
            assignments_getNextReviewer -> {assignments_getNextTeacherReviewer assignments_getNextStudentReviewer};


            assignments_getNextTeacherReviewer [label = "getNextTeacherReviewer()";shape = box;];
            assignments_getNextTeacherReviewer -> assignments_AssignReviewers;
            assignments_getNextStudentReviewer [label = "getNextStudentReviewer()";shape = box;];
            assignments_getNextStudentReviewer -> assignments_AssignReviewers;
        }

        subgraph cluster_tasks_go {
            label = "tasks.go";

            assignments_taskName [label = "taskName()";shape = box;];
            assignments_newTask [label = "newTask()";shape = box;];
            assignments_tasksFromAssignments [label = "tasksFromAssignments()";shape = box;];
            assignments_tasksFromAssignments -> assignments_synchronizeTasksWithIssues;
            assignments_mapTasksByID [label = "mapTasksByID()";shape = box;];
            assignments_mapTasksByID -> assignments_updateIssues;
            assignments_synchronizeTasksWithIssues [label = "synchronizeTasksWithIssues()";shape = box;];
            assignments_createIssues [label = "createIssues()";shape = box;];
            assignments_createIssues -> assignments_synchronizeTasksWithIssues;
            assignments_updateIssues [label = "updateIssues()";shape = box;];
            assignments_updateIssues -> assignments_synchronizeTasksWithIssues;
        }
        assignments_synchronizeTasksWithIssues -> assignments_UpdateFromTestsRepo;
        assignments_newTask -> assignments_readTestsRepositoryContent;
        assignments_taskName -> assignments_readTestsRepositoryContent;

        subgraph cluster_walk_tests_repo_go {
            label = "walk_tests_repo.go";

            assignments_matchAny [label = "matchAny()";shape = box;];
            assignments_matchAny -> assignments_walkTestsRepository;
            assignments_match [label = "match()";shape = box;];
            assignments_match -> assignments_readTestsRepositoryContent;
            assignments_readTestsRepositoryContent [label = "readTestsRepositoryContent()";shape = box;];
            assignments_walkTestsRepository [label = "walkTestsRepository()";shape = box;];
            assignments_walkTestsRepository -> assignments_readTestsRepositoryContent;
        }
        assignments_readTestsRepositoryContent -> assignments_UpdateFromTestsRepo
    }

    subgraph cluster_ci {
        label = "ci (folder)";

        subgraph cluster_ci_go {
            label = "ci.go";

            subgraph cluster_runner_interface {
                label = "Runner (interface)";

                ci_Job [label = "Job (type)";shape = diamond;];
                ci_Run [label = "Run()";];
            }
        }

        subgraph cluster_clone_repositories_go {
            label = "clone_repositories.go";

            ci_cloneMissingRepositories [label = "cloneMissingRepositories()";shape = box;];
            ci_hasAssignment [label = "hasAssignment()";shape = box;];
            ci_scanStudentRepo [label = "scanStudentRepo()";shape = box;];
            ci_exists [label = "exists()";shape = box;];
            ci_exists -> ci_cloneMissingRepositories;
            ci_exists -> ci_hasAssignment;
            ci_walk [label = "walk()";shape = box;];
            ci_walk -> ci_scanStudentRepo;
        }

        subgraph cluster_docker_go {
            label = "docker.go";

            ci_Docker [label = "Docker (Receiver)";];
            ci_Docker -> {ci_Close ci_docker_Run ci_createImage};



            ci_NewDockerCI [label = "NewDockerCI()";shape = box;];
            ci_Close [label = "Close()";shape = box;];
            ci_docker_Run [label = "Run()";shape = box;];
            ci_createImage [label = "createImage()";shape = box;];
            ci_createImage -> ci_docker_Run;
            ci_waitForContainer [label = "waitForContainer()";shape = box;];
            ci_waitForContainer -> ci_docker_Run;
            ci_pullImage [label = "pullImage()";shape = box;];
            ci_pullImage -> ci_createImage;
            ci_buildImage [label = "buildImage()";shape = box;];
            ci_buildImage -> ci_createImage;
            ci_printInfo [label = "printInfo()";shape = box;];
            ci_printInfo -> ci_buildImage;
            ci_dockerJSON [label = "dockerJSON (Receiver)";];
            ci_dockerJSON -> ci_dockerJSON_String;
            ci_dockerJSON_String [label = "String()";shape = box;];
        }

        subgraph cluster_local_unix_go {
            label = "local_unix.go";

            ci_Local [label = "Local (Receiver)";];
            ci_Local -> ci_local_unix_Run;
            ci_local_unix_Run [label = "Run()";shape = box;];
        }

        subgraph cluster_local_windows_go {
            label = "local_windows.go";

            ci_Local [label = "Local (Receiver)";];
            ci_Local -> ci_local_windows_Run;
            ci_local_windows_Run [label = "Run()";shape = box;];
        }

        subgraph cluster_metrics_go {
            label = "metrics.go";

            ci_TestExecutionMetricsCollectors [label = "TestExecutionMetricsCollectors()";shape = box;];
            ci_timer [label = "timer()";shape = box;];
        }

        subgraph cluster_parse_script_go {
            label = "parse_script.go";

            ci_parseTestRunnerScript [label = "parseTestRunnerScript()";shape = box;];
            ci_loadRunScript [label = "loadRunScript()";shape = box;];
            ci_loadRunScript -> ci_parseTestRunnerScript;
            ci_parseRunScript [label = "loadRunScript()";shape = box;];
            ci_parseRunScript -> ci_parseTestRunnerScript;
            ci_EnvVars [label = "EnvVars()";shape = box;];
            ci_EnvVars -> ci_parseTestRunnerScript;
        }

        subgraph cluster_record_results_go {
            label = "record_results.go";

            ci_RecordResults [label = "RecordResults()";shape = box;];
            ci_previousSubmission [label = "previousSubmission()";shape = box;];
            ci_previousSubmission -> ci_RecordResults;
            ci_newSubmission [label = "newSubmission()";shape = box;];
            ci_newSubmission -> ci_RecordResults;
            ci_newManualReviewSubmission [label = "newManualReviewSubmission()";shape = box;];
            ci_newManualReviewSubmission -> ci_newSubmission;
            ci_newTestRunSubmission [label = "newTestRunSubmission()";shape = box;];
            ci_newTestRunSubmission -> ci_newSubmission;
            ci_updateSlipDays [label = "updateSlipDays()";shape = box;];
            ci_updateSlipDays -> ci_RecordResults;
            ci_GetOwners [label = "GetOwners()";shape = box;];
        }

        subgraph cluster_run_tests_go {
            label = "run_tests.go";

            ci_RunData [label = "RunData (Receiver)";];
            ci_RunData -> {ci_RunData_String};


            ci_RunData_String [label = "String()";shape = box;];
            ci_RunTests [label = "RunTests()";shape = box;];
            ci_clone [label = "clone()";shape = box;];
            ci_clone -> ci_RunTests;
        }
        ci_RunData -> {ci_parseTestRunnerScript ci_loadRunScript ci_RecordResults ci_previousSubmission ci_newSubmission ci_newManualReviewSubmission ci_newTestRunSubmission ci_updateSlipDays ci_GetOwners};




        ci_RunData_String -> ci_parseTestRunnerScript;

        subgraph cluster_truncate_go {
            label = "truncate.go";

            ci_truncateLog [label = "truncateLog()";shape = box;];
            ci_findScoreLines [label = "findScoreLines()";shape = box;];
            ci_findScoreLines -> ci_truncateLog;
        }
        ci_truncateLog -> ci_docker_Run;
    }
    // cluster_docker_go
    ci_NewDockerCI -> qcm_runTests;
    ci_NewDockerCI -> main;
    ci_Close -> main;

    // cluster_metrics_go
    ci_TestExecutionMetricsCollectors -> metrics_init;
    ci_timer -> ci_scanStudentRepo;

    // cluster_parse_script_go
    ci_EnvVars -> qcm_runTests;

    // cluster_run_tests_go
    ci_RunTests -> qcm_runTests;

    subgraph cluster_cmd {
        label = "cmd (folder) executable commands";

        subgraph cluster_anonymize {
            label = "anonymize (folder)";

            subgraph cluster_anonymize_main_go {
                label = "main.go";

                Statement [label = "Statement (class)";shape = box;];
                Statement -> DatabaseAnonymizer;
                DatabaseAnonymizer [label = "DatabaseAnonymizer (class)";shape = box;];
                DatabaseAnonymizer -> anonymize_main;

                anonymize_main [label = "main()";shape = box;];
            }
        }

        subgraph cluster_approvelist {
            label = "approvelist (folder)";

            subgraph cluster_approvelist_main_go {
                label = "main.go";

                NewQuickFeed [label = "NewQuickFeed()";shape = box;];
                NewQuickFeed -> approvelist_getSubmissions;
                approvelist_main [label = "main()";shape = box;];
                output [label = "output (Receiver)";];
                output -> {addFS addQF addBoth Print};
                newOutput [label = "newOutput()";shape = box;];
                newOutput -> approvelist_main;
                addFS [label = "addFS()";shape = box;];
                addFS -> approvelist_main;
                addQF [label = "addQF()";shape = box;];
                addQF -> approvelist_main;
                addBoth [label = "addBoth()";shape = box;];
                addBoth -> approvelist_main;
                Print [label = "Print()";shape = box;];
                Print -> approvelist_main;
                approved [label = "approved()";shape = box;];
                approved -> approvelist_main;
                head [label = "head()";shape = box;];
                head -> Print;
                out [label = "out()";shape = box;];
                out -> addFS;
                out -> addBoth;
                outNoRow [label = "outNoRow()";shape = box;];
                outNoRow -> addQF;
                mark [label = "mark()";shape = box;];
                mark -> out;
                mark -> outNoRow;
                Keys [label = "Keys()";shape = box;];
                Keys -> Print;
                approvelist_getSubmissions [label = "getSubmissions()";shape = box;];
                approvelist_getSubmissions -> approvelist_main;
                partialMatch [label = "partialMatch()";shape = box;];
                partialMatch -> lookupRowByName;
                fileName [label = "fileName()";shape = box;];
                fileName -> loadApproveSheet;
                fileName -> saveApproveSheet;
                approveSheet [label = "approveSheet (Receiver)";];
                approveSheet -> {fullName studentNum lookupStudentByRow lookupRow lookupRowByName setApproveCell approveCell};
                newApproveSheet [label = "newApproveSheet()";shape = box;];
                newApproveSheet -> loadApproveSheet;
                fullName [label = "fullName()";shape = box;];
                fullName -> newApproveSheet;
                fullName -> lookupStudentByRow;
                studentNum [label = "studentNum()";shape = box;];
                studentNum -> newApproveSheet;
                lookupStudentByRow [label = "lookupStudentByRow()";shape = box;];
                lookupStudentByRow -> approvelist_main;
                lookupRow [label = "lookupRow()";shape = box;];
                lookupRow -> approvelist_main;
                lookupRowByName [label = "lookupRowByName()";shape = box;];
                lookupRowByName -> approvelist_main;
                setApproveCell [label = "setApproveCell()";shape = box;];
                setApproveCell -> approvelist_main;
                approveCell [label = "approveCell()";shape = box;];
                approveCell -> setApproveCell;
                loadApproveSheet [label = "loadApproveSheet()";shape = box;];
                loadApproveSheet -> approvelist_main;
                saveApproveSheet [label = "saveApproveSheet()";shape = box;];
                saveApproveSheet -> approvelist_main;
            }
        }

        subgraph cluster_qcm {
            label = "qcm (folder)";

            subgraph cluster_qcm_main_go {
                label = "main.go";

                qcm_main [label = "main()";shape = box;];
                qcm_runTests [label = "runTests()";shape = box;];
                qcm_runTests -> qcm_main;
                qcm_runner [label = "runner()";shape = box;];
                qcm_runTests -> qcm_runTests;
                qcm_getSCMClient [label = "getSCMClient()";shape = box;];
                qcm_getSCMClient -> qcm_main;
                qcm_studentRepo [label = "studentRepo()";shape = box;];
                qcm_studentRepo -> {qcm_studentRepoUrl qcm_runTests};


                qcm_studentRepoUrl [label = "studentRepoUrl()";shape = box;];
                qcm_studentRepoUrl -> qcm_runTests;
                qcm_clone [label = "clone()";shape = box;];
                qcm_clone -> qcm_main;
                qcm_readFile [label = "readFile()";shape = box;];
                qcm_readFile -> qcm_runTests;
                qcm_exists [label = "exists()";shape = box;];
                qcm_exists -> qcm_main;
                qcm_check [label = "check()";shape = box;];
                qcm_check -> qcm_readFile;
                qcm_check -> qcm_clone;
                qcm_check -> qcm_getSCMClient;
                qcm_check -> qcm_runTests;
                qcm_check -> qcm_runTests;
            }
        }

        subgraph cluster_vercheck {
            label = "vercheck (folder)";

            subgraph cluster_vercheck_main_go {
                label = "main.go";

                vercheck_main [label = "main()";shape = box;];

                checkVersions [label = "checkVersions()";shape = box;];
                checkVersions -> vercheck_main;
                toolVersion [label = "toolVersion()";shape = box;];
                toolVersion -> vercheck_main;
                scan [label = "scan()";shape = box;];
                scan -> vercheck_main;
                vercheck_check [label = "check()";shape = box;];
                vercheck_check -> scan;
            }
        }
    }

    subgraph cluster_database {
        label = "database (folder)";

        subgraph cluster_logger_go {
            label = "logger.go";

            NewGORMLogger [label = "NewGORMLogger()";shape = box;];

            LogMode [label = "LogMode()";shape = box;];
            Info [label = "Info()";shape = box;];
            Warn [label = "Warn()";shape = box;];
            Error [label = "Error()";shape = box;];
            Trace [label = "Trace()";shape = box;];

            logger [label = "logger()";shape = box;];
            logger -> {LogMode Info Warn Error Trace};
        }

        subgraph cluster_gormdb_go {
            label = "gormdb.go";

            GormDB [label = "GormDB (Receiver)";];

            NewGormDB [label = "NewGormDB()";];
            NewGormDB -> GormDB;
            Close [label = "Close() - Only used in test_helper.go";];
        }
        NewGORMLogger -> NewGormDB;

        subgraph cluster_database_go {
            label = "database.go";

            database_CreateUser [label = "CreateUser()";];
            database_GetUserByRemoteIdentity [label = "GetUserByRemoteIdentity()";];
            database_GetUser [label = "GetUser()";];
            database_GetUserWithEnrollments [label = "GetUserWithEnrollments()";];
            database_GetUserByCourse [label = "GetUserByCourse()";];
            database_GetUsers [label = "GetUsers()";];
            database_UpdateUser [label = "UpdateUser()";];

            database_CreateCourse [label = "CreateCourse()";];
            database_GetCourse [label = "GetCourse()";];
            database_GetCourseByOrganizationID [label = "GetCourseByOrganizationID()";];
            database_GetCourses [label = "GetCourses()";];
            database_GetCoursesByUser [label = "GetCoursesByUser()";];
            database_GetCourseTeachers [label = "GetCourseTeachers()";];
            database_UpdateCourse [label = "UpdateCourse()";];

            database_CreateEnrollment [label = "CreateEnrollment()";];
            database_RejectEnrollment [label = "RejectEnrollment()";];
            database_UpdateEnrollment [label = "UpdateEnrollment()";];
            database_GetEnrollmentByCourseAndUser [label = "GetEnrollmentByCourseAndUser()";];
            database_GetEnrollmentsByCourse [label = "GetEnrollmentsByCourse()";];
            database_GetEnrollmentsByUser [label = "GetEnrollmentsByUser()";];

            database_CreateGroup [label = "CreateGroup()";];
            database_UpdateGroup [label = "UpdateGroup()";];
            database_UpdateGroupStatus [label = "UpdateGroupStatus()";];
            database_DeleteGroup [label = "DeleteGroup()";];
            database_GetGroup [label = "GetGroup()";];
            database_GetGroupsByCourse [label = "GetGroupsByCourse()";];

            database_CreateAssignment [label = "CreateAssignment()";];
            database_GetAssignment [label = "GetAssignment()";];
            database_GetAssignmentsByCourse [label = "GetAssignmentsByCourse()";];
            database_UpdateAssignments [label = "UpdateAssignments()";];
            database_CreateBenchmark [label = "CreateBenchmark()";];
            database_UpdateBenchmark [label = "UpdateBenchmark()";];
            database_DeleteBenchmark [label = "DeleteBenchmark()";];
            database_CreateCriterion [label = "CreateCriterion()";];
            database_UpdateCriterion [label = "UpdateCriterion()";];
            database_DeleteCriterion [label = "DeleteCriterion()";];

            database_CreateSubmission [label = "CreateSubmission()";];
            database_GetSubmission [label = "GetSubmission()";];
            database_GetLastSubmission [label = "GetLastSubmission()";];
            database_GetLastSubmissions [label = "GetLastSubmissions()";];
            database_GetSubmissions [label = "GetSubmissions()";];
            database_GetCourseSubmissions [label = "GetCourseSubmissions()";];
            database_UpdateSubmission [label = "UpdateSubmission()";];
            database_UpdateSubmissions [label = "UpdateSubmissions()";];
            database_GetReview [label = "GetReview()";];
            database_CreateReview [label = "CreateReview()";];
            database_UpdateReview [label = "UpdateReview()";];
            database_DeleteReview [label = "DeleteReview()";];
            database_GetBenchmarks [label = "GetBenchmarks()";];
            database_CreateRepository [label = "CreateRepository()";];
            database_GetRepositories [label = "GetRepositories()";];
            database_DeleteRepository [label = "DeleteRepository()";];
            database_GetRepositoriesWithIssues [label = "GetRepositoriesWithIssues()";];

            database_GetTasks [label = "GetTasks()";];
            database_CreateIssues [label = "CreateIssues()";];
            database_SynchronizeAssignmentTasks [label = "SynchronizeAssignmentTasks()";];
            database_CreatePullRequest [label = "CreatePullRequest()";];
            database_GetPullRequest [label = "GetPullRequest()";];
            database_HandleMergingPR [label = "HandleMergingPR()";];
            database_UpdatePullRequest [label = "UpdatePullRequest()";];

            database_UpdateSlipDays [label = "UpdateSlipDays()";];
        }

        // Internal connections via the GormDB and not the Database interface
        subgraph cluster_gormdb_user_go {
            label = "gormdb_user.go";

            _database_CreateUser [label = "CreateUser()";shape = box;];
            _database_GetUserByRemoteIdentity [label = "GetUserByRemoteIdentity()";shape = box;];
            _database_GetUser [label = "GetUser()";shape = box;];
            _database_GetUser -> {_database_CreateCourse _database_GetCourseTeachers};

            _database_GetUserWithEnrollments [label = "GetUserWithEnrollments()";shape = box;];
            _database_GetUserByCourse [label = "GetUserByCourse()";shape = box;];
            _database_GetUsers [label = "GetUsers()";shape = box;];
            _database_UpdateUser [label = "UpdateUser()";shape = box;];
            _database_UpdateUser -> _database_CreateUser;
        }

        subgraph cluster_gormdb_courses_go {
            label = "gormdb_courses.go";

            _database_CreateCourse [label = "CreateCourse()";shape = box;];
            _database_GetCourse [label = "GetCourse()";shape = box;];
            _database_GetCourseByOrganizationID [label = "GetCourseByOrganizationID()";shape = box;];
            _database_GetCourses [label = "GetCourses()";shape = box;];
            _database_GetCourses -> GetCoursesByUser;
            _database_GetCoursesByUser [label = "GetCoursesByUser()";shape = box;];
            _database_GetCourseTeachers [label = "GetCourseTeachers()";shape = box;];
            _database_UpdateCourse [label = "UpdateCourse()";shape = box;];
        }

        subgraph cluster_gormdb_enrollment_go {
            label = "gormdb_enrollment.go";

            _database_CreateEnrollment [label = "CreateEnrollment()";shape = box;];
            _database_RejectEnrollment [label = "RejectEnrollment()";shape = box;];
            _database_UpdateEnrollment [label = "UpdateEnrollment()";shape = box;];
            _database_GetEnrollmentByCourseAndUser [label = "GetEnrollmentByCourseAndUser()";shape = box;];
            _database_GetEnrollmentByCourseAndUser -> _database_RejectEnrollment;
            _database_GetEnrollmentsByCourse [label = "GetEnrollmentsByCourse()";shape = box;];
            _database_GetEnrollmentsByUser [label = "GetEnrollmentsByUser()";shape = box;];
            _database_getEnrollments [label = "getEnrollments()";shape = box;];
            _database_getEnrollments -> _database_GetEnrollmentsByUser;
            _database_getEnrollments -> _database_GetCoursesByUser;
            _database_getEnrollments -> _database_GetEnrollmentsByCourse;

            _database_UpdateSlipDays [label = "UpdateSlipDays()";shape = box;];
            internalUpdateSlipDays [label = "internalUpdateSlipDays()";shape = box;];
            internalUpdateSlipDays -> _database_UpdateSlipDays;
        }

        subgraph cluster_gormdb_group_go {
            label = "gormdb_group.go";

            _database_CreateGroup [label = "CreateGroup()";shape = box;];
            _database_UpdateGroup [label = "UpdateGroup()";shape = box;];
            _database_UpdateGroupStatus [label = "UpdateGroupStatus()";shape = box;];
            _database_DeleteGroup [label = "DeleteGroup()";shape = box;];
            _database_GetGroup [label = "GetGroup()";shape = box;];
            _database_GetGroup -> _database_DeleteGroup;
            _database_GetGroupsByCourse [label = "GetGroupsByCourse()";shape = box;];
        }

        subgraph cluster_gormdb_assignment_go {
            label = "gormdb_assignment.go";

            _database_CreateAssignment [label = "CreateAssignment()";shape = box;];
            _database_GetAssignment [label = "GetAssignment()";shape = box;];
            _database_GetAssignmentsByCourse [label = "GetAssignmentsByCourse()";shape = box;];
            _database_UpdateAssignments [label = "UpdateAssignments()";shape = box;];
            updateGradingCriteria [label = "updateGradingCriteria()";shape = box;];
            updateGradingCriteria -> _database_UpdateAssignments;
            assignment_database_check [label = "check()";shape = box;];
            assignment_database_check -> _database_UpdateAssignments;

            _database_GetCourseSubmissions [label = "GetCourseSubmissions()";shape = box;];
            _database_CreateBenchmark [label = "CreateBenchmark()";shape = box;];
            _database_UpdateBenchmark [label = "UpdateBenchmark()";shape = box;];
            _database_DeleteBenchmark [label = "DeleteBenchmark()";shape = box;];
            _database_CreateCriterion [label = "CreateCriterion()";shape = box;];
            _database_UpdateCriterion [label = "UpdateCriterion()";shape = box;];
            _database_DeleteCriterion [label = "DeleteCriterion()";shape = box;];
            _database_GetBenchmarks [label = "GetBenchmarks()";shape = box;];
            _database_GetBenchmarks -> _database_GetAssignmentsByCourse;
            _database_GetBenchmarks -> updateGradingCriteria;
        }
        _database_GetAssignmentsByCourse -> _database_SynchronizeAssignmentTasks;

        subgraph cluster_gormdb_submission_go {
            label = "gormdb_submission.go";

            _database_CreateSubmission [label = "CreateSubmission()";shape = box;];
            submission_database_check [label = "check()";shape = box;];
            submission_database_check -> _database_CreateSubmission;

            _database_GetSubmission [label = "GetSubmission()";shape = box;];
            _database_GetSubmission -> _database_GetLastSubmission;
            _database_GetSubmission -> _database_GetLastSubmissions;

            _database_GetLastSubmission [label = "GetLastSubmission()";shape = box;];
            _database_GetLastSubmissions [label = "GetLastSubmissions()";shape = box;];
            _database_GetSubmissions [label = "GetSubmissions()";shape = box;];
            _database_UpdateSubmission [label = "UpdateSubmission()";shape = box;];
            _database_UpdateSubmissions [label = "UpdateSubmissions()";shape = box;];
            _database_GetReview [label = "GetReview()";shape = box;];
            _database_CreateReview [label = "CreateReview()";shape = box;];
            _database_UpdateReview [label = "UpdateReview()";shape = box;];
            _database_DeleteReview [label = "DeleteReview()";shape = box;];
        }

        subgraph cluster_gormdb_repository_go {
            label = "gormdb_repository.go";

            _database_CreateRepository [label = "CreateRepository()";shape = box;];
            _database_GetRepositories [label = "GetRepositories()";shape = box;];
            _database_DeleteRepository [label = "DeleteRepository()";shape = box;];
            _database_GetRepositoriesWithIssues [label = "GetRepositoriesWithIssues()";shape = box;];
        }

        subgraph cluster_gormdb_tasks_go {
            label = "gormdb_tasks.go";

            _database_GetTasks [label = "GetTasks()";shape = box;];
            _database_CreateIssues [label = "CreateIssues()";shape = box;];
            _database_SynchronizeAssignmentTasks [label = "SynchronizeAssignmentTasks()";shape = box;];
            _database_CreatePullRequest [label = "CreatePullRequest()";shape = box;];
            _database_GetPullRequest [label = "GetPullRequest()";shape = box;];
            _database_HandleMergingPR [label = "HandleMergingPR()";shape = box;];
            _database_UpdatePullRequest [label = "UpdatePullRequest()";shape = box;];
        }
        // Following entries in the array is sorted by where the methods are in files
        GormDB -> {_database_CreateUser _database_GetUserByRemoteIdentity _database_GetUser _database_GetUserWithEnrollments _database_GetUserByCourse _database_GetUsers _database_UpdateUser _database_CreateCourse _database_GetCourse _database_GetCourseByOrganizationID _database_GetCourses _database_GetCoursesByUser _database_GetCourseTeachers _database_UpdateCourse _database_CreateEnrollment _database_RejectEnrollment _database_UpdateEnrollment _database_GetEnrollmentByCourseAndUser _database_GetEnrollmentsByCourse _database_GetEnrollmentsByUser _database_UpdateSlipDays _database_CreateGroup _database_UpdateGroup _database_UpdateGroupStatus _database_DeleteGroup _database_GetGroup _database_GetGroupsByCourse _database_CreateAssignment _database_GetAssignment _database_GetAssignmentsByCourse _database_UpdateAssignments updateGradingCriteria _database_GetCourseSubmissions _database_CreateBenchmark _database_UpdateBenchmark _database_DeleteBenchmark _database_CreateCriterion _database_UpdateCriterion _database_DeleteCriterion _database_GetBenchmarks _database_CreateSubmission submission_database_check _database_GetSubmission _database_GetLastSubmission _database_GetLastSubmissions _database_GetSubmissions _database_UpdateSubmission _database_UpdateSubmissions _database_GetReview _database_CreateReview _database_UpdateReview _database_DeleteReview _database_CreateRepository _database_GetRepositories _database_DeleteRepository _database_GetRepositoriesWithIssues _database_GetTasks _database_CreateIssues _database_SynchronizeAssignmentTasks _database_CreatePullRequest _database_GetPullRequest _database_HandleMergingPR _database_UpdatePullRequest};

        _database_CreateUser -> database_CreateUser;
        _database_GetUserByRemoteIdentity -> database_GetUserByRemoteIdentity;
        _database_GetUser -> database_GetUser;
        _database_GetUserWithEnrollments -> database_GetUserWithEnrollments;
        _database_GetUserByCourse -> database_GetUserByCourse;
        _database_GetUsers -> database_GetUsers;
        _database_UpdateUser -> database_UpdateUser;

        _database_CreateCourse -> database_CreateCourse;
        _database_GetCourse -> database_GetCourse;
        _database_GetCourseByOrganizationID -> database_GetCourseByOrganizationID;
        _database_GetCourses -> database_GetCourses;
        _database_GetCoursesByUser -> database_GetCoursesByUser;
        _database_GetCourseTeachers -> database_GetCourseTeachers;
        _database_UpdateCourse -> database_UpdateCourse;

        _database_CreateEnrollment -> database_CreateEnrollment;
        _database_RejectEnrollment -> database_RejectEnrollment;
        _database_UpdateEnrollment -> database_UpdateEnrollment;
        _database_GetEnrollmentByCourseAndUser -> database_GetEnrollmentByCourseAndUser;
        _database_GetEnrollmentsByCourse -> database_GetEnrollmentsByCourse;
        _database_GetEnrollmentsByUser -> database_GetEnrollmentsByUser;
        _database_UpdateSlipDays -> database_UpdateSlipDays;

        _database_CreateGroup -> database_CreateGroup;
        _database_UpdateGroup -> database_UpdateGroup;
        _database_UpdateGroupStatus -> database_UpdateGroupStatus;
        _database_DeleteGroup -> database_DeleteGroup;
        _database_GetGroup -> database_GetGroup;
        _database_GetGroupsByCourse -> database_GetGroupsByCourse;

        _database_CreateAssignment -> database_CreateAssignment;
        _database_GetAssignment -> database_GetAssignment;
        _database_GetAssignmentsByCourse -> database_GetAssignmentsByCourse;
        _database_UpdateAssignments -> database_UpdateAssignments;
        _database_GetCourseSubmissions -> database_GetCourseSubmissions;
        _database_CreateBenchmark -> database_CreateBenchmark;
        _database_UpdateBenchmark -> database_UpdateBenchmark;
        _database_DeleteBenchmark -> database_DeleteBenchmark;
        _database_CreateCriterion -> database_CreateCriterion;
        _database_UpdateCriterion -> database_UpdateCriterion;
        _database_DeleteCriterion -> database_DeleteCriterion;
        _database_GetBenchmarks -> database_GetBenchmarks;

        _database_CreateSubmission -> database_CreateSubmission;
        _database_GetSubmission -> database_GetSubmission;
        _database_GetLastSubmission -> database_GetLastSubmission;
        _database_GetLastSubmissions -> database_GetLastSubmissions;
        _database_GetSubmissions -> database_GetSubmissions;
        _database_UpdateSubmission -> database_UpdateSubmission;
        _database_UpdateSubmissions -> database_UpdateSubmissions;
        _database_GetReview -> database_GetReview;
        _database_CreateReview -> database_CreateReview;
        _database_UpdateReview -> database_UpdateReview;
        _database_DeleteReview -> database_DeleteReview;

        _database_CreateRepository -> database_CreateRepository;
        _database_GetRepositories -> database_GetRepositories;
        _database_DeleteRepository -> database_DeleteRepository;
        _database_GetRepositoriesWithIssues -> database_GetRepositoriesWithIssues;

        _database_GetTasks -> database_GetTasks;
        _database_CreateIssues -> database_CreateIssues;
        _database_SynchronizeAssignmentTasks -> database_SynchronizeAssignmentTasks;
        _database_CreatePullRequest -> database_CreatePullRequest;
        _database_GetPullRequest -> database_GetPullRequest;
        _database_HandleMergingPR -> database_HandleMergingPR;
        _database_UpdatePullRequest -> database_UpdatePullRequest;
    }

    subgraph cluster_internal {
        label = "internal (folder)";

        subgraph cluster_cert {
            label = "internal (folder)";

            subgraph cluster_add_cert_darwin_go {
                label = "add_cert_darwin.go";

                internal_darwin_AddTrustedCert [label = "AddTrustedCert()";shape = box;];
            }

            subgraph cluster_add_cert_linux_go {
                label = "add_cert_linux.go";

                internal_linux_AddTrustedCert [label = "AddTrustedCert()";shape = box;];
            }

            subgraph cluster_add_cert_windows_go {
                label = "add_cert_windows.go";

                internal_windows_AddTrustedCert [label = "AddTrustedCert()";shape = box;];
            }

            subgraph cluster_add_cert_go {
                label = "add_cert.go";

                // Logs and returns nil ??
                internal_AddTrustedCert [label = "AddTrustedCert()";shape = box;];
            }

            subgraph cluster_gen_certs_go {
                label = "gen_certs.go";

                internal_GenerateSelfSignedCert [label = "GenerateSelfSignedCert()";shape = box;];
                internal_generateKeys [label = "GenerateSelfSignedCert()";shape = box;];
                internal_generateKeys -> internal_GenerateSelfSignedCert;
                internal_certPeriod [label = "certPeriod()";shape = box;];
                internal_certPeriod -> internal_GenerateSelfSignedCert;
                internal_serverCertificateTemplate [label = "serverCertificateTemplate()";shape = box;];
                internal_caCertificateTemplate [label = "caCertificateTemplate()";shape = box;];
                internal_serialNumber [label = "serialNumber()";shape = box;];
                internal_serialNumber -> {internal_caCertificateTemplate internal_serverCertificateTemplate};
                internal_setHosts [label = "setHosts()";shape = box;];
                internal_setHosts -> {internal_caCertificateTemplate internal_serverCertificateTemplate};
                internal_makeCertificate [label = "makeCertificate()";shape = box;];
                internal_makeCertificate -> internal_GenerateSelfSignedCert;
                internal_savePEM [label = "savePEM()";shape = box;];
                internal_savePEM -> internal_GenerateSelfSignedCert;
                internal_publicKey [label = "publicKey()";shape = box;];
                internal_publicKey -> internal_GenerateSelfSignedCert;
            }
        }

        subgraph cluster_env {
            label = "env (folder)";

            subgraph cluster_cert_go {
                label = "cert.go";

                internal_Domain [label = "Domain()";shape = box;];
                internal_Domain -> {internal_CertFile internal_KeyFile};
                internal_Whitelist [label = "Whitelist()";shape = box;];
                internal_CertFile [label = "CertFile()";shape = box;];
                internal_KeyFile [label = "KeyFile()";shape = box;];
                internal_CertPath [label = "CertPath()";shape = box;];
                internal_CertPath -> {internal_CertFile internal_KeyFile};
                internal_IsLocal [label = "IsLocal()";shape = box;];
                internal_IsLocal -> internal_Whitelist;
            }

            subgraph cluster_load_go {
                label = "load.go";

                internal_Load [label = "Load()";shape = box;];
                internal_ignore [label = "ignore()";shape = box;];
                internal_ignore -> internal_Load;
            }

            subgraph cluster_path_go {
                label = "path.go";

                internal_Root [label = "Root()";shape = box;];
                internal_Root -> {internal_RootEnv internal_PublicEnv internal_PublicDir internal_DatabasePath internal_TestdataPath};
                internal_setRoot [label = "setRoot()";shape = box;];
                internal_setRoot -> internal_Root;
                internal_gitRoot [label = "gitRoot()";shape = box;];
                internal_gitRoot -> internal_setRoot;
                internal_checkModulePath [label = "checkModulePath()";shape = box;];
                internal_checkModulePath -> internal_setRoot;
                internal_RootEnv [label = "RootEn()";shape = box;];
                internal_PublicEnv [label = "PublicEnv()";shape = box;];
                internal_PublicDir [label = "PublicDir()";shape = box;];
                internal_DatabasePath [label = "DatabasePath()";shape = box;];
                internal_TestdataPath [label = "TestdataPath()";shape = box;];
            }
            internal_Root -> {internal_CertPath internal_AppKey};

            subgraph cluster_save_go {
                label = "save.go";

                internal_Prepared [label = "Prepared()";shape = box;];
                internal_Save [label = "Save()";shape = box;];
                internal_save_load [label = "load()";shape = box;];
                internal_save_load -> internal_Save;
                internal_update [label = "update()";shape = box;];
                internal_update -> internal_Save;
                internal_exists [label = "exists()";shape = box;];
                internal_exists -> {internal_Save internal_Prepared};
                internal_backupExistsError [label = "backupExistsError (Receiver)";];
                internal_ExistsError [label = "ExistsError()";shape = box;];
                internal_ExistsError -> internal_Prepared;
                internal_backupExistsError -> internal_backupExistsError_Error;
                internal_backupExistsError_Error [label = "Error()";shape = box;];
                internal_missingEnvError [label = "missingEnvError (Receiver)";];
                internal_missingEnvError -> internal_missingEnvError_Error;
                internal_MissingError [label = "MissingError()";shape = box;];
                internal_MissingError -> internal_Prepared;
                internal_missingEnvError_Error [label = "Error()";shape = box;];
            }

            subgraph cluster_scm_go {
                label = "scm.go";

                internal_ScmProvider [label = "ScmProvider()";shape = box;];
                internal_RepositoryPath [label = "RepositoryPath()";shape = box;];
                internal_ClientID [label = "ClientID()";shape = box;];
                internal_ClientSecret [label = "ClientSecret()";shape = box;];
                internal_AppID [label = "AppID()";shape = box;];
                internal_AppID -> internal_HasAppID;
                internal_AppKey [label = "AppKey()";shape = box;];
                internal_AppName [label = "AppName()";shape = box;];
                internal_GetAccessToken [label = "GetAccessToken()";shape = box;];
                internal_SetFakeProvider [label = "SetFakeProvider()";shape = box;];
                internal_HasAppID [label = "HasAppID()";shape = box;];
            }
        }

        subgraph cluster_fileop {
            label = "fileop (folder)";

            subgraph cluster_copy_dir_go {
                label = "copy_dir.go";

                internal_CopyDir [label = "CopyDir()";shape = box;];
                internal_copyFile [label = "copyFile()";shape = box;];
                internal_copyFile -> internal_CopyDir;
            }
        }

        subgraph cluster_multierr {
            label = "multierr (folder)";

            subgraph cluster_multierr_go {
                label = "multierr.go";

                internal_multiErr [label = "multiErr (Receiver)";];
                internal_multiErr -> internal_Error;
                internal_Error [label = "Error()";shape = box;];
                internal_Join [label = "Join()";shape = box;];
            }
        }

        subgraph cluster_qlog {
            label = "qlog (folder)";

            subgraph cluster_indented_go {
                label = "indented.go";

                internal_IndentJson [label = "IndentJson()";shape = box;];
            }

            subgraph cluster_logger_go {
                label = "logger.go";

                internal_Zap [label = "Zap()";shape = box;];
            }
        }

        subgraph cluster_qtest {
            label = "qtest (folder)";

            subgraph cluster_logger_helper_go {
                label = "logger_helper.go";

                internal_Logger [label = "Logger()";shape = box;];
            }

            subgraph cluster_timestamp_helper_go {
                label = "timestamp_helper.go";

                internal_Timestamp [label = "Timestamp()";shape = box;];
            }
        }

        subgraph cluster_rand {
            label = "rand (folder)";

            subgraph cluster_rand_go {
                label = "rand.go";

                internal_String [label = "String()";shape = box;];
            }
        }
    }
    // cluster_cert_go
    internal_Domain -> {main};

    // cluster_load_go
    internal_Load -> {main scm_GetSCMManager};

    // cluster_path_go
    internal_RootEnv -> {main scm_GetSCMManager};
    internal_PublicDir -> main;
    internal_DatabasePath -> main;

    // cluster_scm_go
    internal_ScmProvider -> {scm_NewSCMClient scm_newSCMAppClient};
    internal_RepositoryPath -> {qcm_main qf_CloneDir scm_NewMockedGithubSCMClient};
    internal_ClientID -> {scm_NewSCMConfig};
    internal_ClientSecret -> {scm_NewSCMConfig};
    internal_AppID -> {scm_NewSCMConfig};
    internal_AppKey -> {scm_NewSCMConfig};
    internal_AppName -> {checkDomain};
    internal_GetAccessToken -> {approvelist_getSubmissions};
    internal_HasAppID -> {scm_GetSCMManager};

    // cluster_multierr_go
    internal_Join -> {ci_Close};

    // cluster_logger_go
    internal_Zap -> {qcm_getSCMClient main};

    // cluster_logger_helper_go
    internal_Logger -> {scm_GetTestSCM scm_GetAppSCM};

    subgraph cluster_metrics {
        label = "metrics (folder)";

        subgraph cluster_prometheus_go {
            label = "prometheus.go";

            metrics_init [label = "init()";shape = box;];
            metrics_Handler [label = "Handler()";shape = box;];
        }
    }

    subgraph cluster_qf {
        label = "qf (folder)";

        subgraph cluster_assignment_go {
            label = "assignment.go";
        }
    }

    subgraph cluster_scm {
        label = "SCM (folder)";

        subgraph cluster_env_helper_go {
            label = "env_helper.go";

            scm_GetTestOrganization [label = "GetTestOrganization()";shape = box;];
            scm_GetTestOrganization -> scm_GetAppSCM;
            scm_GetTestSCM [label = "GetTestSCM()";shape = box;];
            scm_GetAccessToken [label = "GetAccessToken()";shape = box;];
            scm_GetAccessToken -> scm_GetTestSCM;
            scm_GetSCMManager [label = "GetSCMManager()";shape = box;];
            scm_GetSCMManager -> scm_GetAppSCM;
            scm_GetAppSCM [label = "GetAppSCM()";shape = box;];
        }

        subgraph cluster_fetcher_go {
            label = "fetcher.go";

            _scm_Clone [label = "Clone()";shape = box;];
            cloneUrl [label = "cloneUrl()";shape = box;];
            cloneUrl -> _scm_Clone;
        }
        _scm_Clone -> scm_Clone;

        subgraph cluster_github_app_go {
            label = "github_app.go";

            newGithubAppClient [label = "newGithubAppClient()";shape = box;];
            fetchInstallation [label = "fetchInstallation()";shape = box;];
            fetchInstallation -> newGithubAppClient;
            ExchangeToken [label = "ExchangeToken()";shape = box;];
            refreshToken [label = "refreshToken()";shape = box;];
        }
        newGithubAppClient -> scm_newSCMAppClient;
        ExchangeToken -> _scm_AcceptInvitations;
        refreshToken -> _scm_Clone;

        subgraph cluster_github_invite_go {
            label = "github_invite.go";

            newGithubInviteClient [label = "newGithubInviteClient()";shape = box;];
            newGithubInviteClient -> _scm_AcceptInvitations;
            _scm_AcceptInvitations [label = "AcceptInvitations()";shape = box;];
        }
        _scm_AcceptInvitations -> scm_AcceptInvitations;

        subgraph cluster_github_issues_go {
            label = "github_issues.go";

            _scm_CreateIssue [label = "CreateIssue()";shape = box;];
            _scm_UpdateIssue [label = "UpdateIssue()";shape = box;];
            _scm_GetIssue [label = "GetIssue()";shape = box;];
            _scm_GetIssues [label = "GetIssues()";shape = box;];
            _scm_CreateIssueComment [label = "CreateIssueComment()";shape = box;];
            _scm_UpdateIssueComment [label = "UpdateIssueComment()";shape = box;];
            _scm_RequestReviewers [label = "RequestReviewers()";shape = box;];
            toIssue [label = "toIssue()";shape = box;];
            toIssue -> CreateIssue;
            toIssue -> UpdateIssue;
            toIssue -> GetIssue;
            toIssue -> _scm_GetIssues;
        }
        _scm_CreateIssue -> scm_CreateIssue;
        _scm_UpdateIssue -> scm_UpdateIssue;
        _scm_GetIssue -> scm_GetIssue;
        _scm_GetIssues -> scm_GetIssues;
        _scm_CreateIssueComment -> scm_CreateIssueComment;
        _scm_UpdateIssueComment -> scm_UpdateIssueComment;
        _scm_RequestReviewers -> scm_RequestReviewers;

        subgraph cluster_github_go {
            label = "github.go";

            GithubSCM [label = "GithubSCM (Receiver)";];
            GithubSCM -> {_scm_Clone refreshToken _scm_AcceptInvitations _scm_GetOrganization _scm_GetRepositories _scm_RepositoryIsEmpty _scm_CreateCourse _scm_UpdateEnrollment _scm_RejectEnrollment _scm_DemoteTeacherToStudent _scm_CreateGroup _scm_UpdateGroupMembers _scm_DeleteGroup getRepository createRepository deleteRepository createStudentRepo updatePermission addUser Client _scm_CreateIssue _scm_UpdateIssue _scm_GetIssue _scm_GetIssues _scm_CreateIssueComment _scm_UpdateIssueComment _scm_RequestReviewers};
            NewGithubSCMClient [label = "NewGithubSCMClient()";shape = box;];
            _scm_GetOrganization [label = "GetOrganization()";shape = box;];
            _scm_GetRepositories [label = "GetRepositories()";shape = box;];
            _scm_GetRepositories -> _scm_GetOrganization;
            _scm_RepositoryIsEmpty [label = "RepositoryIsEmpty()";shape = box;];
            _scm_CreateCourse [label = "CreateCourse()";shape = box;];
            _scm_UpdateEnrollment [label = "UpdateEnrollment()";shape = box;];
            _scm_RejectEnrollment [label = "RejectEnrollment()";shape = box;];
            _scm_DemoteTeacherToStudent [label = "DemoteTeacherToStudent()";shape = box;];
            _scm_CreateGroup [label = "CreateGroup()";shape = box;];
            _scm_UpdateGroupMembers [label = "UpdateGroupMembers()";shape = box;];
            _scm_DeleteGroup [label = "DeleteGroup()";shape = box;];
            getRepository [label = "getRepository()";shape = box;];
            getRepository -> _scm_RepositoryIsEmpty;
            getRepository -> _scm_CreateGroup;
            createRepository [label = "createRepository()";shape = box;];
            createRepository -> _scm_CreateCourse;
            createRepository -> _scm_CreateGroup;
            createRepository -> createStudentRepo;
            deleteRepository [label = "deleteRepository()";shape = box;];
            deleteRepository -> _scm_RejectEnrollment;
            deleteRepository -> _scm_DeleteGroup;
            createStudentRepo [label = "createStudentRepo()";shape = box;];
            createStudentRepo -> _scm_CreateCourse;
            createStudentRepo -> _scm_UpdateEnrollment;
            updatePermission [label = "updatePermission()";shape = box;];
            updatePermission -> _scm_UpdateEnrollment;
            updatePermission -> _scm_DemoteTeacherToStudent;
            addUser [label = "addUser()";shape = box;];
            addUser -> _scm_UpdateEnrollment;
            addUser -> _scm_CreateGroup;
            addUser -> _scm_UpdateGroupMembers;
            addUser -> createStudentRepo;
            Client [label = "Client()";shape = box;];
            toRepository [label = "toRepository()";shape = box;];
            toRepository -> _scm_GetRepositories;
            toRepository -> getRepository;
            toRepository -> createRepository;
        }
        NewGithubSCMClient -> scm_NewSCMClient;
        _scm_GetOrganization -> scm_GetOrganization;
        _scm_GetRepositories -> scm_GetRepositories;
        _scm_RepositoryIsEmpty -> scm_RepositoryIsEmpty;
        _scm_CreateCourse -> scm_CreateCourse;
        _scm_UpdateEnrollment -> scm_UpdateEnrollment;
        _scm_RejectEnrollment -> scm_RejectEnrollment;
        _scm_DemoteTeacherToStudent -> scm_DemoteTeacherToStudent;
        _scm_CreateGroup -> scm_CreateGroup;
        _scm_UpdateGroupMembers -> scm_UpdateGroupMembers;
        _scm_DeleteGroup -> scm_DeleteGroup;

        subgraph cluster_githubv4_go {
            label = "githubv4.go";

            _scm_DeleteIssue [label = "DeleteIssue()";shape = box;];
            _scm_DeleteIssue -> _scm_DeleteIssues;
            _scm_DeleteIssues [label = "DeleteIssues()";shape = box;];
        }
        _scm_DeleteIssue -> scm_DeleteIssue;
        _scm_DeleteIssues -> scm_DeleteIssues;

        subgraph cluster_helper_go {
            label = "helper.go";

            isDirty [label = "isDirty()";];
        }

        subgraph cluster_manager_go {
            label = "manager.go";

            scm_Manager [label = "Manager (Receiver)";];
            scm_Manager -> GetOrCreateSCM;
            scm_Manager -> GetSCM;

            scm_Config [label = "Config (Receiver)";];
            scm_Config -> ExchangeToken;
            scm_Config -> fetchInstallation;

            scm_NewSCMConfig [label = "scm_NewSCMConfig()";shape = box;];
            NewSCMManager [label = "NewSCMManager()";shape = box;];

            GetOrCreateSCM [label = "GetOrCreateSCM()";shape = box;];
            GetSCM [label = "GetSCM()";shape = box;];
        }

        subgraph cluster_scm_errors_go {
            label = "scm_errors.go";

            SCMError [label = "SCMError (Receiver)";];
            SCMError -> SCMError_add;
            SCMError -> SCMError_Error;
            SCMError -> SCMError_Unwrap;
            SCMError -> SCMError_UserError;

            UserError [label = "UserError (Receiver)";];
            UserError -> scm_UserError_Error;
            UserError -> scm_UserError_Unwrap;
            scm_UserError_Error [label = "Error()";shape = box;];
            scm_UserError_Unwrap [label = "Unwrap()";shape = box;];

            UserError_m [label = "m()";shape = box;];
            scm_errors_E [label = "E()";shape = box;];

            SCMError_add [label = "add()";shape = box;];
            SCMError_add -> scm_errors_E;
            SCMError_Error [label = "Error()";shape = box;];
            SCMError_Error -> scm_UserError_Error;
            SCMError_Unwrap [label = "Unwrap()";shape = box;];
            SCMError_UserError [label = "UserError()";shape = box;];
        }

        subgraph cluster_scm_options_go {
            label = "scm_options.go";

            CourseOptions [label = "CourseOptions (Receiver)";];
            CourseOptions -> CourseOptions_valid;
            CourseOptions_valid [label = "valid()";shape = box;];

            UpdateEnrollmentOptions [label = "UpdateEnrollmentOptions (Receiver)";];
            UpdateEnrollmentOptions -> UpdateEnrollmentOptions_valid;
            UpdateEnrollmentOptions_valid [label = "valid()";shape = box;];

            RejectEnrollmentOptions [label = "RejectEnrollmentOptions (Receiver)";];
            RejectEnrollmentOptions -> RejectEnrollmentOptions_valid;
            RejectEnrollmentOptions_valid [label = "valid()";shape = box;];

            OrganizationOptions [label = "OrganizationOptions (Receiver)";];
            OrganizationOptions -> OrganizationOptions_valid;
            OrganizationOptions_valid [label = "valid()";shape = box;];

            RepositoryOptions [label = "RepositoryOptions (Receiver)";];
            RepositoryOptions -> RepositoryOptions_valid;
            RepositoryOptions_valid [label = "valid()";shape = box;];

            CreateRepositoryOptions [label = "CreateRepositoryOptions (Receiver)";];
            CreateRepositoryOptions -> CreateRepositoryOptions_valid;
            CreateRepositoryOptions_valid [label = "valid()";shape = box;];

            GroupOptions [label = "GroupOptions (Receiver)";];
            GroupOptions -> GroupOptions_valid;
            GroupOptions_valid [label = "valid()";shape = box;];

            IssueOptions [label = "IssueOptions (Receiver)";];
            IssueOptions -> IssueOptions_valid;
            IssueOptions_valid [label = "valid()";shape = box;];

            IssueCommentOptions [label = "IssueCommentOptions (Receiver)";];
            IssueCommentOptions -> IssueCommentOptions_valid;
            IssueCommentOptions_valid [label = "valid()";shape = box;];

            RequestReviewersOptions [label = "RequestReviewersOptions (Receiver)";];
            RequestReviewersOptions -> RequestReviewersOptions_valid;
            RequestReviewersOptions_valid [label = "valid()";shape = box;];
        }

        subgraph cluster_scm_go {
            label = "scm.go";

            subgraph cluster_scm_interface {
                label = "scm interface";

                scm_GetOrganization [label = "GetOrganization()";];
                scm_GetRepositories [label = "GetRepositories()";];
                scm_RepositoryIsEmpty [label = "RepositoryIsEmpty()";];
                scm_CreateCourse [label = "CreateCourse()";];
                scm_UpdateEnrollment [label = "UpdateEnrollment()";];
                scm_RejectEnrollment [label = "RejectEnrollment()";];
                scm_DemoteTeacherToStudent [label = "DemoteTeacherToStudent()";];
                scm_CreateGroup [label = "CreateGroup()";];
                scm_UpdateGroupMembers [label = "UpdateGroupMembers()";];
                scm_DeleteGroup [label = "DeleteGroup()";];

                scm_Clone [label = "Clone()";];

                scm_AcceptInvitations [label = "AcceptInvitations()";];

                scm_CreateIssue [label = "CreateIssue()";];
                scm_UpdateIssue [label = "UpdateIssue()";];
                scm_GetIssue [label = "GetIssue()";];
                scm_GetIssues [label = "GetIssues()";];
                scm_DeleteIssue [label = "DeleteIssue()";];
                scm_DeleteIssues [label = "DeleteIssues()";];
                scm_CreateIssueComment [label = "CreateIssueComment()";];
                scm_UpdateIssueComment [label = "UpdateIssueComment()";];
                scm_RequestReviewers [label = "RequestReviewers()";];
            }

            scm_NewSCMClient [label = "scm_NewSCMClient()";shape = box;];
            scm_newSCMAppClient [label = "scm_newSCMAppClient()";shape = box;];
        }
        scm_NewSCMClient -> qcm_getSCMClient;
        scm_newSCMAppClient -> GetOrCreateSCM;
    }
    scm_NewSCMConfig -> main;
    NewSCMManager -> main;

    subgraph cluster_main_go {
        label = "main.go";

        main [label = "main()";shape = box;];
        checkDomain [label = "checkDomain()";shape = box;];
        checkDomain -> main;
    }
}
