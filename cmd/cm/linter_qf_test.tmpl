// Code generated by the cm course management tool. DO NOT EDIT.
// Changes to this file will be overwritten next time the command is run.
// This file was generated for {{ .Lab }}.

package {{ .Package }}

import (
	"fmt"
	"testing"

	"github.com/quickfeed/quickfeed/kit/score"
	"github.com/quickfeed/quickfeed/kit/sh"
)

func init() {
	scores.Add(Test0Formatting, 1, 5)
	scores.Add(Test0TODOItems, 1, 5)
	scores.Add(Test0Lint, 1, 5)
	scores.Add(Test0VetCheck, 1, 5)
}

func Test0Formatting(t *testing.T) {
	sc := scores.Max()
	defer sc.Print(t)

	run(t, sc, "golangci-lint run --tests=false --disable-all --enable gofmt",
		"Formatting checker failed: please configure your editor to format code on save")
}

func Test0TODOItems(t *testing.T) {
	sc := scores.Max()
	defer sc.Print(t)

	run(t, sc, "golangci-lint run --tests=false --disable-all --enable godox",
		"TODO checker failed: TODO comments must be removed when a task has been completed")
}

func Test0Lint(t *testing.T) {
	sc := scores.Max()
	defer sc.Print(t)

	// lint for several Go style issues: possibly too aggressive
	run(t, sc, "golangci-lint run --tests=false --disable unused", "Lint checker failed")
}

func Test0VetCheck(t *testing.T) {
	sc := scores.Max()
	defer sc.Print(t)

	run(t, sc, "go vet ./...", "Vet checker failed")
}

func run(t *testing.T, sc *score.Score, cmd, msg string) {
	s, err := sh.Output(cmd)
	if err != nil {
		t.Error(err)
	}
	if s != "" {
		sc.Dec()
		t.Error(msg)
		fmt.Println(s)
	}
}
