digraph quickfeed {
	subgraph cluster_doc {
		label = "doc (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_doc_urls_go {
			label = "doc-urls.go";
			labelloc="t";
			rankdir=TB;
			doc_DeployURL [label = "DeployURL, Constant";shape = box;];
		}
	}
	subgraph cluster_design_docs {
		label = "design-docs (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_scripts {
		label = "scripts (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_templates {
		label = "templates (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_dotnet_course {
		label = "dotnet-course (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_go_course {
		label = "go-course (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_patch {
		label = "patch (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_go_pb_go {
			label = "go.pb.go";
			labelloc="t";
			rankdir=TB;
			patch_Options [label = "Options, Struct";shape = box;];
			patch_Options -> patch_GetEmbed;
			patch_Options -> patch_GetType;
			patch_Options -> patch_GetGetter;
			patch_Options -> patch_GetTags;
			patch_Options -> patch_GetStringer;
			patch_Options -> patch_GetInitialisms;
			patch_Options -> patch_file_patch_go_proto_rawDescGZIP;
			patch_Options -> patch_;
			patch_Options -> patch_Reset;
			patch_Options -> patch_String;
			patch_Options -> patch_ProtoMessage;
			patch_Options -> patch_ProtoReflect;
			patch_Options -> patch_Descriptor;
			patch_Options -> patch_GetName;
			patch_Embed [label = "Embed, Field";shape = box;];
			patch_Embed -> patch_GetEmbed;
			patch_Getter [label = "Getter, Field";shape = box;];
			patch_Getter -> patch_GetGetter;
			patch_Name [label = "Name, Field";shape = box;];
			patch_Name -> patch_GetName;
			patch_Stringer [label = "Stringer, Field";shape = box;];
			patch_Stringer -> patch_GetStringer;
			patch_StringerName [label = "StringerName, Field";shape = box;];
			patch_StringerName -> patch_GetStringerName;
			patch_Tags [label = "Tags, Field";shape = box;];
			patch_Tags -> patch_GetTags;
			patch_Type [label = "Type, Field";shape = box;];
			patch_Type -> patch_GetType;
			patch_sizeCache [label = "sizeCache, Field";shape = box;];
			patch_state [label = "state, Field";shape = box;];
			patch_unknownFields [label = "unknownFields, Field";shape = box;];
			patch_Reset [label = "Reset, Method";shape = box;];
			patch_String [label = "String, Method";shape = box;];
			patch_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			patch_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			patch_Descriptor [label = "Descriptor, Method";shape = box;];
			patch_GetName [label = "GetName, Method";shape = box;];
			patch_GetEmbed [label = "GetEmbed, Method";shape = box;];
			patch_GetType [label = "GetType, Method";shape = box;];
			patch_GetGetter [label = "GetGetter, Method";shape = box;];
			patch_GetTags [label = "GetTags, Method";shape = box;];
			patch_GetStringer [label = "GetStringer, Method";shape = box;];
			patch_GetStringerName [label = "GetStringerName, Method";shape = box;];
			patch_LintOptions [label = "LintOptions, Struct";shape = box;];
			patch_LintOptions -> patch_GetStringerName;
			patch_LintOptions -> patch_Reset;
			patch_LintOptions -> patch_String;
			patch_LintOptions -> patch_ProtoMessage;
			patch_LintOptions -> patch_ProtoReflect;
			patch_LintOptions -> patch_Descriptor;
			patch_LintOptions -> patch_GetAll;
			patch_LintOptions -> patch_GetMessages;
			patch_LintOptions -> patch_GetFields;
			patch_LintOptions -> patch_GetEnums;
			patch_LintOptions -> patch_GetValues;
			patch_LintOptions -> patch_GetExtensions;
			patch_LintOptions -> patch_GetInitialisms;
			patch_LintOptions -> patch_file_patch_go_proto_rawDescGZIP;
			patch_All [label = "All, Field";shape = box;];
			patch_All -> patch_GetAll;
			patch_Enums [label = "Enums, Field";shape = box;];
			patch_Enums -> patch_GetEnums;
			patch_Extensions [label = "Extensions, Field";shape = box;];
			patch_Extensions -> patch_GetExtensions;
			patch_Fields [label = "Fields, Field";shape = box;];
			patch_Fields -> patch_GetFields;
			patch_Initialisms [label = "Initialisms, Field";shape = box;];
			patch_Initialisms -> patch_GetInitialisms;
			patch_Messages [label = "Messages, Field";shape = box;];
			patch_Messages -> patch_GetMessages;
			patch_Values [label = "Values, Field";shape = box;];
			patch_Values -> patch_GetValues;
			patch_sizeCache [label = "sizeCache, Field";shape = box;];
			patch_state [label = "state, Field";shape = box;];
			patch_unknownFields [label = "unknownFields, Field";shape = box;];
			patch_Reset [label = "Reset, Method";shape = box;];
			patch_String [label = "String, Method";shape = box;];
			patch_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			patch_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			patch_Descriptor [label = "Descriptor, Method";shape = box;];
			patch_GetAll [label = "GetAll, Method";shape = box;];
			patch_GetMessages [label = "GetMessages, Method";shape = box;];
			patch_GetFields [label = "GetFields, Method";shape = box;];
			patch_GetEnums [label = "GetEnums, Method";shape = box;];
			patch_GetValues [label = "GetValues, Method";shape = box;];
			patch_GetExtensions [label = "GetExtensions, Method";shape = box;];
			patch_GetInitialisms [label = "GetInitialisms, Method";shape = box;];
			patch_file_patch_go_proto_extTypes [label = "file_patch_go_proto_extTypes, Variable";shape = box;];
			patch_file_patch_go_proto_extTypes -> patch_GetInitialisms;
			patch_file_patch_go_proto_extTypes -> patch_file_patch_go_proto_init;
			patch_E_Message [label = "E_Message, Variable";shape = box;];
			patch_E_Field [label = "E_Field, Variable";shape = box;];
			patch_E_Oneof [label = "E_Oneof, Variable";shape = box;];
			patch_E_Enum [label = "E_Enum, Variable";shape = box;];
			patch_E_Value [label = "E_Value, Variable";shape = box;];
			patch_E_Lint [label = "E_Lint, Variable";shape = box;];
			patch_File_patch_go_proto [label = "File_patch_go_proto, Variable";shape = box;];
			patch_File_patch_go_proto -> patch_file_patch_go_proto_init;
			patch_file_patch_go_proto_rawDesc [label = "file_patch_go_proto_rawDesc, Variable";shape = box;];
			patch_file_patch_go_proto_rawDesc -> patch_GetInitialisms;
			patch_file_patch_go_proto_rawDesc -> patch_file_patch_go_proto_init;
			patch_file_patch_go_proto_rawDescOnce [label = "file_patch_go_proto_rawDescOnce, Variable";shape = box;];
			patch_file_patch_go_proto_rawDescOnce -> patch_file_patch_go_proto_rawDescGZIP;
			patch_file_patch_go_proto_rawDescData [label = "file_patch_go_proto_rawDescData, Variable";shape = box;];
			patch_file_patch_go_proto_rawDescData -> patch_file_patch_go_proto_rawDescGZIP;
			patch_file_patch_go_proto_rawDescGZIP [label = "file_patch_go_proto_rawDescGZIP, Function";shape = box;];
			patch_file_patch_go_proto_rawDescGZIP -> patch_Descriptor;
			patch_file_patch_go_proto_msgTypes [label = "file_patch_go_proto_msgTypes, Variable";shape = box;];
			patch_file_patch_go_proto_msgTypes -> patch_Reset;
			patch_file_patch_go_proto_msgTypes -> patch_ProtoReflect;
			patch_file_patch_go_proto_msgTypes -> patch_file_patch_go_proto_init;
			patch_file_patch_go_proto_goTypes [label = "file_patch_go_proto_goTypes, Variable";shape = box;];
			patch_file_patch_go_proto_goTypes -> patch_file_patch_go_proto_init;
			patch_file_patch_go_proto_depIdxs [label = "file_patch_go_proto_depIdxs, Variable";shape = box;];
			patch_file_patch_go_proto_depIdxs -> patch_file_patch_go_proto_init;
			patch_init [label = "init, Function";shape = box;];
			patch_file_patch_go_proto_init [label = "file_patch_go_proto_init, Function";shape = box;];
			patch_file_patch_go_proto_init -> patch_file_patch_go_proto_rawDescGZIP;
		}
	}
	subgraph cluster_qf {
		label = "qf (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_assignment_go {
			label = "assignment.go";
			labelloc="t";
			rankdir=TB;
			qf_days [label = "days, Constant";shape = box;];
			qf_SinceDeadline [label = "SinceDeadline, Method";shape = box;];
			qf_WithTimeout [label = "WithTimeout, Method";shape = box;];
			qf_SubmissionStatus [label = "SubmissionStatus, Method";shape = box;];
			qf_CloneWithoutSubmissions [label = "CloneWithoutSubmissions, Method";shape = box;];
			qf_GradedManually [label = "GradedManually, Method";shape = box;];
		}
		qf_days -> qf_UpdateSlipDays;
		qf_SinceDeadline -> qf_UpdateSlipDays;
		qf_SubmissionStatus -> qf_TestSubmissionStatus;
		subgraph cluster_assignment_test_go {
			label = "assignment_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestSubmissionStatus [label = "TestSubmissionStatus, Function";shape = box;];
		}
		subgraph cluster_consts_go {
			label = "consts.go";
			labelloc="t";
			rankdir=TB;
			qf_TimeLayout [label = "TimeLayout, Constant";shape = box;];
		}
		qf_TimeLayout -> qf_TestSlipDays;
		qf_TimeLayout -> qf_TestScoreLimitSlipDays;
		subgraph cluster_course_go {
			label = "course.go";
			labelloc="t";
			rankdir=TB;
			qf_courseDockerfileCache [label = "courseDockerfileCache, Variable";shape = box;];
			qf_courseDockerfileCache -> qf_UpdateDockerfile;
			qf_courseDockerfileCache -> qf_GetDockerfile;
			qf_UpdateDockerfile [label = "UpdateDockerfile, Method";shape = box;];
			qf_GetDockerfile [label = "GetDockerfile, Method";shape = box;];
			qf_DockerImage [label = "DockerImage, Method";shape = box;];
			qf_JobName [label = "JobName, Method";shape = box;];
			qf_digest [label = "digest, Function";shape = box;];
			qf_digest -> qf_UpdateDockerfile;
			qf_CloneDir [label = "CloneDir, Method";shape = box;];
			qf_TeacherEnrollments [label = "TeacherEnrollments, Method";shape = box;];
			qf_PopulateSlipDays [label = "PopulateSlipDays, Method";shape = box;];
			qf_UserIDs [label = "UserIDs, Method";shape = box;];
		}
		qf_UpdateDockerfile -> qf_TestUpdateDockerfile;
		qf_UpdateDockerfile -> qf_TestDockerfileForCourse;
		qf_GetDockerfile -> qf_TestGetDockerfileEmptyCache;
		qf_GetDockerfile -> qf_TestDockerfileForCourse;
		subgraph cluster_course_submissions_go {
			label = "course_submissions.go";
			labelloc="t";
			rankdir=TB;
			qf_For [label = "For, Method";shape = box;];
		}
		qf_For -> qf_TestCountApprovedSubmissions;
		subgraph cluster_course_test_go {
			label = "course_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestGetDockerfileEmptyCache [label = "TestGetDockerfileEmptyCache, Function";shape = box;];
			qf_TestUpdateDockerfile [label = "TestUpdateDockerfile, Function";shape = box;];
			qf_TestDockerfileForCourse [label = "TestDockerfileForCourse, Function";shape = box;];
		}
		subgraph cluster_enrollment_go {
			label = "enrollment.go";
			labelloc="t";
			rankdir=TB;
			qf_gracePeriod [label = "gracePeriod, Constant";shape = box;];
			qf_gracePeriod -> qf_UpdateSlipDays;
			qf_UpdateSlipDays [label = "UpdateSlipDays, Method";shape = box;];
			qf_internalUpdateSlipDays [label = "internalUpdateSlipDays, Method";shape = box;];
			qf_internalUpdateSlipDays -> qf_UpdateSlipDays;
			qf_totalSlipDays [label = "totalSlipDays, Method";shape = box;];
			qf_totalSlipDays -> qf_RemainingSlipDays;
			qf_RemainingSlipDays [label = "RemainingSlipDays, Method";shape = box;];
			qf_RemainingSlipDays -> qf_SetSlipDays;
			qf_SetSlipDays [label = "SetSlipDays, Method";shape = box;];
			qf_IsNone [label = "IsNone, Method";shape = box;];
			qf_IsPending [label = "IsPending, Method";shape = box;];
			qf_IsStudent [label = "IsStudent, Method";shape = box;];
			qf_IsTeacher [label = "IsTeacher, Method";shape = box;];
			qf_IsAdmin [label = "IsAdmin, Method";shape = box;];
			qf_Name [label = "Name, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_HasCourseID [label = "HasCourseID, Method";shape = box;];
			qf_UserIDs [label = "UserIDs, Method";shape = box;];
			qf_CountApprovedSubmissions [label = "CountApprovedSubmissions, Method";shape = box;];
		}
		qf_UpdateSlipDays -> qf_TestSlipDays;
		qf_UpdateSlipDays -> qf_TestScoreLimitSlipDays;
		qf_UpdateSlipDays -> qf_TestMismatchingAssignmentID;
		qf_UpdateSlipDays -> qf_TestMismatchingCourseID;
		qf_UpdateSlipDays -> qf_TestEnrollmentGetUsedSlipDays;
		qf_UpdateSlipDays -> qf_TestSlipDaysWGracePeriod;
		qf_RemainingSlipDays -> qf_TestSlipDays;
		qf_RemainingSlipDays -> qf_TestScoreLimitSlipDays;
		qf_SetSlipDays -> qf_PopulateSlipDays;
		qf_IsTeacher -> qf_TeacherEnrollments;
		qf_GetCourseID -> qf_IDFor;
		qf_HasCourseID -> qf_IsValid;
		qf_CountApprovedSubmissions -> qf_TestCountApprovedSubmissions;
		subgraph cluster_group_go {
			label = "group.go";
			labelloc="t";
			rankdir=TB;
			qf_UserNames [label = "UserNames, Method";shape = box;];
			qf_Contains [label = "Contains, Method";shape = box;];
			qf_ContainsAll [label = "ContainsAll, Method";shape = box;];
			qf_GetUsersExcept [label = "GetUsersExcept, Method";shape = box;];
			qf_UserIDs [label = "UserIDs, Method";shape = box;];
			qf_UserIDs [label = "UserIDs, Method";shape = box;];
		}
		qf_GetUsersExcept -> qf_TestGetUserSubset;
		subgraph cluster_group_test_go {
			label = "group_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestGetUserSubset [label = "TestGetUserSubset, Function";shape = box;];
		}
		subgraph cluster_ids_go {
			label = "ids.go";
			labelloc="t";
			rankdir=TB;
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
			qf_IDFor [label = "IDFor, Method";shape = box;];
		}
		subgraph cluster_pull_request_go {
			label = "pull_request.go";
			labelloc="t";
			rankdir=TB;
			qf_SetApproved [label = "SetApproved, Method";shape = box;];
			qf_SetReview [label = "SetReview, Method";shape = box;];
			qf_SetDraft [label = "SetDraft, Method";shape = box;];
			qf_IsApproved [label = "IsApproved, Method";shape = box;];
			qf_HasReviewers [label = "HasReviewers, Method";shape = box;];
			qf_HasFeedbackComment [label = "HasFeedbackComment, Method";shape = box;];
			qf_Valid [label = "Valid, Method";shape = box;];
		}
		qf_HasFeedbackComment -> qf_TestHasFeedbackComment;
		qf_Valid -> qf_TestIsValid;
		subgraph cluster_pull_request_test_go {
			label = "pull_request_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestIsValid [label = "TestIsValid, Function";shape = box;];
			qf_TestHasFeedbackComment [label = "TestHasFeedbackComment, Function";shape = box;];
		}
		subgraph cluster_quickfeed_pb_go {
			label = "quickfeed.pb.go";
			labelloc="t";
			rankdir=TB;
			qf_File_qf_quickfeed_proto [label = "File_qf_quickfeed_proto, Variable";shape = box;];
			qf_File_qf_quickfeed_proto -> qf_file_qf_quickfeed_proto_init;
			qf_file_qf_quickfeed_proto_rawDesc [label = "file_qf_quickfeed_proto_rawDesc, Variable";shape = box;];
			qf_file_qf_quickfeed_proto_rawDesc -> qf_file_qf_quickfeed_proto_init;
			qf_file_qf_quickfeed_proto_goTypes [label = "file_qf_quickfeed_proto_goTypes, Variable";shape = box;];
			qf_file_qf_quickfeed_proto_goTypes -> qf_file_qf_quickfeed_proto_init;
			qf_file_qf_quickfeed_proto_depIdxs [label = "file_qf_quickfeed_proto_depIdxs, Variable";shape = box;];
			qf_file_qf_quickfeed_proto_depIdxs -> qf_file_qf_quickfeed_proto_init;
			qf_init [label = "init, Function";shape = box;];
			qf_file_qf_quickfeed_proto_init [label = "file_qf_quickfeed_proto_init, Function";shape = box;];
			qf_file_qf_quickfeed_proto_init -> qf_;
		}
		subgraph cluster_remove_remote_id_go {
			label = "remove_remote_id.go";
			labelloc="t";
			rankdir=TB;
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID -> qf_RemoveRemoteID;
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID -> qf_RemoveRemoteID;
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID -> qf_RemoveRemoteID;
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			qf_RemoveRemoteID -> qf_RemoveRemoteID;
			qf_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
		}
		qf_RemoveRemoteID -> qf_TestUserRemoveRemoteID;
		qf_RemoveRemoteID -> qf_TestEnrollmentRemoveRemoteID;
		qf_RemoveRemoteID -> qf_TestGroupRemoveRemoteID;
		subgraph cluster_remove_remote_id_test_go {
			label = "remove_remote_id_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestUserRemoveRemoteID [label = "TestUserRemoveRemoteID, Function";shape = box;];
			qf_TestGroupRemoveRemoteID [label = "TestGroupRemoveRemoteID, Function";shape = box;];
			qf_TestEnrollmentRemoveRemoteID [label = "TestEnrollmentRemoveRemoteID, Function";shape = box;];
			qf_checkUser [label = "checkUser, Function";shape = box;];
			qf_checkUser -> qf_TestUserRemoveRemoteID;
			qf_checkUser -> qf_TestGroupRemoveRemoteID;
			qf_checkUser -> qf_TestEnrollmentRemoveRemoteID;
		}
		subgraph cluster_repo_go {
			label = "repo.go";
			labelloc="t";
			rankdir=TB;
			qf_InfoRepo [label = "InfoRepo, Constant";shape = box;];
			qf_InfoRepo -> qf_RepoType;
			qf_InfoRepo -> qf_InfoRepoURL;
			qf_AssignmentsRepo [label = "AssignmentsRepo, Constant";shape = box;];
			qf_AssignmentsRepo -> qf_RepoType;
			qf_AssignmentsRepo -> qf_AssignmentsRepoURL;
			qf_TestsRepo [label = "TestsRepo, Constant";shape = box;];
			qf_TestsRepo -> qf_RepoType;
			qf_TestsRepo -> qf_TestsRepoURL;
			qf_TestsRepo -> qf_GetTestURL;
			qf_StudentRepoSuffix [label = "StudentRepoSuffix, Constant";shape = box;];
			qf_StudentRepoSuffix -> qf_UserName;
			qf_StudentRepoSuffix -> qf_RepoType;
			qf_StudentRepoSuffix -> qf_StudentRepoName;
			qf_StudentRepoName [label = "StudentRepoName, Function";shape = box;];
			qf_StudentRepoName -> qf_StudentRepoURL;
			qf_RepoURL [label = "RepoURL, Struct";shape = box;];
			qf_RepoURL -> qf_StudentRepoName;
			qf_RepoURL -> qf_InfoRepoURL;
			qf_RepoURL -> qf_AssignmentsRepoURL;
			qf_RepoURL -> qf_StudentRepoURL;
			qf_RepoURL -> qf_GroupRepoURL;
			qf_Organization [label = "Organization, Field";shape = box;];
			qf_Organization -> qf_InfoRepoURL;
			qf_Organization -> qf_AssignmentsRepoURL;
			qf_Organization -> qf_StudentRepoURL;
			qf_Organization -> qf_GroupRepoURL;
			qf_Organization -> qf_TestsRepoURL;
			qf_ProviderURL [label = "ProviderURL, Field";shape = box;];
			qf_ProviderURL -> qf_InfoRepoURL;
			qf_ProviderURL -> qf_AssignmentsRepoURL;
			qf_ProviderURL -> qf_StudentRepoURL;
			qf_ProviderURL -> qf_GroupRepoURL;
			qf_ProviderURL -> qf_TestsRepoURL;
			qf_InfoRepoURL [label = "InfoRepoURL, Method";shape = box;];
			qf_AssignmentsRepoURL [label = "AssignmentsRepoURL, Method";shape = box;];
			qf_StudentRepoURL [label = "StudentRepoURL, Method";shape = box;];
			qf_GroupRepoURL [label = "GroupRepoURL, Method";shape = box;];
			qf_TestsRepoURL [label = "TestsRepoURL, Method";shape = box;];
			qf_IsCourseRepo [label = "IsCourseRepo, Method";shape = box;];
			qf_IsUserRepo [label = "IsUserRepo, Method";shape = box;];
			qf_IsGroupRepo [label = "IsGroupRepo, Method";shape = box;];
			qf_IsTestsRepo [label = "IsTestsRepo, Method";shape = box;];
			qf_IsAssignmentsRepo [label = "IsAssignmentsRepo, Method";shape = box;];
			qf_IsStudentRepo [label = "IsStudentRepo, Method";shape = box;];
			qf_IsStudentRepo [label = "IsStudentRepo, Method";shape = box;];
			qf_IsGroupRepo [label = "IsGroupRepo, Method";shape = box;];
			qf_IsUserRepo [label = "IsUserRepo, Method";shape = box;];
			qf_GetTestURL [label = "GetTestURL, Method";shape = box;];
			qf_Name [label = "Name, Method";shape = box;];
			qf_Name -> qf_UserName;
			qf_UserName [label = "UserName, Method";shape = box;];
			qf_RepoType [label = "RepoType, Function";shape = box;];
		}
		qf_TestsRepo -> qf_TestGetTestURL;
		qf_StudentRepoName -> qf_TestUserName;
		qf_GetTestURL -> qf_TestGetTestURL;
		qf_Name -> qf_TestName;
		qf_UserName -> qf_TestUserName;
		subgraph cluster_repo_test_go {
			label = "repo_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestGetTestURL [label = "TestGetTestURL, Function";shape = box;];
			qf_TestName [label = "TestName, Function";shape = box;];
			qf_TestUserName [label = "TestUserName, Function";shape = box;];
		}
		subgraph cluster_requests_pb_go {
			label = "requests.pb.go";
			labelloc="t";
			rankdir=TB;
			qf_SubmissionRequest_SubmissionType [label = "SubmissionRequest_SubmissionType, Class";shape = box;];
			qf_SubmissionRequest_SubmissionType -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_SubmissionRequest_SubmissionType -> qf_;
			qf_SubmissionRequest_SubmissionType -> qf_Enum;
			qf_SubmissionRequest_SubmissionType -> qf_GetSubmissionID;
			qf_SubmissionRequest_SubmissionType -> qf_isSubmissionRequest_FetchMode;
			qf_SubmissionRequest_SubmissionType -> qf_String;
			qf_SubmissionRequest_SubmissionType -> qf_Descriptor;
			qf_SubmissionRequest_SubmissionType -> qf_Type;
			qf_SubmissionRequest_SubmissionType -> qf_Number;
			qf_SubmissionRequest_ALL [label = "SubmissionRequest_ALL, Constant";shape = box;];
			qf_SubmissionRequest_ALL -> qf_GetType;
			qf_SubmissionRequest_USER [label = "SubmissionRequest_USER, Constant";shape = box;];
			qf_SubmissionRequest_GROUP [label = "SubmissionRequest_GROUP, Constant";shape = box;];
			qf_SubmissionRequest_SubmissionType_name [label = "SubmissionRequest_SubmissionType_name, Variable";shape = box;];
			qf_SubmissionRequest_SubmissionType_value [label = "SubmissionRequest_SubmissionType_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_CourseSubmissions [label = "CourseSubmissions, Struct";shape = box;];
			qf_CourseSubmissions -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_CourseSubmissions -> qf_ProtoReflect;
			qf_CourseSubmissions -> qf_file_qf_requests_proto_init;
			qf_CourseSubmissions -> qf_Descriptor;
			qf_CourseSubmissions -> qf_EnumDescriptor;
			qf_CourseSubmissions -> qf_Reset;
			qf_CourseSubmissions -> qf_String;
			qf_CourseSubmissions -> qf_ProtoMessage;
			qf_Submissions [label = "Submissions, Field";shape = box;];
			qf_Submissions -> qf_GetSubmissions;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qf_ReviewRequest [label = "ReviewRequest, Struct";shape = box;];
			qf_ReviewRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_ReviewRequest -> qf_file_qf_requests_proto_init;
			qf_ReviewRequest -> qf_GetSubmissions;
			qf_ReviewRequest -> qf_Reset;
			qf_ReviewRequest -> qf_String;
			qf_ReviewRequest -> qf_ProtoMessage;
			qf_ReviewRequest -> qf_ProtoReflect;
			qf_ReviewRequest -> qf_Descriptor;
			qf_ReviewRequest -> qf_GetCourseID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Review [label = "Review, Field";shape = box;];
			qf_Review -> qf_GetReview;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetReview [label = "GetReview, Method";shape = box;];
			qf_CourseRequest [label = "CourseRequest, Struct";shape = box;];
			qf_CourseRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_CourseRequest -> qf_file_qf_requests_proto_init;
			qf_CourseRequest -> qf_GetReview;
			qf_CourseRequest -> qf_Reset;
			qf_CourseRequest -> qf_String;
			qf_CourseRequest -> qf_ProtoMessage;
			qf_CourseRequest -> qf_ProtoReflect;
			qf_CourseRequest -> qf_Descriptor;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GroupRequest [label = "GroupRequest, Struct";shape = box;];
			qf_GroupRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_GroupRequest -> qf_file_qf_requests_proto_init;
			qf_GroupRequest -> qf_GetCourseID;
			qf_GroupRequest -> qf_Reset;
			qf_GroupRequest -> qf_String;
			qf_GroupRequest -> qf_ProtoMessage;
			qf_GroupRequest -> qf_ProtoReflect;
			qf_GroupRequest -> qf_Descriptor;
			qf_GroupRequest -> qf_GetUserID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_Organization [label = "Organization, Struct";shape = box;];
			qf_Organization -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_Organization -> qf_file_qf_requests_proto_init;
			qf_Organization -> qf_GetGroupID;
			qf_Organization -> qf_Reset;
			qf_Organization -> qf_String;
			qf_Organization -> qf_ProtoMessage;
			qf_Organization -> qf_ProtoReflect;
			qf_Organization -> qf_Descriptor;
			qf_Organization -> qf_GetScmOrganizationID;
			qf_ScmOrganizationID [label = "ScmOrganizationID, Field";shape = box;];
			qf_ScmOrganizationID -> qf_GetScmOrganizationID;
			qf_ScmOrganizationName [label = "ScmOrganizationName, Field";shape = box;];
			qf_ScmOrganizationName -> qf_GetScmOrganizationName;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetScmOrganizationID [label = "GetScmOrganizationID, Method";shape = box;];
			qf_GetScmOrganizationName [label = "GetScmOrganizationName, Method";shape = box;];
			qf_EnrollmentRequest [label = "EnrollmentRequest, Struct";shape = box;];
			qf_EnrollmentRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_EnrollmentRequest -> qf_file_qf_requests_proto_init;
			qf_EnrollmentRequest -> qf_GetScmOrganizationName;
			qf_EnrollmentRequest -> qf_Reset;
			qf_EnrollmentRequest -> qf_String;
			qf_EnrollmentRequest -> qf_ProtoMessage;
			qf_EnrollmentRequest -> qf_ProtoReflect;
			qf_EnrollmentRequest -> qf_Descriptor;
			qf_EnrollmentRequest -> qf_GetFetchMode;
			qf_EnrollmentRequest -> qf_GetCourseID;
			qf_EnrollmentRequest -> qf_GetUserID;
			qf_FetchMode [label = "FetchMode, Field";shape = box;];
			qf_FetchMode -> qf_GetFetchMode;
			qf_Statuses [label = "Statuses, Field";shape = box;];
			qf_Statuses -> qf_GetStatuses;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetFetchMode [label = "GetFetchMode, Method";shape = box;];
			qf_GetFetchMode -> qf_GetCourseID;
			qf_GetFetchMode -> qf_GetUserID;
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetStatuses [label = "GetStatuses, Method";shape = box;];
			qf_isEnrollmentRequest_FetchMode [label = "isEnrollmentRequest_FetchMode, Interface";shape = box;];
			qf_isEnrollmentRequest_FetchMode -> qf_GetScmOrganizationName;
			qf_isEnrollmentRequest_FetchMode -> qf_Descriptor;
			qf_isEnrollmentRequest_FetchMode [label = "isEnrollmentRequest_FetchMode, Method";shape = box;];
			qf_EnrollmentRequest_CourseID [label = "EnrollmentRequest_CourseID, Struct";shape = box;];
			qf_EnrollmentRequest_CourseID -> qf_file_qf_requests_proto_init;
			qf_EnrollmentRequest_CourseID -> qf_GetCourseID;
			qf_EnrollmentRequest_CourseID -> qf_isEnrollmentRequest_FetchMode;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_EnrollmentRequest_UserID [label = "EnrollmentRequest_UserID, Struct";shape = box;];
			qf_EnrollmentRequest_UserID -> qf_file_qf_requests_proto_init;
			qf_EnrollmentRequest_UserID -> qf_GetUserID;
			qf_EnrollmentRequest_UserID -> qf_isEnrollmentRequest_FetchMode;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_isEnrollmentRequest_FetchMode [label = "isEnrollmentRequest_FetchMode, Method";shape = box;];
			qf_isEnrollmentRequest_FetchMode [label = "isEnrollmentRequest_FetchMode, Method";shape = box;];
			qf_SubmissionRequest [label = "SubmissionRequest, Struct";shape = box;];
			qf_SubmissionRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_SubmissionRequest -> qf_file_qf_requests_proto_init;
			qf_SubmissionRequest -> qf_isEnrollmentRequest_FetchMode;
			qf_SubmissionRequest -> qf_Reset;
			qf_SubmissionRequest -> qf_String;
			qf_SubmissionRequest -> qf_ProtoMessage;
			qf_SubmissionRequest -> qf_ProtoReflect;
			qf_SubmissionRequest -> qf_Descriptor;
			qf_SubmissionRequest -> qf_GetCourseID;
			qf_SubmissionRequest -> qf_GetAssignmentID;
			qf_SubmissionRequest -> qf_GetFetchMode;
			qf_SubmissionRequest -> qf_GetUserID;
			qf_SubmissionRequest -> qf_GetGroupID;
			qf_SubmissionRequest -> qf_GetSubmissionID;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_FetchMode [label = "FetchMode, Field";shape = box;];
			qf_FetchMode -> qf_GetFetchMode;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetFetchMode [label = "GetFetchMode, Method";shape = box;];
			qf_GetFetchMode -> qf_GetUserID;
			qf_GetFetchMode -> qf_GetGroupID;
			qf_GetFetchMode -> qf_GetSubmissionID;
			qf_GetFetchMode -> qf_GetType;
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			qf_GetType [label = "GetType, Method";shape = box;];
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Interface";shape = box;];
			qf_isSubmissionRequest_FetchMode -> qf_isEnrollmentRequest_FetchMode;
			qf_isSubmissionRequest_FetchMode -> qf_GetAssignmentID;
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Method";shape = box;];
			qf_SubmissionRequest_UserID [label = "SubmissionRequest_UserID, Struct";shape = box;];
			qf_SubmissionRequest_UserID -> qf_file_qf_requests_proto_init;
			qf_SubmissionRequest_UserID -> qf_GetUserID;
			qf_SubmissionRequest_UserID -> qf_isSubmissionRequest_FetchMode;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_SubmissionRequest_GroupID [label = "SubmissionRequest_GroupID, Struct";shape = box;];
			qf_SubmissionRequest_GroupID -> qf_file_qf_requests_proto_init;
			qf_SubmissionRequest_GroupID -> qf_GetGroupID;
			qf_SubmissionRequest_GroupID -> qf_isSubmissionRequest_FetchMode;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_SubmissionRequest_SubmissionID [label = "SubmissionRequest_SubmissionID, Struct";shape = box;];
			qf_SubmissionRequest_SubmissionID -> qf_file_qf_requests_proto_init;
			qf_SubmissionRequest_SubmissionID -> qf_GetSubmissionID;
			qf_SubmissionRequest_SubmissionID -> qf_isSubmissionRequest_FetchMode;
			qf_SubmissionID [label = "SubmissionID, Field";shape = box;];
			qf_SubmissionID -> qf_GetSubmissionID;
			qf_SubmissionRequest_Type [label = "SubmissionRequest_Type, Struct";shape = box;];
			qf_SubmissionRequest_Type -> qf_file_qf_requests_proto_init;
			qf_SubmissionRequest_Type -> qf_GetType;
			qf_SubmissionRequest_Type -> qf_isSubmissionRequest_FetchMode;
			qf_Type [label = "Type, Field";shape = box;];
			qf_Type -> qf_GetType;
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Method";shape = box;];
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Method";shape = box;];
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Method";shape = box;];
			qf_isSubmissionRequest_FetchMode [label = "isSubmissionRequest_FetchMode, Method";shape = box;];
			qf_UpdateSubmissionRequest [label = "UpdateSubmissionRequest, Struct";shape = box;];
			qf_UpdateSubmissionRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_UpdateSubmissionRequest -> qf_file_qf_requests_proto_init;
			qf_UpdateSubmissionRequest -> qf_isSubmissionRequest_FetchMode;
			qf_UpdateSubmissionRequest -> qf_Reset;
			qf_UpdateSubmissionRequest -> qf_String;
			qf_UpdateSubmissionRequest -> qf_ProtoMessage;
			qf_UpdateSubmissionRequest -> qf_ProtoReflect;
			qf_UpdateSubmissionRequest -> qf_Descriptor;
			qf_UpdateSubmissionRequest -> qf_GetSubmissionID;
			qf_UpdateSubmissionRequest -> qf_GetCourseID;
			qf_UpdateSubmissionRequest -> qf_GetScore;
			qf_UpdateSubmissionRequest -> qf_GetReleased;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Grades [label = "Grades, Field";shape = box;];
			qf_Grades -> qf_GetGrades;
			qf_Released [label = "Released, Field";shape = box;];
			qf_Released -> qf_GetReleased;
			qf_Score [label = "Score, Field";shape = box;];
			qf_Score -> qf_GetScore;
			qf_SubmissionID [label = "SubmissionID, Field";shape = box;];
			qf_SubmissionID -> qf_GetSubmissionID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetScore [label = "GetScore, Method";shape = box;];
			qf_GetReleased [label = "GetReleased, Method";shape = box;];
			qf_GetGrades [label = "GetGrades, Method";shape = box;];
			qf_UpdateSubmissionsRequest [label = "UpdateSubmissionsRequest, Struct";shape = box;];
			qf_UpdateSubmissionsRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_UpdateSubmissionsRequest -> qf_file_qf_requests_proto_init;
			qf_UpdateSubmissionsRequest -> qf_GetGrades;
			qf_UpdateSubmissionsRequest -> qf_Reset;
			qf_UpdateSubmissionsRequest -> qf_String;
			qf_UpdateSubmissionsRequest -> qf_ProtoMessage;
			qf_UpdateSubmissionsRequest -> qf_ProtoReflect;
			qf_UpdateSubmissionsRequest -> qf_Descriptor;
			qf_UpdateSubmissionsRequest -> qf_GetCourseID;
			qf_UpdateSubmissionsRequest -> qf_GetAssignmentID;
			qf_UpdateSubmissionsRequest -> qf_GetScoreLimit;
			qf_UpdateSubmissionsRequest -> qf_GetRelease;
			qf_Approve [label = "Approve, Field";shape = box;];
			qf_Approve -> qf_GetApprove;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Release [label = "Release, Field";shape = box;];
			qf_Release -> qf_GetRelease;
			qf_ScoreLimit [label = "ScoreLimit, Field";shape = box;];
			qf_ScoreLimit -> qf_GetScoreLimit;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetScoreLimit [label = "GetScoreLimit, Method";shape = box;];
			qf_GetRelease [label = "GetRelease, Method";shape = box;];
			qf_GetApprove [label = "GetApprove, Method";shape = box;];
			qf_RepositoryRequest [label = "RepositoryRequest, Struct";shape = box;];
			qf_RepositoryRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_RepositoryRequest -> qf_file_qf_requests_proto_init;
			qf_RepositoryRequest -> qf_GetApprove;
			qf_RepositoryRequest -> qf_Reset;
			qf_RepositoryRequest -> qf_String;
			qf_RepositoryRequest -> qf_ProtoMessage;
			qf_RepositoryRequest -> qf_ProtoReflect;
			qf_RepositoryRequest -> qf_Descriptor;
			qf_RepositoryRequest -> qf_GetUserID;
			qf_RepositoryRequest -> qf_GetGroupID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_Repositories [label = "Repositories, Struct";shape = box;];
			qf_Repositories -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_Repositories -> qf_file_qf_requests_proto_init;
			qf_Repositories -> qf_GetCourseID;
			qf_Repositories -> qf_Reset;
			qf_Repositories -> qf_String;
			qf_Repositories -> qf_ProtoMessage;
			qf_Repositories -> qf_ProtoReflect;
			qf_Repositories -> qf_Descriptor;
			qf_URLs [label = "URLs, Field";shape = box;];
			qf_URLs -> qf_GetURLs;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetURLs [label = "GetURLs, Method";shape = box;];
			qf_RebuildRequest [label = "RebuildRequest, Struct";shape = box;];
			qf_RebuildRequest -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_RebuildRequest -> qf_file_qf_requests_proto_init;
			qf_RebuildRequest -> qf_GetURLs;
			qf_RebuildRequest -> qf_Reset;
			qf_RebuildRequest -> qf_String;
			qf_RebuildRequest -> qf_ProtoMessage;
			qf_RebuildRequest -> qf_ProtoReflect;
			qf_RebuildRequest -> qf_Descriptor;
			qf_RebuildRequest -> qf_GetCourseID;
			qf_RebuildRequest -> qf_GetAssignmentID;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_SubmissionID [label = "SubmissionID, Field";shape = box;];
			qf_SubmissionID -> qf_GetSubmissionID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			qf_Void [label = "Void, Struct";shape = box;];
			qf_Void -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_Void -> qf_file_qf_requests_proto_init;
			qf_Void -> qf_GetSubmissionID;
			qf_Void -> qf_Reset;
			qf_Void -> qf_String;
			qf_Void -> qf_ProtoMessage;
			qf_Void -> qf_ProtoReflect;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_requests_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_requests_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_requests_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_File_qf_requests_proto [label = "File_qf_requests_proto, Variable";shape = box;];
			qf_File_qf_requests_proto -> qf_file_qf_requests_proto_init;
			qf_file_qf_requests_proto_rawDesc [label = "file_qf_requests_proto_rawDesc, Variable";shape = box;];
			qf_file_qf_requests_proto_rawDesc -> qf_Descriptor;
			qf_file_qf_requests_proto_rawDesc -> qf_file_qf_requests_proto_init;
			qf_file_qf_requests_proto_rawDescOnce [label = "file_qf_requests_proto_rawDescOnce, Variable";shape = box;];
			qf_file_qf_requests_proto_rawDescOnce -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_file_qf_requests_proto_rawDescData [label = "file_qf_requests_proto_rawDescData, Variable";shape = box;];
			qf_file_qf_requests_proto_rawDescData -> qf_file_qf_requests_proto_rawDescGZIP;
			qf_file_qf_requests_proto_rawDescGZIP [label = "file_qf_requests_proto_rawDescGZIP, Function";shape = box;];
			qf_file_qf_requests_proto_rawDescGZIP -> qf_Descriptor;
			qf_file_qf_requests_proto_rawDescGZIP -> qf_EnumDescriptor;
			qf_file_qf_requests_proto_enumTypes [label = "file_qf_requests_proto_enumTypes, Variable";shape = box;];
			qf_file_qf_requests_proto_enumTypes -> qf_file_qf_requests_proto_init;
			qf_file_qf_requests_proto_enumTypes -> qf_Descriptor;
			qf_file_qf_requests_proto_enumTypes -> qf_Type;
			qf_file_qf_requests_proto_msgTypes [label = "file_qf_requests_proto_msgTypes, Variable";shape = box;];
			qf_file_qf_requests_proto_msgTypes -> qf_file_qf_requests_proto_init;
			qf_file_qf_requests_proto_msgTypes -> qf_Reset;
			qf_file_qf_requests_proto_msgTypes -> qf_ProtoReflect;
			qf_file_qf_requests_proto_goTypes [label = "file_qf_requests_proto_goTypes, Variable";shape = box;];
			qf_file_qf_requests_proto_goTypes -> qf_file_qf_requests_proto_init;
			qf_file_qf_requests_proto_depIdxs [label = "file_qf_requests_proto_depIdxs, Variable";shape = box;];
			qf_file_qf_requests_proto_depIdxs -> qf_file_qf_requests_proto_init;
			qf_init [label = "init, Function";shape = box;];
			qf_file_qf_requests_proto_init [label = "file_qf_requests_proto_init, Function";shape = box;];
			qf_file_qf_requests_proto_init -> qf_file_qf_requests_proto_rawDescGZIP;
		}
		qf_CourseSubmissions -> qf_;
		qf_CourseSubmissions -> qf_TestCountApprovedSubmissions;
		qf_Submissions -> qf_TestCountApprovedSubmissions;
		qf_GetSubmissions -> qf_For;
		qf_ReviewRequest -> qf_IDFor;
		qf_ReviewRequest -> qf_;
		qf_ReviewRequest -> qf_IsValid;
		qf_CourseID -> qf_IsValid;
		qf_Review -> qf_IsValid;
		qf_GetCourseID -> qf_IDFor;
		qf_CourseRequest -> qf_IDFor;
		qf_CourseRequest -> qf_;
		qf_CourseRequest -> qf_IsValid;
		qf_GetCourseID -> qf_IsValid;
		qf_GroupRequest -> qf_UserIDs;
		qf_GroupRequest -> qf_IDFor;
		qf_GroupRequest -> qf_;
		qf_GroupRequest -> qf_IsValid;
		qf_GetUserID -> qf_IDFor;
		qf_GetUserID -> qf_IsValid;
		qf_GetGroupID -> qf_IDFor;
		qf_GetGroupID -> qf_IsValid;
		qf_Organization -> qf_IDFor;
		qf_Organization -> qf_;
		qf_Organization -> qf_IsValid;
		qf_GetScmOrganizationName -> qf_IsValid;
		qf_EnrollmentRequest -> qf_IDFor;
		qf_EnrollmentRequest -> qf_;
		qf_EnrollmentRequest -> qf_IsValid;
		qf_GetFetchMode -> qf_IsValid;
		qf_EnrollmentRequest_CourseID -> qf_IsValid;
		qf_EnrollmentRequest_UserID -> qf_IsValid;
		qf_SubmissionRequest -> qf_IDFor;
		qf_SubmissionRequest -> qf_;
		qf_SubmissionRequest -> qf_IsValid;
		qf_GetSubmissionID -> qf_IDFor;
		qf_GetSubmissionID -> qf_IsValid;
		qf_SubmissionRequest_UserID -> qf_IsValid;
		qf_SubmissionRequest_GroupID -> qf_IsValid;
		qf_SubmissionRequest_SubmissionID -> qf_IsValid;
		qf_UpdateSubmissionRequest -> qf_IDFor;
		qf_UpdateSubmissionRequest -> qf_;
		qf_UpdateSubmissionRequest -> qf_IsValid;
		qf_UpdateSubmissionsRequest -> qf_IDFor;
		qf_UpdateSubmissionsRequest -> qf_;
		qf_RepositoryRequest -> qf_IDFor;
		qf_RepositoryRequest -> qf_;
		qf_RepositoryRequest -> qf_IsValid;
		qf_Repositories -> qf_;
		qf_RebuildRequest -> qf_IDFor;
		qf_RebuildRequest -> qf_;
		qf_RebuildRequest -> qf_IsValid;
		qf_GetAssignmentID -> qf_IsValid;
		qf_Void -> qf_;
		qf_file_qf_requests_proto_init -> qf_file_qf_quickfeed_proto_init;
		subgraph cluster_review_go {
			label = "review.go";
			labelloc="t";
			rankdir=TB;
			qf_ComputeScore [label = "ComputeScore, Method";shape = box;];
		}
		qf_ComputeScore -> qf_TestComputeScore;
		subgraph cluster_review_test_go {
			label = "review_test.go";
			labelloc="t";
			rankdir=TB;
			qf_reviewScoreTests [label = "reviewScoreTests, Variable";shape = box;];
			qf_reviewScoreTests -> qf_TestComputeScore;
			qf_TestComputeScore [label = "TestComputeScore, Function";shape = box;];
		}
		subgraph cluster_slipdays_test_go {
			label = "slipdays_test.go";
			labelloc="t";
			rankdir=TB;
			qf_days [label = "days, Constant";shape = box;];
			qf_days -> qf_TestSlipDays;
			qf_days -> qf_TestMismatchingAssignmentID;
			qf_days -> qf_TestMismatchingCourseID;
			qf_days -> qf_;
			qf_days -> qf_TestSlipDaysWGracePeriod;
			qf_testNow [label = "testNow, Variable";shape = box;];
			qf_testNow -> qf_TestSlipDays;
			qf_testNow -> qf_TestScoreLimitSlipDays;
			qf_testNow -> qf_TestMismatchingAssignmentID;
			qf_testNow -> qf_TestMismatchingCourseID;
			qf_testNow -> qf_TestEnrollmentGetUsedSlipDays;
			qf_testNow -> qf_;
			qf_course [label = "course, Variable";shape = box;];
			qf_course -> qf_TestSlipDays;
			qf_course -> qf_TestScoreLimitSlipDays;
			qf_course -> qf_TestMismatchingAssignmentID;
			qf_course -> qf_TestMismatchingCourseID;
			qf_course -> qf_TestEnrollmentGetUsedSlipDays;
			qf_course -> qf_;
			qf_course -> qf_TestSlipDaysWGracePeriod;
			qf_a [label = "a, Variable";shape = box;];
			qf_a -> qf_TestScoreLimitSlipDays;
			qf_a -> qf_TestEnrollmentGetUsedSlipDays;
			qf_a -> qf_TestSlipDaysWGracePeriod;
			qf_a -> qf_;
			qf_slipTests [label = "slipTests, Variable";shape = box;];
			qf_slipTests -> qf_TestSlipDays;
			qf_TestSlipDays [label = "TestSlipDays, Function";shape = box;];
			qf_TestScoreLimitSlipDays [label = "TestScoreLimitSlipDays, Function";shape = box;];
			qf_TestMismatchingAssignmentID [label = "TestMismatchingAssignmentID, Function";shape = box;];
			qf_TestMismatchingCourseID [label = "TestMismatchingCourseID, Function";shape = box;];
			qf_TestEnrollmentGetUsedSlipDays [label = "TestEnrollmentGetUsedSlipDays, Function";shape = box;];
			qf_TestSlipDaysWGracePeriod [label = "TestSlipDaysWGracePeriod, Function";shape = box;];
		}
		subgraph cluster_submission_go {
			label = "submission.go";
			labelloc="t";
			rankdir=TB;
			qf_IsApproved [label = "IsApproved, Method";shape = box;];
			qf_IsAllApproved [label = "IsAllApproved, Method";shape = box;];
			qf_GetStatuses [label = "GetStatuses, Method";shape = box;];
			qf_GetStatusByUser [label = "GetStatusByUser, Method";shape = box;];
			qf_GetStatusByUser -> qf_BeforeCreate;
			qf_GetStatusByUser -> qf_Clean;
			qf_SetGrade [label = "SetGrade, Method";shape = box;];
			qf_SetGradeAll [label = "SetGradeAll, Method";shape = box;];
			qf_NewestSubmissionDate [label = "NewestSubmissionDate, Method";shape = box;];
			qf_ByUser [label = "ByUser, Method";shape = box;];
			qf_ByGroup [label = "ByGroup, Method";shape = box;];
			qf_Clean [label = "Clean, Method";shape = box;];
			qf_BeforeCreate [label = "BeforeCreate, Method";shape = box;];
		}
		qf_IsApproved -> qf_CountApprovedSubmissions;
		qf_IsApproved -> qf_UpdateSlipDays;
		qf_SetGradeAll -> qf_SubmissionStatus;
		qf_NewestSubmissionDate -> qf_CountApprovedSubmissions;
		qf_NewestSubmissionDate -> qf_TestNewestSubmissionDate;
		qf_ByUser -> qf_TestByUser;
		qf_ByGroup -> qf_TestByGroup;
		subgraph cluster_submission_test_go {
			label = "submission_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestNewestSubmissionDate [label = "TestNewestSubmissionDate, Function";shape = box;];
			qf_TestByUser [label = "TestByUser, Function";shape = box;];
			qf_TestByGroup [label = "TestByGroup, Function";shape = box;];
			qf_TestCountApprovedSubmissions [label = "TestCountApprovedSubmissions, Function";shape = box;];
		}
		subgraph cluster_task_go {
			label = "task.go";
			labelloc="t";
			rankdir=TB;
			qf_deleteMsg [label = "deleteMsg, Constant";shape = box;];
			qf_deleteMsg -> qf_MarkDeleted;
			qf_deleted [label = "deleted, Constant";shape = box;];
			qf_deleted -> qf_MarkDeleted;
			qf_deleted -> qf_IsDeleted;
			qf_HasChanged [label = "HasChanged, Method";shape = box;];
			qf_MarkDeleted [label = "MarkDeleted, Method";shape = box;];
			qf_IsDeleted [label = "IsDeleted, Method";shape = box;];
		}
		qf_HasChanged -> qf_TestHasChanged;
		qf_MarkDeleted -> qf_TestMarkDeleted;
		qf_IsDeleted -> qf_TestMarkDeleted;
		subgraph cluster_task_test_go {
			label = "task_test.go";
			labelloc="t";
			rankdir=TB;
			qf_TestHasChanged [label = "TestHasChanged, Function";shape = box;];
			qf_TestMarkDeleted [label = "TestMarkDeleted, Function";shape = box;];
		}
		subgraph cluster_types_pb_go {
			label = "types.pb.go";
			labelloc="t";
			rankdir=TB;
			qf_Group_GroupStatus [label = "Group_GroupStatus, Class";shape = box;];
			qf_Group_GroupStatus -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Group_GroupStatus -> qf_;
			qf_Group_GroupStatus -> qf_Enum;
			qf_Group_GroupStatus -> qf_String;
			qf_Group_GroupStatus -> qf_GetUsers;
			qf_Group_GroupStatus -> qf_Descriptor;
			qf_Group_GroupStatus -> qf_GetCourseID;
			qf_Group_GroupStatus -> qf_Type;
			qf_Group_GroupStatus -> qf_Number;
			qf_Group_PENDING [label = "Group_PENDING, Constant";shape = box;];
			qf_Group_PENDING -> qf_GetStatus;
			qf_Group_APPROVED [label = "Group_APPROVED, Constant";shape = box;];
			qf_Group_GroupStatus_name [label = "Group_GroupStatus_name, Variable";shape = box;];
			qf_Group_GroupStatus_value [label = "Group_GroupStatus_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_Repository_Type [label = "Repository_Type, Class";shape = box;];
			qf_Repository_Type -> qf_EnumDescriptor;
			qf_Repository_Type -> qf_Enum;
			qf_Repository_Type -> qf_String;
			qf_Repository_Type -> qf_Descriptor;
			qf_Repository_Type -> qf_Type;
			qf_Repository_Type -> qf_Number;
			qf_Repository_Type -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Repository_Type -> qf_GetCourses;
			qf_Repository_Type -> qf_GetHTMLURL;
			qf_Repository_NONE [label = "Repository_NONE, Constant";shape = box;];
			qf_Repository_NONE -> qf_GetRepoType;
			qf_Repository_INFO [label = "Repository_INFO, Constant";shape = box;];
			qf_Repository_ASSIGNMENTS [label = "Repository_ASSIGNMENTS, Constant";shape = box;];
			qf_Repository_TESTS [label = "Repository_TESTS, Constant";shape = box;];
			qf_Repository_USER [label = "Repository_USER, Constant";shape = box;];
			qf_Repository_GROUP [label = "Repository_GROUP, Constant";shape = box;];
			qf_Repository_Type_name [label = "Repository_Type_name, Variable";shape = box;];
			qf_Repository_Type_value [label = "Repository_Type_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_Enrollment_UserStatus [label = "Enrollment_UserStatus, Class";shape = box;];
			qf_Enrollment_UserStatus -> qf_GetIssues;
			qf_Enrollment_UserStatus -> qf_GetGroup;
			qf_Enrollment_UserStatus -> qf_EnumDescriptor;
			qf_Enrollment_UserStatus -> qf_Enum;
			qf_Enrollment_UserStatus -> qf_String;
			qf_Enrollment_UserStatus -> qf_Descriptor;
			qf_Enrollment_UserStatus -> qf_Type;
			qf_Enrollment_UserStatus -> qf_Number;
			qf_Enrollment_UserStatus -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Enrollment_UserStatus -> qf_GetGroups;
			qf_Enrollment_UserStatus -> qf_GetDockerfileDigest;
			qf_Enrollment_NONE [label = "Enrollment_NONE, Constant";shape = box;];
			qf_Enrollment_NONE -> qf_GetStatus;
			qf_Enrollment_NONE -> qf_GetEnrolled;
			qf_Enrollment_PENDING [label = "Enrollment_PENDING, Constant";shape = box;];
			qf_Enrollment_STUDENT [label = "Enrollment_STUDENT, Constant";shape = box;];
			qf_Enrollment_TEACHER [label = "Enrollment_TEACHER, Constant";shape = box;];
			qf_Enrollment_UserStatus_name [label = "Enrollment_UserStatus_name, Variable";shape = box;];
			qf_Enrollment_UserStatus_value [label = "Enrollment_UserStatus_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_Enrollment_DisplayState [label = "Enrollment_DisplayState, Class";shape = box;];
			qf_Enrollment_DisplayState -> qf_GetIssues;
			qf_Enrollment_DisplayState -> qf_GetStatus;
			qf_Enrollment_DisplayState -> qf_EnumDescriptor;
			qf_Enrollment_DisplayState -> qf_Enum;
			qf_Enrollment_DisplayState -> qf_String;
			qf_Enrollment_DisplayState -> qf_Descriptor;
			qf_Enrollment_DisplayState -> qf_Type;
			qf_Enrollment_DisplayState -> qf_Number;
			qf_Enrollment_DisplayState -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Enrollment_UNSET [label = "Enrollment_UNSET, Constant";shape = box;];
			qf_Enrollment_UNSET -> qf_GetState;
			qf_Enrollment_HIDDEN [label = "Enrollment_HIDDEN, Constant";shape = box;];
			qf_Enrollment_VISIBLE [label = "Enrollment_VISIBLE, Constant";shape = box;];
			qf_Enrollment_FAVORITE [label = "Enrollment_FAVORITE, Constant";shape = box;];
			qf_Enrollment_DisplayState_name [label = "Enrollment_DisplayState_name, Variable";shape = box;];
			qf_Enrollment_DisplayState_value [label = "Enrollment_DisplayState_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_PullRequest_Stage [label = "PullRequest_Stage, Class";shape = box;];
			qf_PullRequest_Stage -> qf_GetScmIssueNumber;
			qf_PullRequest_Stage -> qf_GetNumber;
			qf_PullRequest_Stage -> qf_EnumDescriptor;
			qf_PullRequest_Stage -> qf_Enum;
			qf_PullRequest_Stage -> qf_String;
			qf_PullRequest_Stage -> qf_file_qf_types_proto_rawDescGZIP;
			qf_PullRequest_Stage -> qf_Descriptor;
			qf_PullRequest_Stage -> qf_Type;
			qf_PullRequest_Stage -> qf_Number;
			qf_PullRequest_NONE [label = "PullRequest_NONE, Constant";shape = box;];
			qf_PullRequest_NONE -> qf_GetStage;
			qf_PullRequest_DRAFT [label = "PullRequest_DRAFT, Constant";shape = box;];
			qf_PullRequest_REVIEW [label = "PullRequest_REVIEW, Constant";shape = box;];
			qf_PullRequest_APPROVED [label = "PullRequest_APPROVED, Constant";shape = box;];
			qf_PullRequest_Stage_name [label = "PullRequest_Stage_name, Variable";shape = box;];
			qf_PullRequest_Stage_value [label = "PullRequest_Stage_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_Submission_Status [label = "Submission_Status, Class";shape = box;];
			qf_Submission_Status -> qf_GetSubmissions;
			qf_Submission_Status -> qf_GetUserID;
			qf_Submission_Status -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Submission_Status -> qf_EnumDescriptor;
			qf_Submission_Status -> qf_Enum;
			qf_Submission_Status -> qf_String;
			qf_Submission_Status -> qf_Descriptor;
			qf_Submission_Status -> qf_Type;
			qf_Submission_Status -> qf_Number;
			qf_Submission_NONE [label = "Submission_NONE, Constant";shape = box;];
			qf_Submission_NONE -> qf_GetStatus;
			qf_Submission_APPROVED [label = "Submission_APPROVED, Constant";shape = box;];
			qf_Submission_REJECTED [label = "Submission_REJECTED, Constant";shape = box;];
			qf_Submission_REVISION [label = "Submission_REVISION, Constant";shape = box;];
			qf_Submission_Status_name [label = "Submission_Status_name, Variable";shape = box;];
			qf_Submission_Status_value [label = "Submission_Status_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_GradingCriterion_Grade [label = "GradingCriterion_Grade, Class";shape = box;];
			qf_GradingCriterion_Grade -> qf_GetBenchmarks;
			qf_GradingCriterion_Grade -> qf_GetDescription;
			qf_GradingCriterion_Grade -> qf_file_qf_types_proto_rawDescGZIP;
			qf_GradingCriterion_Grade -> qf_EnumDescriptor;
			qf_GradingCriterion_Grade -> qf_Enum;
			qf_GradingCriterion_Grade -> qf_String;
			qf_GradingCriterion_Grade -> qf_Descriptor;
			qf_GradingCriterion_Grade -> qf_Type;
			qf_GradingCriterion_Grade -> qf_Number;
			qf_GradingCriterion_NONE [label = "GradingCriterion_NONE, Constant";shape = box;];
			qf_GradingCriterion_NONE -> qf_GetGrade;
			qf_GradingCriterion_FAILED [label = "GradingCriterion_FAILED, Constant";shape = box;];
			qf_GradingCriterion_PASSED [label = "GradingCriterion_PASSED, Constant";shape = box;];
			qf_GradingCriterion_Grade_name [label = "GradingCriterion_Grade_name, Variable";shape = box;];
			qf_GradingCriterion_Grade_value [label = "GradingCriterion_Grade_value, Variable";shape = box;];
			qf_Enum [label = "Enum, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_Descriptor -> qf_String;
			qf_Type [label = "Type, Method";shape = box;];
			qf_Number [label = "Number, Method";shape = box;];
			qf_EnumDescriptor [label = "EnumDescriptor, Method";shape = box;];
			qf_User [label = "User, Struct";shape = box;];
			qf_User -> qf_GetIssues;
			qf_User -> qf_GetGroupID;
			qf_User -> qf_file_qf_types_proto_rawDescGZIP;
			qf_User -> qf_file_qf_types_proto_init;
			qf_User -> qf_EnumDescriptor;
			qf_User -> qf_Reset;
			qf_User -> qf_String;
			qf_User -> qf_ProtoMessage;
			qf_User -> qf_ProtoReflect;
			qf_User -> qf_Descriptor;
			qf_User -> qf_GetID;
			qf_User -> qf_GetIsAdmin;
			qf_User -> qf_GetName;
			qf_User -> qf_GetStudentID;
			qf_User -> qf_GetEmail;
			qf_User -> qf_GetAvatarURL;
			qf_User -> qf_GetLogin;
			qf_User -> qf_GetUpdateToken;
			qf_User -> qf_GetScmRemoteID;
			qf_User -> qf_GetRefreshToken;
			qf_User -> qf_GetEnrollments;
			qf_User -> qf_GetUsers;
			qf_User -> qf_GetStatus;
			qf_AvatarURL [label = "AvatarURL, Field";shape = box;];
			qf_AvatarURL -> qf_GetAvatarURL;
			qf_Email [label = "Email, Field";shape = box;];
			qf_Email -> qf_GetEmail;
			qf_Enrollments [label = "Enrollments, Field";shape = box;];
			qf_Enrollments -> qf_GetEnrollments;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_IsAdmin [label = "IsAdmin, Field";shape = box;];
			qf_IsAdmin -> qf_GetIsAdmin;
			qf_Login [label = "Login, Field";shape = box;];
			qf_Login -> qf_GetLogin;
			qf_Name [label = "Name, Field";shape = box;];
			qf_Name -> qf_GetName;
			qf_RefreshToken [label = "RefreshToken, Field";shape = box;];
			qf_RefreshToken -> qf_GetRefreshToken;
			qf_ScmRemoteID [label = "ScmRemoteID, Field";shape = box;];
			qf_ScmRemoteID -> qf_GetScmRemoteID;
			qf_StudentID [label = "StudentID, Field";shape = box;];
			qf_StudentID -> qf_GetStudentID;
			qf_UpdateToken [label = "UpdateToken, Field";shape = box;];
			qf_UpdateToken -> qf_GetUpdateToken;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetIsAdmin [label = "GetIsAdmin, Method";shape = box;];
			qf_GetName [label = "GetName, Method";shape = box;];
			qf_GetStudentID [label = "GetStudentID, Method";shape = box;];
			qf_GetEmail [label = "GetEmail, Method";shape = box;];
			qf_GetAvatarURL [label = "GetAvatarURL, Method";shape = box;];
			qf_GetLogin [label = "GetLogin, Method";shape = box;];
			qf_GetUpdateToken [label = "GetUpdateToken, Method";shape = box;];
			qf_GetScmRemoteID [label = "GetScmRemoteID, Method";shape = box;];
			qf_GetRefreshToken [label = "GetRefreshToken, Method";shape = box;];
			qf_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qf_Users [label = "Users, Struct";shape = box;];
			qf_Users -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Users -> qf_file_qf_types_proto_init;
			qf_Users -> qf_GetEnrollments;
			qf_Users -> qf_Reset;
			qf_Users -> qf_String;
			qf_Users -> qf_ProtoMessage;
			qf_Users -> qf_ProtoReflect;
			qf_Users -> qf_Descriptor;
			qf_Users [label = "Users, Field";shape = box;];
			qf_Users -> qf_GetUsers;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetUsers [label = "GetUsers, Method";shape = box;];
			qf_Group [label = "Group, Struct";shape = box;];
			qf_Group -> qf_GetIssues;
			qf_Group -> qf_GetCourse;
			qf_Group -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Group -> qf_file_qf_types_proto_init;
			qf_Group -> qf_GetUsers;
			qf_Group -> qf_Reset;
			qf_Group -> qf_String;
			qf_Group -> qf_ProtoMessage;
			qf_Group -> qf_ProtoReflect;
			qf_Group -> qf_Descriptor;
			qf_Group -> qf_GetID;
			qf_Group -> qf_GetName;
			qf_Group -> qf_GetCourseID;
			qf_Group -> qf_GetStatus;
			qf_Group -> qf_GetEnrollments;
			qf_Group -> qf_GetGroups;
			qf_Group -> qf_GetAssignments;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Enrollments [label = "Enrollments, Field";shape = box;];
			qf_Enrollments -> qf_GetEnrollments;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Name [label = "Name, Field";shape = box;];
			qf_Name -> qf_GetName;
			qf_Status [label = "Status, Field";shape = box;];
			qf_Status -> qf_GetStatus;
			qf_Users [label = "Users, Field";shape = box;];
			qf_Users -> qf_GetUsers;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetName [label = "GetName, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetStatus [label = "GetStatus, Method";shape = box;];
			qf_GetUsers [label = "GetUsers, Method";shape = box;];
			qf_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qf_Groups [label = "Groups, Struct";shape = box;];
			qf_Groups -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Groups -> qf_file_qf_types_proto_init;
			qf_Groups -> qf_GetEnrollments;
			qf_Groups -> qf_Reset;
			qf_Groups -> qf_String;
			qf_Groups -> qf_ProtoMessage;
			qf_Groups -> qf_ProtoReflect;
			qf_Groups -> qf_Descriptor;
			qf_Groups [label = "Groups, Field";shape = box;];
			qf_Groups -> qf_GetGroups;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetGroups [label = "GetGroups, Method";shape = box;];
			qf_Course [label = "Course, Struct";shape = box;];
			qf_Course -> qf_GetIssues;
			qf_Course -> qf_GetUser;
			qf_Course -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Course -> qf_file_qf_types_proto_init;
			qf_Course -> qf_GetGroups;
			qf_Course -> qf_Reset;
			qf_Course -> qf_String;
			qf_Course -> qf_ProtoMessage;
			qf_Course -> qf_ProtoReflect;
			qf_Course -> qf_Descriptor;
			qf_Course -> qf_GetID;
			qf_Course -> qf_GetCourseCreatorID;
			qf_Course -> qf_GetName;
			qf_Course -> qf_GetCode;
			qf_Course -> qf_GetYear;
			qf_Course -> qf_GetTag;
			qf_Course -> qf_GetScmOrganizationID;
			qf_Course -> qf_GetScmOrganizationName;
			qf_Course -> qf_GetSlipDays;
			qf_Course -> qf_GetDockerfileDigest;
			qf_Course -> qf_GetEnrolled;
			qf_Course -> qf_GetEnrollments;
			qf_Course -> qf_GetAssignments;
			qf_Assignments [label = "Assignments, Field";shape = box;];
			qf_Assignments -> qf_GetAssignments;
			qf_Code [label = "Code, Field";shape = box;];
			qf_Code -> qf_GetCode;
			qf_CourseCreatorID [label = "CourseCreatorID, Field";shape = box;];
			qf_CourseCreatorID -> qf_GetCourseCreatorID;
			qf_DockerfileDigest [label = "DockerfileDigest, Field";shape = box;];
			qf_DockerfileDigest -> qf_GetDockerfileDigest;
			qf_Enrolled [label = "Enrolled, Field";shape = box;];
			qf_Enrolled -> qf_GetEnrolled;
			qf_Enrollments [label = "Enrollments, Field";shape = box;];
			qf_Enrollments -> qf_GetEnrollments;
			qf_Groups [label = "Groups, Field";shape = box;];
			qf_Groups -> qf_GetGroups;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Name [label = "Name, Field";shape = box;];
			qf_Name -> qf_GetName;
			qf_ScmOrganizationID [label = "ScmOrganizationID, Field";shape = box;];
			qf_ScmOrganizationID -> qf_GetScmOrganizationID;
			qf_ScmOrganizationName [label = "ScmOrganizationName, Field";shape = box;];
			qf_ScmOrganizationName -> qf_GetScmOrganizationName;
			qf_SlipDays [label = "SlipDays, Field";shape = box;];
			qf_SlipDays -> qf_GetSlipDays;
			qf_Tag [label = "Tag, Field";shape = box;];
			qf_Tag -> qf_GetTag;
			qf_Year [label = "Year, Field";shape = box;];
			qf_Year -> qf_GetYear;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetCourseCreatorID [label = "GetCourseCreatorID, Method";shape = box;];
			qf_GetName [label = "GetName, Method";shape = box;];
			qf_GetCode [label = "GetCode, Method";shape = box;];
			qf_GetYear [label = "GetYear, Method";shape = box;];
			qf_GetTag [label = "GetTag, Method";shape = box;];
			qf_GetScmOrganizationID [label = "GetScmOrganizationID, Method";shape = box;];
			qf_GetScmOrganizationName [label = "GetScmOrganizationName, Method";shape = box;];
			qf_GetSlipDays [label = "GetSlipDays, Method";shape = box;];
			qf_GetDockerfileDigest [label = "GetDockerfileDigest, Method";shape = box;];
			qf_GetEnrolled [label = "GetEnrolled, Method";shape = box;];
			qf_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qf_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qf_GetGroups [label = "GetGroups, Method";shape = box;];
			qf_Courses [label = "Courses, Struct";shape = box;];
			qf_Courses -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Courses -> qf_file_qf_types_proto_init;
			qf_Courses -> qf_GetGroups;
			qf_Courses -> qf_Reset;
			qf_Courses -> qf_String;
			qf_Courses -> qf_ProtoMessage;
			qf_Courses -> qf_ProtoReflect;
			qf_Courses -> qf_Descriptor;
			qf_Courses [label = "Courses, Field";shape = box;];
			qf_Courses -> qf_GetCourses;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetCourses [label = "GetCourses, Method";shape = box;];
			qf_Repository [label = "Repository, Struct";shape = box;];
			qf_Repository -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Repository -> qf_file_qf_types_proto_init;
			qf_Repository -> qf_GetCourses;
			qf_Repository -> qf_Reset;
			qf_Repository -> qf_String;
			qf_Repository -> qf_ProtoMessage;
			qf_Repository -> qf_ProtoReflect;
			qf_Repository -> qf_Descriptor;
			qf_Repository -> qf_GetID;
			qf_Repository -> qf_GetScmOrganizationID;
			qf_Repository -> qf_GetScmRepositoryID;
			qf_Repository -> qf_GetUserID;
			qf_Repository -> qf_GetGroupID;
			qf_Repository -> qf_GetHTMLURL;
			qf_Repository -> qf_GetRepoType;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_HTMLURL [label = "HTMLURL, Field";shape = box;];
			qf_HTMLURL -> qf_GetHTMLURL;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Issues [label = "Issues, Field";shape = box;];
			qf_Issues -> qf_GetIssues;
			qf_RepoType [label = "RepoType, Field";shape = box;];
			qf_RepoType -> qf_GetRepoType;
			qf_ScmOrganizationID [label = "ScmOrganizationID, Field";shape = box;];
			qf_ScmOrganizationID -> qf_GetScmOrganizationID;
			qf_ScmRepositoryID [label = "ScmRepositoryID, Field";shape = box;];
			qf_ScmRepositoryID -> qf_GetScmRepositoryID;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetScmOrganizationID [label = "GetScmOrganizationID, Method";shape = box;];
			qf_GetScmRepositoryID [label = "GetScmRepositoryID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_GetHTMLURL [label = "GetHTMLURL, Method";shape = box;];
			qf_GetRepoType [label = "GetRepoType, Method";shape = box;];
			qf_GetIssues [label = "GetIssues, Method";shape = box;];
			qf_Enrollment [label = "Enrollment, Struct";shape = box;];
			qf_Enrollment -> qf_GetIssues;
			qf_Enrollment -> qf_Reset;
			qf_Enrollment -> qf_String;
			qf_Enrollment -> qf_ProtoMessage;
			qf_Enrollment -> qf_ProtoReflect;
			qf_Enrollment -> qf_Descriptor;
			qf_Enrollment -> qf_GetID;
			qf_Enrollment -> qf_GetCourseID;
			qf_Enrollment -> qf_GetUserID;
			qf_Enrollment -> qf_GetGroupID;
			qf_Enrollment -> qf_GetUser;
			qf_Enrollment -> qf_GetCourse;
			qf_Enrollment -> qf_GetGroup;
			qf_Enrollment -> qf_GetStatus;
			qf_Enrollment -> qf_GetState;
			qf_Enrollment -> qf_GetSlipDaysRemaining;
			qf_Enrollment -> qf_GetLastActivityDate;
			qf_Enrollment -> qf_GetTotalApproved;
			qf_Enrollment -> qf_GetUsedDays;
			qf_Enrollment -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Enrollment -> qf_file_qf_types_proto_init;
			qf_Enrollment -> qf_EnumDescriptor;
			qf_Enrollment -> qf_GetRefreshToken;
			qf_Enrollment -> qf_GetUsers;
			qf_Enrollment -> qf_GetGroups;
			qf_Enrollment -> qf_GetEnrolled;
			qf_Course [label = "Course, Field";shape = box;];
			qf_Course -> qf_GetCourse;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Group [label = "Group, Field";shape = box;];
			qf_Group -> qf_GetGroup;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_LastActivityDate [label = "LastActivityDate, Field";shape = box;];
			qf_LastActivityDate -> qf_GetLastActivityDate;
			qf_SlipDaysRemaining [label = "SlipDaysRemaining, Field";shape = box;];
			qf_SlipDaysRemaining -> qf_GetSlipDaysRemaining;
			qf_State [label = "State, Field";shape = box;];
			qf_State -> qf_GetState;
			qf_Status [label = "Status, Field";shape = box;];
			qf_Status -> qf_GetStatus;
			qf_TotalApproved [label = "TotalApproved, Field";shape = box;];
			qf_TotalApproved -> qf_GetTotalApproved;
			qf_UsedSlipDays [label = "UsedSlipDays, Field";shape = box;];
			qf_UsedSlipDays -> qf_GetUsedSlipDays;
			qf_User [label = "User, Field";shape = box;];
			qf_User -> qf_GetUser;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_GetUser [label = "GetUser, Method";shape = box;];
			qf_GetCourse [label = "GetCourse, Method";shape = box;];
			qf_GetGroup [label = "GetGroup, Method";shape = box;];
			qf_GetStatus [label = "GetStatus, Method";shape = box;];
			qf_GetState [label = "GetState, Method";shape = box;];
			qf_GetSlipDaysRemaining [label = "GetSlipDaysRemaining, Method";shape = box;];
			qf_GetLastActivityDate [label = "GetLastActivityDate, Method";shape = box;];
			qf_GetTotalApproved [label = "GetTotalApproved, Method";shape = box;];
			qf_GetUsedSlipDays [label = "GetUsedSlipDays, Method";shape = box;];
			qf_UsedSlipDays [label = "UsedSlipDays, Struct";shape = box;];
			qf_UsedSlipDays -> qf_GetIssues;
			qf_UsedSlipDays -> qf_GetTotalApproved;
			qf_UsedSlipDays -> qf_GetUsedSlipDays;
			qf_UsedSlipDays -> qf_Reset;
			qf_UsedSlipDays -> qf_String;
			qf_UsedSlipDays -> qf_ProtoMessage;
			qf_UsedSlipDays -> qf_ProtoReflect;
			qf_UsedSlipDays -> qf_Descriptor;
			qf_UsedSlipDays -> qf_GetID;
			qf_UsedSlipDays -> qf_GetEnrollmentID;
			qf_UsedSlipDays -> qf_GetAssignmentID;
			qf_UsedSlipDays -> qf_file_qf_types_proto_rawDescGZIP;
			qf_UsedSlipDays -> qf_file_qf_types_proto_init;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_EnrollmentID [label = "EnrollmentID, Field";shape = box;];
			qf_EnrollmentID -> qf_GetEnrollmentID;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_UsedDays [label = "UsedDays, Field";shape = box;];
			qf_UsedDays -> qf_GetUsedDays;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetEnrollmentID [label = "GetEnrollmentID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetUsedDays [label = "GetUsedDays, Method";shape = box;];
			qf_Enrollments [label = "Enrollments, Struct";shape = box;];
			qf_Enrollments -> qf_GetUsedDays;
			qf_Enrollments -> qf_Reset;
			qf_Enrollments -> qf_String;
			qf_Enrollments -> qf_ProtoMessage;
			qf_Enrollments -> qf_ProtoReflect;
			qf_Enrollments -> qf_Descriptor;
			qf_Enrollments -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Enrollments -> qf_file_qf_types_proto_init;
			qf_Enrollments [label = "Enrollments, Field";shape = box;];
			qf_Enrollments -> qf_GetEnrollments;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qf_Assignment [label = "Assignment, Struct";shape = box;];
			qf_Assignment -> qf_GetEnrollments;
			qf_Assignment -> qf_Reset;
			qf_Assignment -> qf_String;
			qf_Assignment -> qf_ProtoMessage;
			qf_Assignment -> qf_ProtoReflect;
			qf_Assignment -> qf_Descriptor;
			qf_Assignment -> qf_GetID;
			qf_Assignment -> qf_GetCourseID;
			qf_Assignment -> qf_GetName;
			qf_Assignment -> qf_GetDeadline;
			qf_Assignment -> qf_GetAutoApprove;
			qf_Assignment -> qf_GetOrder;
			qf_Assignment -> qf_GetIsGroupLab;
			qf_Assignment -> qf_GetScoreLimit;
			qf_Assignment -> qf_GetReviewers;
			qf_Assignment -> qf_GetContainerTimeout;
			qf_Assignment -> qf_GetSubmissions;
			qf_Assignment -> qf_GetTasks;
			qf_Assignment -> qf_GetStage;
			qf_Assignment -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Assignment -> qf_file_qf_types_proto_init;
			qf_Assignment -> qf_GetGroups;
			qf_AutoApprove [label = "AutoApprove, Field";shape = box;];
			qf_AutoApprove -> qf_GetAutoApprove;
			qf_ContainerTimeout [label = "ContainerTimeout, Field";shape = box;];
			qf_ContainerTimeout -> qf_GetContainerTimeout;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Deadline [label = "Deadline, Field";shape = box;];
			qf_Deadline -> qf_GetDeadline;
			qf_GradingBenchmarks [label = "GradingBenchmarks, Field";shape = box;];
			qf_GradingBenchmarks -> qf_GetGradingBenchmarks;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_IsGroupLab [label = "IsGroupLab, Field";shape = box;];
			qf_IsGroupLab -> qf_GetIsGroupLab;
			qf_Name [label = "Name, Field";shape = box;];
			qf_Name -> qf_GetName;
			qf_Order [label = "Order, Field";shape = box;];
			qf_Order -> qf_GetOrder;
			qf_Reviewers [label = "Reviewers, Field";shape = box;];
			qf_Reviewers -> qf_GetReviewers;
			qf_ScoreLimit [label = "ScoreLimit, Field";shape = box;];
			qf_ScoreLimit -> qf_GetScoreLimit;
			qf_Submissions [label = "Submissions, Field";shape = box;];
			qf_Submissions -> qf_GetSubmissions;
			qf_Tasks [label = "Tasks, Field";shape = box;];
			qf_Tasks -> qf_GetTasks;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetName [label = "GetName, Method";shape = box;];
			qf_GetDeadline [label = "GetDeadline, Method";shape = box;];
			qf_GetAutoApprove [label = "GetAutoApprove, Method";shape = box;];
			qf_GetOrder [label = "GetOrder, Method";shape = box;];
			qf_GetIsGroupLab [label = "GetIsGroupLab, Method";shape = box;];
			qf_GetScoreLimit [label = "GetScoreLimit, Method";shape = box;];
			qf_GetReviewers [label = "GetReviewers, Method";shape = box;];
			qf_GetContainerTimeout [label = "GetContainerTimeout, Method";shape = box;];
			qf_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qf_GetTasks [label = "GetTasks, Method";shape = box;];
			qf_GetGradingBenchmarks [label = "GetGradingBenchmarks, Method";shape = box;];
			qf_Task [label = "Task, Struct";shape = box;];
			qf_Task -> qf_GetEnrollments;
			qf_Task -> qf_GetSubmissions;
			qf_Task -> qf_GetGradingBenchmarks;
			qf_Task -> qf_Reset;
			qf_Task -> qf_String;
			qf_Task -> qf_ProtoMessage;
			qf_Task -> qf_ProtoReflect;
			qf_Task -> qf_Descriptor;
			qf_Task -> qf_GetID;
			qf_Task -> qf_GetAssignmentID;
			qf_Task -> qf_GetAssignmentOrder;
			qf_Task -> qf_GetTitle;
			qf_Task -> qf_GetBody;
			qf_Task -> qf_GetName;
			qf_Task -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Task -> qf_file_qf_types_proto_init;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_AssignmentOrder [label = "AssignmentOrder, Field";shape = box;];
			qf_AssignmentOrder -> qf_GetAssignmentOrder;
			qf_Body [label = "Body, Field";shape = box;];
			qf_Body -> qf_GetBody;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Issues [label = "Issues, Field";shape = box;];
			qf_Issues -> qf_GetIssues;
			qf_Name [label = "Name, Field";shape = box;];
			qf_Name -> qf_GetName;
			qf_Title [label = "Title, Field";shape = box;];
			qf_Title -> qf_GetTitle;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetAssignmentOrder [label = "GetAssignmentOrder, Method";shape = box;];
			qf_GetTitle [label = "GetTitle, Method";shape = box;];
			qf_GetBody [label = "GetBody, Method";shape = box;];
			qf_GetName [label = "GetName, Method";shape = box;];
			qf_GetIssues [label = "GetIssues, Method";shape = box;];
			qf_Issue [label = "Issue, Struct";shape = box;];
			qf_Issue -> qf_GetGradingBenchmarks;
			qf_Issue -> qf_GetName;
			qf_Issue -> qf_GetIssues;
			qf_Issue -> qf_Reset;
			qf_Issue -> qf_String;
			qf_Issue -> qf_ProtoMessage;
			qf_Issue -> qf_ProtoReflect;
			qf_Issue -> qf_Descriptor;
			qf_Issue -> qf_GetID;
			qf_Issue -> qf_GetRepositoryID;
			qf_Issue -> qf_GetTaskID;
			qf_Issue -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Issue -> qf_file_qf_types_proto_init;
			qf_Issue -> qf_GetCourses;
			qf_Issue -> qf_GetRepoType;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_RepositoryID [label = "RepositoryID, Field";shape = box;];
			qf_RepositoryID -> qf_GetRepositoryID;
			qf_ScmIssueNumber [label = "ScmIssueNumber, Field";shape = box;];
			qf_ScmIssueNumber -> qf_GetScmIssueNumber;
			qf_TaskID [label = "TaskID, Field";shape = box;];
			qf_TaskID -> qf_GetTaskID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetRepositoryID [label = "GetRepositoryID, Method";shape = box;];
			qf_GetTaskID [label = "GetTaskID, Method";shape = box;];
			qf_GetScmIssueNumber [label = "GetScmIssueNumber, Method";shape = box;];
			qf_PullRequest [label = "PullRequest, Struct";shape = box;];
			qf_PullRequest -> qf_GetScmIssueNumber;
			qf_PullRequest -> qf_Reset;
			qf_PullRequest -> qf_String;
			qf_PullRequest -> qf_ProtoMessage;
			qf_PullRequest -> qf_ProtoReflect;
			qf_PullRequest -> qf_Descriptor;
			qf_PullRequest -> qf_GetID;
			qf_PullRequest -> qf_GetScmRepositoryID;
			qf_PullRequest -> qf_GetTaskID;
			qf_PullRequest -> qf_GetIssueID;
			qf_PullRequest -> qf_GetUserID;
			qf_PullRequest -> qf_GetScmCommentID;
			qf_PullRequest -> qf_GetSourceBranch;
			qf_PullRequest -> qf_GetNumber;
			qf_PullRequest -> qf_file_qf_types_proto_rawDescGZIP;
			qf_PullRequest -> qf_file_qf_types_proto_init;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_IssueID [label = "IssueID, Field";shape = box;];
			qf_IssueID -> qf_GetIssueID;
			qf_Number [label = "Number, Field";shape = box;];
			qf_Number -> qf_GetNumber;
			qf_ScmCommentID [label = "ScmCommentID, Field";shape = box;];
			qf_ScmCommentID -> qf_GetScmCommentID;
			qf_ScmRepositoryID [label = "ScmRepositoryID, Field";shape = box;];
			qf_ScmRepositoryID -> qf_GetScmRepositoryID;
			qf_SourceBranch [label = "SourceBranch, Field";shape = box;];
			qf_SourceBranch -> qf_GetSourceBranch;
			qf_Stage [label = "Stage, Field";shape = box;];
			qf_Stage -> qf_GetStage;
			qf_TaskID [label = "TaskID, Field";shape = box;];
			qf_TaskID -> qf_GetTaskID;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetScmRepositoryID [label = "GetScmRepositoryID, Method";shape = box;];
			qf_GetTaskID [label = "GetTaskID, Method";shape = box;];
			qf_GetIssueID [label = "GetIssueID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetScmCommentID [label = "GetScmCommentID, Method";shape = box;];
			qf_GetSourceBranch [label = "GetSourceBranch, Method";shape = box;];
			qf_GetNumber [label = "GetNumber, Method";shape = box;];
			qf_GetStage [label = "GetStage, Method";shape = box;];
			qf_Assignments [label = "Assignments, Struct";shape = box;];
			qf_Assignments -> qf_GetStage;
			qf_Assignments -> qf_Reset;
			qf_Assignments -> qf_String;
			qf_Assignments -> qf_ProtoMessage;
			qf_Assignments -> qf_ProtoReflect;
			qf_Assignments -> qf_Descriptor;
			qf_Assignments -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Assignments -> qf_file_qf_types_proto_init;
			qf_Assignments [label = "Assignments, Field";shape = box;];
			qf_Assignments -> qf_GetAssignments;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qf_Submission [label = "Submission, Struct";shape = box;];
			qf_Submission -> qf_GetEnrollments;
			qf_Submission -> qf_GetContainerTimeout;
			qf_Submission -> qf_GetAssignments;
			qf_Submission -> qf_Reset;
			qf_Submission -> qf_String;
			qf_Submission -> qf_ProtoMessage;
			qf_Submission -> qf_ProtoReflect;
			qf_Submission -> qf_Descriptor;
			qf_Submission -> qf_GetID;
			qf_Submission -> qf_GetAssignmentID;
			qf_Submission -> qf_GetUserID;
			qf_Submission -> qf_GetGroupID;
			qf_Submission -> qf_GetScore;
			qf_Submission -> qf_GetCommitHash;
			qf_Submission -> qf_GetReleased;
			qf_Submission -> qf_GetGrades;
			qf_Submission -> qf_GetApprovedDate;
			qf_Submission -> qf_GetReviews;
			qf_Submission -> qf_GetBuildInfo;
			qf_Submission -> qf_GetScores;
			qf_Submission -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Submission -> qf_file_qf_types_proto_init;
			qf_ApprovedDate [label = "ApprovedDate, Field";shape = box;];
			qf_ApprovedDate -> qf_GetApprovedDate;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_BuildInfo [label = "BuildInfo, Field";shape = box;];
			qf_BuildInfo -> qf_GetBuildInfo;
			qf_CommitHash [label = "CommitHash, Field";shape = box;];
			qf_CommitHash -> qf_GetCommitHash;
			qf_Grades [label = "Grades, Field";shape = box;];
			qf_Grades -> qf_GetGrades;
			qf_GroupID [label = "GroupID, Field";shape = box;];
			qf_GroupID -> qf_GetGroupID;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Released [label = "Released, Field";shape = box;];
			qf_Released -> qf_GetReleased;
			qf_Reviews [label = "Reviews, Field";shape = box;];
			qf_Reviews -> qf_GetReviews;
			qf_Score [label = "Score, Field";shape = box;];
			qf_Score -> qf_GetScore;
			qf_Scores [label = "Scores, Field";shape = box;];
			qf_Scores -> qf_GetScores;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetGroupID [label = "GetGroupID, Method";shape = box;];
			qf_GetScore [label = "GetScore, Method";shape = box;];
			qf_GetCommitHash [label = "GetCommitHash, Method";shape = box;];
			qf_GetReleased [label = "GetReleased, Method";shape = box;];
			qf_GetGrades [label = "GetGrades, Method";shape = box;];
			qf_GetApprovedDate [label = "GetApprovedDate, Method";shape = box;];
			qf_GetReviews [label = "GetReviews, Method";shape = box;];
			qf_GetBuildInfo [label = "GetBuildInfo, Method";shape = box;];
			qf_GetScores [label = "GetScores, Method";shape = box;];
			qf_Submissions [label = "Submissions, Struct";shape = box;];
			qf_Submissions -> qf_GetScores;
			qf_Submissions -> qf_Reset;
			qf_Submissions -> qf_String;
			qf_Submissions -> qf_ProtoMessage;
			qf_Submissions -> qf_ProtoReflect;
			qf_Submissions -> qf_Descriptor;
			qf_Submissions -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Submissions -> qf_file_qf_types_proto_init;
			qf_Submissions [label = "Submissions, Field";shape = box;];
			qf_Submissions -> qf_GetSubmissions;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qf_Grade [label = "Grade, Struct";shape = box;];
			qf_Grade -> qf_GetAssignments;
			qf_Grade -> qf_GetReleased;
			qf_Grade -> qf_GetSubmissions;
			qf_Grade -> qf_Reset;
			qf_Grade -> qf_String;
			qf_Grade -> qf_ProtoMessage;
			qf_Grade -> qf_ProtoReflect;
			qf_Grade -> qf_Descriptor;
			qf_Grade -> qf_GetSubmissionID;
			qf_Grade -> qf_GetUserID;
			qf_Grade -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Grade -> qf_file_qf_types_proto_init;
			qf_Status [label = "Status, Field";shape = box;];
			qf_Status -> qf_GetStatus;
			qf_SubmissionID [label = "SubmissionID, Field";shape = box;];
			qf_SubmissionID -> qf_GetSubmissionID;
			qf_UserID [label = "UserID, Field";shape = box;];
			qf_UserID -> qf_GetUserID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			qf_GetUserID [label = "GetUserID, Method";shape = box;];
			qf_GetStatus [label = "GetStatus, Method";shape = box;];
			qf_GradingBenchmark [label = "GradingBenchmark, Struct";shape = box;];
			qf_GradingBenchmark -> qf_GetEnrollments;
			qf_GradingBenchmark -> qf_GetTasks;
			qf_GradingBenchmark -> qf_GetStatus;
			qf_GradingBenchmark -> qf_Reset;
			qf_GradingBenchmark -> qf_String;
			qf_GradingBenchmark -> qf_ProtoMessage;
			qf_GradingBenchmark -> qf_ProtoReflect;
			qf_GradingBenchmark -> qf_Descriptor;
			qf_GradingBenchmark -> qf_GetID;
			qf_GradingBenchmark -> qf_GetCourseID;
			qf_GradingBenchmark -> qf_GetAssignmentID;
			qf_GradingBenchmark -> qf_GetReviewID;
			qf_GradingBenchmark -> qf_GetHeading;
			qf_GradingBenchmark -> qf_GetComment;
			qf_GradingBenchmark -> qf_GetCriteria;
			qf_GradingBenchmark -> qf_GetScore;
			qf_GradingBenchmark -> qf_file_qf_types_proto_rawDescGZIP;
			qf_GradingBenchmark -> qf_file_qf_types_proto_init;
			qf_AssignmentID [label = "AssignmentID, Field";shape = box;];
			qf_AssignmentID -> qf_GetAssignmentID;
			qf_Comment [label = "Comment, Field";shape = box;];
			qf_Comment -> qf_GetComment;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Criteria [label = "Criteria, Field";shape = box;];
			qf_Criteria -> qf_GetCriteria;
			qf_Heading [label = "Heading, Field";shape = box;];
			qf_Heading -> qf_GetHeading;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_ReviewID [label = "ReviewID, Field";shape = box;];
			qf_ReviewID -> qf_GetReviewID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetAssignmentID [label = "GetAssignmentID, Method";shape = box;];
			qf_GetReviewID [label = "GetReviewID, Method";shape = box;];
			qf_GetHeading [label = "GetHeading, Method";shape = box;];
			qf_GetComment [label = "GetComment, Method";shape = box;];
			qf_GetCriteria [label = "GetCriteria, Method";shape = box;];
			qf_Benchmarks [label = "Benchmarks, Struct";shape = box;];
			qf_Benchmarks -> qf_GetCriteria;
			qf_Benchmarks -> qf_Reset;
			qf_Benchmarks -> qf_String;
			qf_Benchmarks -> qf_ProtoMessage;
			qf_Benchmarks -> qf_ProtoReflect;
			qf_Benchmarks -> qf_Descriptor;
			qf_Benchmarks -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Benchmarks -> qf_file_qf_types_proto_init;
			qf_Benchmarks [label = "Benchmarks, Field";shape = box;];
			qf_Benchmarks -> qf_GetBenchmarks;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetBenchmarks [label = "GetBenchmarks, Method";shape = box;];
			qf_GradingCriterion [label = "GradingCriterion, Struct";shape = box;];
			qf_GradingCriterion -> qf_GetStatus;
			qf_GradingCriterion -> qf_GetComment;
			qf_GradingCriterion -> qf_GetBenchmarks;
			qf_GradingCriterion -> qf_Reset;
			qf_GradingCriterion -> qf_String;
			qf_GradingCriterion -> qf_ProtoMessage;
			qf_GradingCriterion -> qf_ProtoReflect;
			qf_GradingCriterion -> qf_Descriptor;
			qf_GradingCriterion -> qf_GetID;
			qf_GradingCriterion -> qf_GetBenchmarkID;
			qf_GradingCriterion -> qf_GetCourseID;
			qf_GradingCriterion -> qf_GetPoints;
			qf_GradingCriterion -> qf_GetDescription;
			qf_GradingCriterion -> qf_GetGrade;
			qf_GradingCriterion -> qf_file_qf_types_proto_rawDescGZIP;
			qf_GradingCriterion -> qf_file_qf_types_proto_init;
			qf_BenchmarkID [label = "BenchmarkID, Field";shape = box;];
			qf_BenchmarkID -> qf_GetBenchmarkID;
			qf_Comment [label = "Comment, Field";shape = box;];
			qf_Comment -> qf_GetComment;
			qf_CourseID [label = "CourseID, Field";shape = box;];
			qf_CourseID -> qf_GetCourseID;
			qf_Description [label = "Description, Field";shape = box;];
			qf_Description -> qf_GetDescription;
			qf_Grade [label = "Grade, Field";shape = box;];
			qf_Grade -> qf_GetGrade;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Points [label = "Points, Field";shape = box;];
			qf_Points -> qf_GetPoints;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetBenchmarkID [label = "GetBenchmarkID, Method";shape = box;];
			qf_GetCourseID [label = "GetCourseID, Method";shape = box;];
			qf_GetPoints [label = "GetPoints, Method";shape = box;];
			qf_GetDescription [label = "GetDescription, Method";shape = box;];
			qf_GetGrade [label = "GetGrade, Method";shape = box;];
			qf_GetComment [label = "GetComment, Method";shape = box;];
			qf_Review [label = "Review, Struct";shape = box;];
			qf_Review -> qf_GetAssignments;
			qf_Review -> qf_GetApprovedDate;
			qf_Review -> qf_GetComment;
			qf_Review -> qf_Reset;
			qf_Review -> qf_String;
			qf_Review -> qf_ProtoMessage;
			qf_Review -> qf_ProtoReflect;
			qf_Review -> qf_Descriptor;
			qf_Review -> qf_GetID;
			qf_Review -> qf_GetSubmissionID;
			qf_Review -> qf_GetReviewerID;
			qf_Review -> qf_GetFeedback;
			qf_Review -> qf_GetReady;
			qf_Review -> qf_GetScore;
			qf_Review -> qf_GetGradingBenchmarks;
			qf_Review -> qf_file_qf_types_proto_rawDescGZIP;
			qf_Review -> qf_file_qf_types_proto_init;
			qf_Edited [label = "Edited, Field";shape = box;];
			qf_Edited -> qf_GetEdited;
			qf_Feedback [label = "Feedback, Field";shape = box;];
			qf_Feedback -> qf_GetFeedback;
			qf_GradingBenchmarks [label = "GradingBenchmarks, Field";shape = box;];
			qf_GradingBenchmarks -> qf_GetGradingBenchmarks;
			qf_ID [label = "ID, Field";shape = box;];
			qf_ID -> qf_GetID;
			qf_Ready [label = "Ready, Field";shape = box;];
			qf_Ready -> qf_GetReady;
			qf_ReviewerID [label = "ReviewerID, Field";shape = box;];
			qf_ReviewerID -> qf_GetReviewerID;
			qf_Score [label = "Score, Field";shape = box;];
			qf_Score -> qf_GetScore;
			qf_SubmissionID [label = "SubmissionID, Field";shape = box;];
			qf_SubmissionID -> qf_GetSubmissionID;
			qf_sizeCache [label = "sizeCache, Field";shape = box;];
			qf_sizeCache -> qf_file_qf_types_proto_init;
			qf_state [label = "state, Field";shape = box;];
			qf_state -> qf_file_qf_types_proto_init;
			qf_unknownFields [label = "unknownFields, Field";shape = box;];
			qf_unknownFields -> qf_file_qf_types_proto_init;
			qf_Reset [label = "Reset, Method";shape = box;];
			qf_String [label = "String, Method";shape = box;];
			qf_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			qf_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			qf_Descriptor [label = "Descriptor, Method";shape = box;];
			qf_GetID [label = "GetID, Method";shape = box;];
			qf_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			qf_GetReviewerID [label = "GetReviewerID, Method";shape = box;];
			qf_GetFeedback [label = "GetFeedback, Method";shape = box;];
			qf_GetReady [label = "GetReady, Method";shape = box;];
			qf_GetScore [label = "GetScore, Method";shape = box;];
			qf_GetGradingBenchmarks [label = "GetGradingBenchmarks, Method";shape = box;];
			qf_GetEdited [label = "GetEdited, Method";shape = box;];
			qf_File_qf_types_proto [label = "File_qf_types_proto, Variable";shape = box;];
			qf_File_qf_types_proto -> qf_file_qf_types_proto_init;
			qf_file_qf_types_proto_rawDesc [label = "file_qf_types_proto_rawDesc, Variable";shape = box;];
			qf_file_qf_types_proto_rawDesc -> qf_GetEdited;
			qf_file_qf_types_proto_rawDesc -> qf_file_qf_types_proto_init;
			qf_file_qf_types_proto_rawDescOnce [label = "file_qf_types_proto_rawDescOnce, Variable";shape = box;];
			qf_file_qf_types_proto_rawDescOnce -> qf_file_qf_types_proto_rawDescGZIP;
			qf_file_qf_types_proto_rawDescData [label = "file_qf_types_proto_rawDescData, Variable";shape = box;];
			qf_file_qf_types_proto_rawDescData -> qf_file_qf_types_proto_rawDescGZIP;
			qf_file_qf_types_proto_rawDescGZIP [label = "file_qf_types_proto_rawDescGZIP, Function";shape = box;];
			qf_file_qf_types_proto_rawDescGZIP -> qf_Descriptor;
			qf_file_qf_types_proto_rawDescGZIP -> qf_EnumDescriptor;
			qf_file_qf_types_proto_enumTypes [label = "file_qf_types_proto_enumTypes, Variable";shape = box;];
			qf_file_qf_types_proto_enumTypes -> qf_Descriptor;
			qf_file_qf_types_proto_enumTypes -> qf_Type;
			qf_file_qf_types_proto_enumTypes -> qf_file_qf_types_proto_init;
			qf_file_qf_types_proto_msgTypes [label = "file_qf_types_proto_msgTypes, Variable";shape = box;];
			qf_file_qf_types_proto_msgTypes -> qf_Reset;
			qf_file_qf_types_proto_msgTypes -> qf_ProtoReflect;
			qf_file_qf_types_proto_msgTypes -> qf_file_qf_types_proto_init;
			qf_file_qf_types_proto_goTypes [label = "file_qf_types_proto_goTypes, Variable";shape = box;];
			qf_file_qf_types_proto_goTypes -> qf_file_qf_types_proto_init;
			qf_file_qf_types_proto_depIdxs [label = "file_qf_types_proto_depIdxs, Variable";shape = box;];
			qf_file_qf_types_proto_depIdxs -> qf_file_qf_types_proto_init;
			qf_init [label = "init, Function";shape = box;];
			qf_file_qf_types_proto_init [label = "file_qf_types_proto_init, Function";shape = box;];
			qf_file_qf_types_proto_init -> qf_file_qf_types_proto_rawDescGZIP;
		}
		qf_Repository_Type -> qf_UserName;
		qf_Repository_Type -> qf_TestsRepoURL;
		qf_Repository_Type -> qf_IsCourseRepo;
		qf_Repository_Type -> qf_IsUserRepo;
		qf_Repository_Type -> qf_IsStudentRepo;
		qf_Repository_INFO -> qf_RepoType;
		qf_Repository_INFO -> qf_IsCourseRepo;
		qf_Repository_ASSIGNMENTS -> qf_RepoType;
		qf_Repository_ASSIGNMENTS -> qf_IsCourseRepo;
		qf_Repository_ASSIGNMENTS -> qf_IsAssignmentsRepo;
		qf_Repository_TESTS -> qf_RepoType;
		qf_Repository_TESTS -> qf_IsCourseRepo;
		qf_Repository_TESTS -> qf_IsTestsRepo;
		qf_Repository_USER -> qf_RepoType;
		qf_Repository_USER -> qf_IsUserRepo;
		qf_Repository_USER -> qf_IsStudentRepo;
		qf_Repository_GROUP -> qf_RepoType;
		qf_Repository_GROUP -> qf_IsGroupRepo;
		qf_Repository_GROUP -> qf_IsStudentRepo;
		qf_Enrollment_UserStatus -> qf_file_qf_requests_proto_rawDescGZIP;
		qf_Enrollment_UserStatus -> qf_GetScmOrganizationName;
		qf_Enrollment_UserStatus -> qf_GetUserID;
		qf_Enrollment_NONE -> qf_IsNone;
		qf_Enrollment_PENDING -> qf_IsPending;
		qf_Enrollment_STUDENT -> qf_IsStudent;
		qf_Enrollment_TEACHER -> qf_IsTeacher;
		qf_Enrollment_TEACHER -> qf_IsValid;
		qf_PullRequest_DRAFT -> qf_SetDraft;
		qf_PullRequest_REVIEW -> qf_HasReviewers;
		qf_PullRequest_REVIEW -> qf_SetReview;
		qf_PullRequest_APPROVED -> qf_IsApproved;
		qf_PullRequest_APPROVED -> qf_HasReviewers;
		qf_PullRequest_APPROVED -> qf_SetApproved;
		qf_Submission_Status -> qf_TestSubmissionStatus;
		qf_Submission_Status -> qf_IsAllApproved;
		qf_Submission_Status -> qf_GetStatuses;
		qf_Submission_Status -> qf_GetStatusByUser;
		qf_Submission_Status -> qf_SetGrade;
		qf_Submission_NONE -> qf_TestSubmissionStatus;
		qf_Submission_NONE -> qf_TestSlipDays;
		qf_Submission_NONE -> qf_TestScoreLimitSlipDays;
		qf_Submission_NONE -> qf_TestMismatchingAssignmentID;
		qf_Submission_NONE -> qf_TestMismatchingCourseID;
		qf_Submission_NONE -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Submission_NONE -> qf_TestSlipDaysWGracePeriod;
		qf_Submission_NONE -> qf_GetStatusByUser;
		qf_Submission_NONE -> qf_TestCountApprovedSubmissions;
		qf_Submission_APPROVED -> qf_SubmissionStatus;
		qf_Submission_APPROVED -> qf_TestSubmissionStatus;
		qf_Submission_APPROVED -> qf_TestScoreLimitSlipDays;
		qf_Submission_APPROVED -> qf_IsApproved;
		qf_Submission_APPROVED -> qf_IsAllApproved;
		qf_Submission_APPROVED -> qf_TestCountApprovedSubmissions;
		qf_Submission_REJECTED -> qf_TestSubmissionStatus;
		qf_Submission_REVISION -> qf_TestSubmissionStatus;
		qf_GradingCriterion_FAILED -> qf_;
		qf_GradingCriterion_PASSED -> qf_ComputeScore;
		qf_GradingCriterion_PASSED -> qf_;
		qf_User -> qf_UserNames;
		qf_User -> qf_ContainsAll;
		qf_User -> qf_GetUsersExcept;
		qf_User -> qf_TestGetUserSubset;
		qf_User -> qf_IDFor;
		qf_User -> qf_;
		qf_User -> qf_TestUserRemoveRemoteID;
		qf_User -> qf_TestGroupRemoveRemoteID;
		qf_User -> qf_TestEnrollmentRemoveRemoteID;
		qf_User -> qf_IsOwner;
		qf_User -> qf_IsValid;
		qf_Enrollments -> qf_TestEnrollmentRemoveRemoteID;
		qf_ID -> qf_Contains;
		qf_ID -> qf_TestGetUserSubset;
		qf_ID -> qf_TestUserRemoveRemoteID;
		qf_ID -> qf_TestGroupRemoveRemoteID;
		qf_ID -> qf_TestEnrollmentRemoveRemoteID;
		qf_RefreshToken -> qf_RemoveRemoteID;
		qf_RefreshToken -> qf_TestUserRemoveRemoteID;
		qf_RefreshToken -> qf_TestGroupRemoveRemoteID;
		qf_RefreshToken -> qf_TestEnrollmentRemoveRemoteID;
		qf_RefreshToken -> qf_checkUser;
		qf_ScmRemoteID -> qf_RemoveRemoteID;
		qf_ScmRemoteID -> qf_TestUserRemoveRemoteID;
		qf_ScmRemoteID -> qf_TestGroupRemoveRemoteID;
		qf_ScmRemoteID -> qf_TestEnrollmentRemoveRemoteID;
		qf_ScmRemoteID -> qf_checkUser;
		qf_GetID -> qf_GetUsersExcept;
		qf_GetID -> qf_UserIDs;
		qf_GetID -> qf_IDFor;
		qf_GetID -> qf_IsOwner;
		qf_GetID -> qf_IsValid;
		qf_GetIsAdmin -> qf_IsAdmin;
		qf_GetName -> qf_Name;
		qf_GetLogin -> qf_UserNames;
		qf_Users -> qf_;
		qf_Users -> qf_RemoveRemoteID;
		qf_GetUsers -> qf_RemoveRemoteID;
		qf_Group -> qf_UserNames;
		qf_Group -> qf_Contains;
		qf_Group -> qf_ContainsAll;
		qf_Group -> qf_GetUsersExcept;
		qf_Group -> qf_;
		qf_Group -> qf_TestGetUserSubset;
		qf_Group -> qf_IDFor;
		qf_Group -> qf_RemoveRemoteID;
		qf_Group -> qf_TestGroupRemoveRemoteID;
		qf_Group -> qf_IsValid;
		qf_Users -> qf_ContainsAll;
		qf_Users -> qf_GetUsersExcept;
		qf_Users -> qf_UserIDs;
		qf_Users -> qf_TestGetUserSubset;
		qf_Users -> qf_TestGroupRemoveRemoteID;
		qf_GetName -> qf_IsValid;
		qf_GetCourseID -> qf_IDFor;
		qf_GetCourseID -> qf_IsValid;
		qf_GetUsers -> qf_Contains;
		qf_GetUsers -> qf_UserNames;
		qf_GetEnrollments -> qf_PopulateSlipDays;
		qf_GetEnrollments -> qf_RemoveRemoteID;
		qf_Groups -> qf_;
		qf_Groups -> qf_RemoveRemoteID;
		qf_GetGroups -> qf_RemoveRemoteID;
		qf_Course -> qf_;
		qf_Course -> qf_UpdateDockerfile;
		qf_Course -> qf_GetDockerfile;
		qf_Course -> qf_DockerImage;
		qf_Course -> qf_digest;
		qf_Course -> qf_CloneDir;
		qf_Course -> qf_TeacherEnrollments;
		qf_Course -> qf_PopulateSlipDays;
		qf_Course -> qf_TestGetDockerfileEmptyCache;
		qf_Course -> qf_TestUpdateDockerfile;
		qf_Course -> qf_TestDockerfileForCourse;
		qf_Course -> qf_totalSlipDays;
		qf_Course -> qf_RemainingSlipDays;
		qf_Course -> qf_IDFor;
		qf_Course -> qf_RemoveRemoteID;
		qf_Course -> qf_TestEnrollmentRemoveRemoteID;
		qf_Course -> qf_IsValid;
		qf_DockerfileDigest -> qf_UpdateDockerfile;
		qf_DockerfileDigest -> qf_RemoveRemoteID;
		qf_Enrollments -> qf_TeacherEnrollments;
		qf_ID -> qf_UpdateDockerfile;
		qf_ID -> qf_GetDockerfile;
		qf_ID -> qf_TestUpdateDockerfile;
		qf_ID -> qf_TestDockerfileForCourse;
		qf_ID -> qf_TestScoreLimitSlipDays;
		qf_ID -> qf_TestMismatchingAssignmentID;
		qf_ID -> qf_;
		qf_ID -> qf_TestMismatchingCourseID;
		qf_ID -> qf_TestEnrollmentGetUsedSlipDays;
		qf_ID -> qf_TestSlipDaysWGracePeriod;
		qf_ID -> qf_TestSlipDays;
		qf_Name -> qf_;
		qf_SlipDays -> qf_TestScoreLimitSlipDays;
		qf_SlipDays -> qf_;
		qf_GetID -> qf_RemainingSlipDays;
		qf_GetCode -> qf_DockerImage;
		qf_GetCode -> qf_JobName;
		qf_GetCode -> qf_IsValid;
		qf_GetYear -> qf_IsValid;
		qf_GetTag -> qf_IsValid;
		qf_GetScmOrganizationID -> qf_IsValid;
		qf_GetScmOrganizationName -> qf_CloneDir;
		qf_GetSlipDays -> qf_RemainingSlipDays;
		qf_GetGroups -> qf_PopulateSlipDays;
		qf_Courses -> qf_;
		qf_Courses -> qf_RemoveRemoteID;
		qf_GetCourses -> qf_RemoveRemoteID;
		qf_Repository -> qf_GetTestURL;
		qf_Repository -> qf_Name;
		qf_Repository -> qf_IsGroupRepo;
		qf_Repository -> qf_IsTestsRepo;
		qf_Repository -> qf_IsAssignmentsRepo;
		qf_Repository -> qf_IsStudentRepo;
		qf_Repository -> qf_IsUserRepo;
		qf_Repository -> qf_TestGetTestURL;
		qf_Repository -> qf_TestName;
		qf_Repository -> qf_TestUserName;
		qf_HTMLURL -> qf_TestGetTestURL;
		qf_HTMLURL -> qf_TestName;
		qf_HTMLURL -> qf_TestUserName;
		qf_RepoType -> qf_IsTestsRepo;
		qf_RepoType -> qf_IsAssignmentsRepo;
		qf_RepoType -> qf_IsStudentRepo;
		qf_RepoType -> qf_IsGroupRepo;
		qf_RepoType -> qf_IsUserRepo;
		qf_GetHTMLURL -> qf_Name;
		qf_GetHTMLURL -> qf_GetTestURL;
		qf_Enrollment -> qf_CloneDir;
		qf_Enrollment -> qf_TeacherEnrollments;
		qf_Enrollment -> qf_IsTeacher;
		qf_Enrollment -> qf_IsAdmin;
		qf_Enrollment -> qf_UserIDs;
		qf_Enrollment -> qf_;
		qf_Enrollment -> qf_UpdateSlipDays;
		qf_Enrollment -> qf_internalUpdateSlipDays;
		qf_Enrollment -> qf_totalSlipDays;
		qf_Enrollment -> qf_RemainingSlipDays;
		qf_Enrollment -> qf_SetSlipDays;
		qf_Enrollment -> qf_IsNone;
		qf_Enrollment -> qf_IsPending;
		qf_Enrollment -> qf_IsStudent;
		qf_Enrollment -> qf_IDFor;
		qf_Enrollment -> qf_RemoveRemoteID;
		qf_Enrollment -> qf_TestEnrollmentRemoveRemoteID;
		qf_Enrollment -> qf_TestScoreLimitSlipDays;
		qf_Enrollment -> qf_TestMismatchingAssignmentID;
		qf_Enrollment -> qf_TestMismatchingCourseID;
		qf_Enrollment -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Enrollment -> qf_TestSlipDaysWGracePeriod;
		qf_Enrollment -> qf_TestSlipDays;
		qf_Enrollment -> qf_BeforeCreate;
		qf_Enrollment -> qf_TestCountApprovedSubmissions;
		qf_Enrollment -> qf_IsValid;
		qf_Course -> qf_TestScoreLimitSlipDays;
		qf_Course -> qf_TestMismatchingAssignmentID;
		qf_Course -> qf_TestMismatchingCourseID;
		qf_Course -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Course -> qf_TestSlipDaysWGracePeriod;
		qf_Course -> qf_TestSlipDays;
		qf_CourseID -> qf_UpdateSlipDays;
		qf_CourseID -> qf_TestEnrollmentRemoveRemoteID;
		qf_CourseID -> qf_TestScoreLimitSlipDays;
		qf_CourseID -> qf_TestMismatchingAssignmentID;
		qf_CourseID -> qf_TestMismatchingCourseID;
		qf_CourseID -> qf_TestEnrollmentGetUsedSlipDays;
		qf_CourseID -> qf_TestSlipDaysWGracePeriod;
		qf_CourseID -> qf_TestSlipDays;
		qf_ID -> qf_internalUpdateSlipDays;
		qf_ID -> qf_TestCountApprovedSubmissions;
		qf_LastActivityDate -> qf_CountApprovedSubmissions;
		qf_SlipDaysRemaining -> qf_SetSlipDays;
		qf_TotalApproved -> qf_CountApprovedSubmissions;
		qf_UsedSlipDays -> qf_internalUpdateSlipDays;
		qf_UsedSlipDays -> qf_TestScoreLimitSlipDays;
		qf_UsedSlipDays -> qf_TestMismatchingAssignmentID;
		qf_UsedSlipDays -> qf_TestMismatchingCourseID;
		qf_UsedSlipDays -> qf_TestEnrollmentGetUsedSlipDays;
		qf_UsedSlipDays -> qf_TestSlipDaysWGracePeriod;
		qf_UsedSlipDays -> qf_TestSlipDays;
		qf_UserID -> qf_TestEnrollmentRemoveRemoteID;
		qf_UserID -> qf_TestScoreLimitSlipDays;
		qf_UserID -> qf_TestMismatchingAssignmentID;
		qf_UserID -> qf_TestMismatchingCourseID;
		qf_UserID -> qf_TestEnrollmentGetUsedSlipDays;
		qf_UserID -> qf_TestSlipDaysWGracePeriod;
		qf_UserID -> qf_TestCountApprovedSubmissions;
		qf_GetID -> qf_TestCountApprovedSubmissions;
		qf_GetCourseID -> qf_GetCourseID;
		qf_GetCourseID -> qf_HasCourseID;
		qf_GetCourseID -> qf_UpdateSlipDays;
		qf_GetCourseID -> qf_RemainingSlipDays;
		qf_GetUserID -> qf_UserIDs;
		qf_GetUserID -> qf_CountApprovedSubmissions;
		qf_GetUserID -> qf_UpdateSlipDays;
		qf_GetUserID -> qf_IDFor;
		qf_GetUserID -> qf_IsValid;
		qf_GetUser -> qf_IsAdmin;
		qf_GetUser -> qf_Name;
		qf_GetUser -> qf_RemoveRemoteID;
		qf_GetUser -> qf_TestEnrollmentRemoveRemoteID;
		qf_GetCourse -> qf_RemoveRemoteID;
		qf_GetGroup -> qf_RemoveRemoteID;
		qf_GetStatus -> qf_IsNone;
		qf_GetStatus -> qf_IsPending;
		qf_GetStatus -> qf_IsStudent;
		qf_GetStatus -> qf_IsTeacher;
		qf_GetStatus -> qf_IsValid;
		qf_GetLastActivityDate -> qf_CountApprovedSubmissions;
		qf_GetTotalApproved -> qf_TestCountApprovedSubmissions;
		qf_GetUsedSlipDays -> qf_internalUpdateSlipDays;
		qf_GetUsedSlipDays -> qf_totalSlipDays;
		qf_GetUsedSlipDays -> qf_TestEnrollmentGetUsedSlipDays;
		qf_GetUsedSlipDays -> qf_TestSlipDaysWGracePeriod;
		qf_AssignmentID -> qf_internalUpdateSlipDays;
		qf_AssignmentID -> qf_TestEnrollmentGetUsedSlipDays;
		qf_EnrollmentID -> qf_internalUpdateSlipDays;
		qf_UsedDays -> qf_internalUpdateSlipDays;
		qf_UsedDays -> qf_TestEnrollmentGetUsedSlipDays;
		qf_UsedDays -> qf_TestSlipDaysWGracePeriod;
		qf_GetUsedDays -> qf_totalSlipDays;
		qf_Enrollments -> qf_Name;
		qf_Enrollments -> qf_GetCourseID;
		qf_Enrollments -> qf_HasCourseID;
		qf_Enrollments -> qf_IDFor;
		qf_Enrollments -> qf_;
		qf_Enrollments -> qf_RemoveRemoteID;
		qf_Enrollments -> qf_IsValid;
		qf_GetEnrollments -> qf_GetCourseID;
		qf_GetEnrollments -> qf_HasCourseID;
		qf_GetEnrollments -> qf_UserIDs;
		qf_Assignment -> qf_;
		qf_Assignment -> qf_SinceDeadline;
		qf_Assignment -> qf_WithTimeout;
		qf_Assignment -> qf_SubmissionStatus;
		qf_Assignment -> qf_CloneWithoutSubmissions;
		qf_Assignment -> qf_TestSubmissionStatus;
		qf_Assignment -> qf_TestScoreLimitSlipDays;
		qf_Assignment -> qf_TestMismatchingAssignmentID;
		qf_Assignment -> qf_TestMismatchingCourseID;
		qf_AutoApprove -> qf_TestSubmissionStatus;
		qf_CourseID -> qf_;
		qf_Deadline -> qf_TestMismatchingAssignmentID;
		qf_Deadline -> qf_TestMismatchingCourseID;
		qf_Deadline -> qf_;
		qf_ID -> qf_UpdateSlipDays;
		qf_IsGroupLab -> qf_TestSubmissionStatus;
		qf_ScoreLimit -> qf_TestSubmissionStatus;
		qf_ScoreLimit -> qf_UpdateSlipDays;
		qf_ScoreLimit -> qf_;
		qf_Submissions -> qf_CloneWithoutSubmissions;
		qf_GetID -> qf_UpdateSlipDays;
		qf_GetDeadline -> qf_SinceDeadline;
		qf_GetDeadline -> qf_TestSlipDaysWGracePeriod;
		qf_GetAutoApprove -> qf_SubmissionStatus;
		qf_GetScoreLimit -> qf_SubmissionStatus;
		qf_GetReviewers -> qf_GradedManually;
		qf_GetContainerTimeout -> qf_WithTimeout;
		qf_Task -> qf_;
		qf_Task -> qf_HasChanged;
		qf_Task -> qf_MarkDeleted;
		qf_Task -> qf_TestHasChanged;
		qf_Task -> qf_TestMarkDeleted;
		qf_Body -> qf_HasChanged;
		qf_Body -> qf_MarkDeleted;
		qf_Body -> qf_TestHasChanged;
		qf_Body -> qf_TestMarkDeleted;
		qf_Title -> qf_HasChanged;
		qf_Title -> qf_MarkDeleted;
		qf_Title -> qf_IsDeleted;
		qf_Title -> qf_TestHasChanged;
		qf_Title -> qf_TestMarkDeleted;
		qf_PullRequest -> qf_SetReview;
		qf_PullRequest -> qf_SetDraft;
		qf_PullRequest -> qf_IsApproved;
		qf_PullRequest -> qf_HasReviewers;
		qf_PullRequest -> qf_HasFeedbackComment;
		qf_PullRequest -> qf_;
		qf_PullRequest -> qf_SetApproved;
		qf_PullRequest -> qf_TestIsValid;
		qf_PullRequest -> qf_TestHasFeedbackComment;
		qf_IssueID -> qf_Valid;
		qf_IssueID -> qf_TestIsValid;
		qf_Number -> qf_Valid;
		qf_Number -> qf_TestIsValid;
		qf_ScmCommentID -> qf_HasFeedbackComment;
		qf_ScmCommentID -> qf_TestHasFeedbackComment;
		qf_ScmRepositoryID -> qf_Valid;
		qf_ScmRepositoryID -> qf_TestIsValid;
		qf_SourceBranch -> qf_Valid;
		qf_SourceBranch -> qf_TestIsValid;
		qf_Stage -> qf_SetDraft;
		qf_Stage -> qf_IsApproved;
		qf_Stage -> qf_HasReviewers;
		qf_Stage -> qf_SetApproved;
		qf_Stage -> qf_SetReview;
		qf_TaskID -> qf_Valid;
		qf_TaskID -> qf_TestIsValid;
		qf_UserID -> qf_Valid;
		qf_UserID -> qf_TestIsValid;
		qf_Assignments -> qf_;
		qf_Submission -> qf_WithTimeout;
		qf_Submission -> qf_TestSubmissionStatus;
		qf_Submission -> qf_;
		qf_Submission -> qf_UserIDs;
		qf_Submission -> qf_TestSlipDays;
		qf_Submission -> qf_TestScoreLimitSlipDays;
		qf_Submission -> qf_TestMismatchingAssignmentID;
		qf_Submission -> qf_TestMismatchingCourseID;
		qf_Submission -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Submission -> qf_TestSlipDaysWGracePeriod;
		qf_Submission -> qf_Clean;
		qf_Submission -> qf_IsApproved;
		qf_Submission -> qf_IsAllApproved;
		qf_Submission -> qf_GetStatuses;
		qf_Submission -> qf_GetStatusByUser;
		qf_Submission -> qf_SetGrade;
		qf_Submission -> qf_SetGradeAll;
		qf_Submission -> qf_NewestSubmissionDate;
		qf_Submission -> qf_ByUser;
		qf_Submission -> qf_TestByUser;
		qf_Submission -> qf_TestByGroup;
		qf_Submission -> qf_TestNewestSubmissionDate;
		qf_Submission -> qf_TestCountApprovedSubmissions;
		qf_AssignmentID -> qf_UpdateSlipDays;
		qf_AssignmentID -> qf_TestSlipDays;
		qf_AssignmentID -> qf_TestScoreLimitSlipDays;
		qf_AssignmentID -> qf_TestMismatchingAssignmentID;
		qf_AssignmentID -> qf_TestMismatchingCourseID;
		qf_AssignmentID -> qf_TestSlipDaysWGracePeriod;
		qf_AssignmentID -> qf_TestCountApprovedSubmissions;
		qf_BuildInfo -> qf_TestSlipDays;
		qf_BuildInfo -> qf_TestScoreLimitSlipDays;
		qf_BuildInfo -> qf_TestMismatchingAssignmentID;
		qf_BuildInfo -> qf_TestMismatchingCourseID;
		qf_BuildInfo -> qf_TestEnrollmentGetUsedSlipDays;
		qf_BuildInfo -> qf_TestSlipDaysWGracePeriod;
		qf_BuildInfo -> qf_TestNewestSubmissionDate;
		qf_Grades -> qf_TestSubmissionStatus;
		qf_Grades -> qf_TestSlipDays;
		qf_Grades -> qf_TestScoreLimitSlipDays;
		qf_Grades -> qf_TestMismatchingAssignmentID;
		qf_Grades -> qf_TestMismatchingCourseID;
		qf_Grades -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Grades -> qf_TestSlipDaysWGracePeriod;
		qf_Grades -> qf_BeforeCreate;
		qf_Grades -> qf_GetStatusByUser;
		qf_Grades -> qf_SetGrade;
		qf_Grades -> qf_SetGradeAll;
		qf_Grades -> qf_Clean;
		qf_Grades -> qf_TestCountApprovedSubmissions;
		qf_GroupID -> qf_TestSubmissionStatus;
		qf_GroupID -> qf_TestByUser;
		qf_GroupID -> qf_TestByGroup;
		qf_GroupID -> qf_TestCountApprovedSubmissions;
		qf_Reviews -> qf_Clean;
		qf_Score -> qf_TestSubmissionStatus;
		qf_Score -> qf_UpdateSlipDays;
		qf_Score -> qf_TestSlipDays;
		qf_Score -> qf_TestScoreLimitSlipDays;
		qf_Score -> qf_Clean;
		qf_UserID -> qf_TestByUser;
		qf_UserID -> qf_TestByGroup;
		qf_GetID -> qf_BeforeCreate;
		qf_GetID -> qf_Clean;
		qf_GetAssignmentID -> qf_CountApprovedSubmissions;
		qf_GetAssignmentID -> qf_UpdateSlipDays;
		qf_GetUserID -> qf_BeforeCreate;
		qf_GetUserID -> qf_ByUser;
		qf_GetUserID -> qf_ByGroup;
		qf_GetGroupID -> qf_BeforeCreate;
		qf_GetGroupID -> qf_ByUser;
		qf_GetGroupID -> qf_ByGroup;
		qf_GetScore -> qf_TestSubmissionStatus;
		qf_GetReleased -> qf_Clean;
		qf_GetGrades -> qf_SubmissionStatus;
		qf_GetGrades -> qf_TestSubmissionStatus;
		qf_GetGrades -> qf_IsApproved;
		qf_GetGrades -> qf_IsAllApproved;
		qf_GetGrades -> qf_GetStatuses;
		qf_GetGrades -> qf_GetStatusByUser;
		qf_GetGrades -> qf_SetGrade;
		qf_GetGrades -> qf_SetGradeAll;
		qf_GetReviews -> qf_Clean;
		qf_GetBuildInfo -> qf_UpdateSlipDays;
		qf_GetBuildInfo -> qf_NewestSubmissionDate;
		qf_Submissions -> qf_;
		qf_Submissions -> qf_file_qf_requests_proto_rawDescGZIP;
		qf_Submissions -> qf_Descriptor;
		qf_Submissions -> qf_EnumDescriptor;
		qf_Submissions -> qf_ByGroup;
		qf_Submissions -> qf_TestCountApprovedSubmissions;
		qf_Submissions -> qf_Clean;
		qf_GetSubmissions -> qf_For;
		qf_Grade -> qf_WithTimeout;
		qf_Grade -> qf_TestSubmissionStatus;
		qf_Grade -> qf_file_qf_requests_proto_rawDescGZIP;
		qf_Grade -> qf_isSubmissionRequest_FetchMode;
		qf_Grade -> qf_GetReleased;
		qf_Grade -> qf_TestSlipDays;
		qf_Grade -> qf_TestScoreLimitSlipDays;
		qf_Grade -> qf_TestMismatchingAssignmentID;
		qf_Grade -> qf_TestMismatchingCourseID;
		qf_Grade -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Grade -> qf_TestSlipDaysWGracePeriod;
		qf_Grade -> qf_BeforeCreate;
		qf_Grade -> qf_Clean;
		qf_Grade -> qf_TestCountApprovedSubmissions;
		qf_Status -> qf_TestSubmissionStatus;
		qf_Status -> qf_TestSlipDays;
		qf_Status -> qf_TestScoreLimitSlipDays;
		qf_Status -> qf_TestMismatchingAssignmentID;
		qf_Status -> qf_TestMismatchingCourseID;
		qf_Status -> qf_TestEnrollmentGetUsedSlipDays;
		qf_Status -> qf_TestSlipDaysWGracePeriod;
		qf_Status -> qf_BeforeCreate;
		qf_Status -> qf_SetGrade;
		qf_Status -> qf_SetGradeAll;
		qf_Status -> qf_Clean;
		qf_Status -> qf_TestCountApprovedSubmissions;
		qf_SubmissionID -> qf_BeforeCreate;
		qf_SubmissionID -> qf_Clean;
		qf_UserID -> qf_TestSubmissionStatus;
		qf_UserID -> qf_TestSlipDays;
		qf_UserID -> qf_BeforeCreate;
		qf_UserID -> qf_Clean;
		qf_GetUserID -> qf_IsApproved;
		qf_GetUserID -> qf_GetStatusByUser;
		qf_GetUserID -> qf_SetGrade;
		qf_GetStatus -> qf_IsApproved;
		qf_GetStatus -> qf_IsAllApproved;
		qf_GetStatus -> qf_GetStatuses;
		qf_GetStatus -> qf_GetStatusByUser;
		qf_GradingBenchmark -> qf_IDFor;
		qf_GradingBenchmark -> qf_;
		qf_GradingBenchmark -> qf_IsValid;
		qf_AssignmentID -> qf_IsValid;
		qf_Criteria -> qf_ComputeScore;
		qf_Criteria -> qf_;
		qf_Heading -> qf_IsValid;
		qf_GradingCriterion -> qf_IDFor;
		qf_GradingCriterion -> qf_;
		qf_GradingCriterion -> qf_IsValid;
		qf_BenchmarkID -> qf_IsValid;
		qf_Description -> qf_IsValid;
		qf_Grade -> qf_ComputeScore;
		qf_Grade -> qf_;
		qf_Points -> qf_ComputeScore;
		qf_Points -> qf_;
		qf_Review -> qf_;
		qf_Review -> qf_file_qf_requests_proto_rawDescGZIP;
		qf_Review -> qf_GetSubmissions;
		qf_Review -> qf_GetCourseID;
		qf_Review -> qf_IsValid;
		qf_Feedback -> qf_;
		qf_GradingBenchmarks -> qf_ComputeScore;
		qf_GradingBenchmarks -> qf_;
		qf_ReviewerID -> qf_IsValid;
		qf_Score -> qf_ComputeScore;
		qf_Score -> qf_TestComputeScore;
		qf_SubmissionID -> qf_IsValid;
		qf_file_qf_types_proto_init -> qf_file_qf_quickfeed_proto_init;
		qf_file_qf_types_proto_init -> qf_file_qf_requests_proto_init;
		subgraph cluster_user_go {
			label = "user.go";
			labelloc="t";
			rankdir=TB;
			qf_IsOwner [label = "IsOwner, Method";shape = box;];
			qf_UserIDs [label = "UserIDs, Method";shape = box;];
		}
		subgraph cluster_validation_go {
			label = "validation.go";
			labelloc="t";
			rankdir=TB;
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid -> qf_IsValid;
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid -> qf_IsValid;
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
			qf_IsValid [label = "IsValid, Method";shape = box;];
		}
	}
	subgraph cluster_qfconnect {
		label = "qfconnect (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_quickfeed_connect_go {
			label = "quickfeed.connect.go";
			labelloc="t";
			rankdir=TB;
			qfconnect_QuickFeedServiceName [label = "QuickFeedServiceName, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetUserProcedure [label = "QuickFeedServiceGetUserProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetUserProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetUserProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetUsersProcedure [label = "QuickFeedServiceGetUsersProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetUsersProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetUsersProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateUserProcedure [label = "QuickFeedServiceUpdateUserProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateUserProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateUserProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetGroupProcedure [label = "QuickFeedServiceGetGroupProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetGroupProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetGroupProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetGroupsByCourseProcedure [label = "QuickFeedServiceGetGroupsByCourseProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetGroupsByCourseProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetGroupsByCourseProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceCreateGroupProcedure [label = "QuickFeedServiceCreateGroupProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceCreateGroupProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceCreateGroupProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateGroupProcedure [label = "QuickFeedServiceUpdateGroupProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateGroupProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateGroupProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceDeleteGroupProcedure [label = "QuickFeedServiceDeleteGroupProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceDeleteGroupProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceDeleteGroupProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetCourseProcedure [label = "QuickFeedServiceGetCourseProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetCourseProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetCourseProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetCoursesProcedure [label = "QuickFeedServiceGetCoursesProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetCoursesProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetCoursesProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateCourseProcedure [label = "QuickFeedServiceUpdateCourseProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateCourseProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateCourseProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateCourseVisibilityProcedure [label = "QuickFeedServiceUpdateCourseVisibilityProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateCourseVisibilityProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateCourseVisibilityProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetAssignmentsProcedure [label = "QuickFeedServiceGetAssignmentsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetAssignmentsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetAssignmentsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateAssignmentsProcedure [label = "QuickFeedServiceUpdateAssignmentsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateAssignmentsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateAssignmentsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetEnrollmentsProcedure [label = "QuickFeedServiceGetEnrollmentsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetEnrollmentsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetEnrollmentsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceCreateEnrollmentProcedure [label = "QuickFeedServiceCreateEnrollmentProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceCreateEnrollmentProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceCreateEnrollmentProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateEnrollmentsProcedure [label = "QuickFeedServiceUpdateEnrollmentsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateEnrollmentsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateEnrollmentsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetSubmissionProcedure [label = "QuickFeedServiceGetSubmissionProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetSubmissionProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetSubmissionProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetSubmissionsProcedure [label = "QuickFeedServiceGetSubmissionsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetSubmissionsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetSubmissionsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetSubmissionsByCourseProcedure [label = "QuickFeedServiceGetSubmissionsByCourseProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetSubmissionsByCourseProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetSubmissionsByCourseProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateSubmissionProcedure [label = "QuickFeedServiceUpdateSubmissionProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateSubmissionProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateSubmissionProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateSubmissionsProcedure [label = "QuickFeedServiceUpdateSubmissionsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateSubmissionsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateSubmissionsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceRebuildSubmissionsProcedure [label = "QuickFeedServiceRebuildSubmissionsProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceRebuildSubmissionsProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceRebuildSubmissionsProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceCreateBenchmarkProcedure [label = "QuickFeedServiceCreateBenchmarkProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceCreateBenchmarkProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceCreateBenchmarkProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateBenchmarkProcedure [label = "QuickFeedServiceUpdateBenchmarkProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateBenchmarkProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateBenchmarkProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceDeleteBenchmarkProcedure [label = "QuickFeedServiceDeleteBenchmarkProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceDeleteBenchmarkProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceDeleteBenchmarkProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceCreateCriterionProcedure [label = "QuickFeedServiceCreateCriterionProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceCreateCriterionProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceCreateCriterionProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateCriterionProcedure [label = "QuickFeedServiceUpdateCriterionProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateCriterionProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateCriterionProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceDeleteCriterionProcedure [label = "QuickFeedServiceDeleteCriterionProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceDeleteCriterionProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceDeleteCriterionProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceCreateReviewProcedure [label = "QuickFeedServiceCreateReviewProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceCreateReviewProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceCreateReviewProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceUpdateReviewProcedure [label = "QuickFeedServiceUpdateReviewProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceUpdateReviewProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceUpdateReviewProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetOrganizationProcedure [label = "QuickFeedServiceGetOrganizationProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetOrganizationProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetOrganizationProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceGetRepositoriesProcedure [label = "QuickFeedServiceGetRepositoriesProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceGetRepositoriesProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceGetRepositoriesProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceIsEmptyRepoProcedure [label = "QuickFeedServiceIsEmptyRepoProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceIsEmptyRepoProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceIsEmptyRepoProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceSubmissionStreamProcedure [label = "QuickFeedServiceSubmissionStreamProcedure, Constant";shape = box;];
			qfconnect_QuickFeedServiceSubmissionStreamProcedure -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_QuickFeedServiceSubmissionStreamProcedure -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceServiceDescriptor [label = "quickFeedServiceServiceDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceServiceDescriptor -> qfconnect_;
			qfconnect_quickFeedServiceGetUserMethodDescriptor [label = "quickFeedServiceGetUserMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetUserMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetUserMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetUsersMethodDescriptor [label = "quickFeedServiceGetUsersMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetUsersMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetUsersMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateUserMethodDescriptor [label = "quickFeedServiceUpdateUserMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateUserMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateUserMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetGroupMethodDescriptor [label = "quickFeedServiceGetGroupMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetGroupsByCourseMethodDescriptor [label = "quickFeedServiceGetGroupsByCourseMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetGroupsByCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetGroupsByCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceCreateGroupMethodDescriptor [label = "quickFeedServiceCreateGroupMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceCreateGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceCreateGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateGroupMethodDescriptor [label = "quickFeedServiceUpdateGroupMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceDeleteGroupMethodDescriptor [label = "quickFeedServiceDeleteGroupMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceDeleteGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceDeleteGroupMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetCourseMethodDescriptor [label = "quickFeedServiceGetCourseMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetCoursesMethodDescriptor [label = "quickFeedServiceGetCoursesMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetCoursesMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetCoursesMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateCourseMethodDescriptor [label = "quickFeedServiceUpdateCourseMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateCourseVisibilityMethodDescriptor [label = "quickFeedServiceUpdateCourseVisibilityMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateCourseVisibilityMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateCourseVisibilityMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetAssignmentsMethodDescriptor [label = "quickFeedServiceGetAssignmentsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetAssignmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetAssignmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateAssignmentsMethodDescriptor [label = "quickFeedServiceUpdateAssignmentsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateAssignmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateAssignmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetEnrollmentsMethodDescriptor [label = "quickFeedServiceGetEnrollmentsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetEnrollmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetEnrollmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceCreateEnrollmentMethodDescriptor [label = "quickFeedServiceCreateEnrollmentMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceCreateEnrollmentMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceCreateEnrollmentMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateEnrollmentsMethodDescriptor [label = "quickFeedServiceUpdateEnrollmentsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateEnrollmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateEnrollmentsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetSubmissionMethodDescriptor [label = "quickFeedServiceGetSubmissionMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetSubmissionMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetSubmissionMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetSubmissionsMethodDescriptor [label = "quickFeedServiceGetSubmissionsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetSubmissionsByCourseMethodDescriptor [label = "quickFeedServiceGetSubmissionsByCourseMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetSubmissionsByCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetSubmissionsByCourseMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateSubmissionMethodDescriptor [label = "quickFeedServiceUpdateSubmissionMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateSubmissionMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateSubmissionMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateSubmissionsMethodDescriptor [label = "quickFeedServiceUpdateSubmissionsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceRebuildSubmissionsMethodDescriptor [label = "quickFeedServiceRebuildSubmissionsMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceRebuildSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceRebuildSubmissionsMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceCreateBenchmarkMethodDescriptor [label = "quickFeedServiceCreateBenchmarkMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceCreateBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceCreateBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateBenchmarkMethodDescriptor [label = "quickFeedServiceUpdateBenchmarkMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceDeleteBenchmarkMethodDescriptor [label = "quickFeedServiceDeleteBenchmarkMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceDeleteBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceDeleteBenchmarkMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceCreateCriterionMethodDescriptor [label = "quickFeedServiceCreateCriterionMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceCreateCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceCreateCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateCriterionMethodDescriptor [label = "quickFeedServiceUpdateCriterionMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceDeleteCriterionMethodDescriptor [label = "quickFeedServiceDeleteCriterionMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceDeleteCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceDeleteCriterionMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceCreateReviewMethodDescriptor [label = "quickFeedServiceCreateReviewMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceCreateReviewMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceCreateReviewMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceUpdateReviewMethodDescriptor [label = "quickFeedServiceUpdateReviewMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceUpdateReviewMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceUpdateReviewMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetOrganizationMethodDescriptor [label = "quickFeedServiceGetOrganizationMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetOrganizationMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetOrganizationMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceGetRepositoriesMethodDescriptor [label = "quickFeedServiceGetRepositoriesMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceGetRepositoriesMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceGetRepositoriesMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceIsEmptyRepoMethodDescriptor [label = "quickFeedServiceIsEmptyRepoMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceIsEmptyRepoMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceIsEmptyRepoMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_quickFeedServiceSubmissionStreamMethodDescriptor [label = "quickFeedServiceSubmissionStreamMethodDescriptor, Variable";shape = box;];
			qfconnect_quickFeedServiceSubmissionStreamMethodDescriptor -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceSubmissionStreamMethodDescriptor -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_QuickFeedServiceClient [label = "QuickFeedServiceClient, Interface";shape = box;];
			qfconnect_QuickFeedServiceClient -> qfconnect_SubmissionStream;
			qfconnect_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			qfconnect_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			qfconnect_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			qfconnect_CreateGroup [label = "CreateGroup, Method";shape = box;];
			qfconnect_CreateReview [label = "CreateReview, Method";shape = box;];
			qfconnect_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			qfconnect_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			qfconnect_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			qfconnect_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qfconnect_GetCourse [label = "GetCourse, Method";shape = box;];
			qfconnect_GetCourses [label = "GetCourses, Method";shape = box;];
			qfconnect_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qfconnect_GetGroup [label = "GetGroup, Method";shape = box;];
			qfconnect_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			qfconnect_GetOrganization [label = "GetOrganization, Method";shape = box;];
			qfconnect_GetRepositories [label = "GetRepositories, Method";shape = box;];
			qfconnect_GetSubmission [label = "GetSubmission, Method";shape = box;];
			qfconnect_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qfconnect_GetSubmissionsByCourse [label = "GetSubmissionsByCourse, Method";shape = box;];
			qfconnect_GetUser [label = "GetUser, Method";shape = box;];
			qfconnect_GetUsers [label = "GetUsers, Method";shape = box;];
			qfconnect_IsEmptyRepo [label = "IsEmptyRepo, Method";shape = box;];
			qfconnect_RebuildSubmissions [label = "RebuildSubmissions, Method";shape = box;];
			qfconnect_SubmissionStream [label = "SubmissionStream, Method";shape = box;];
			qfconnect_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			qfconnect_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			qfconnect_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			qfconnect_UpdateCourseVisibility [label = "UpdateCourseVisibility, Method";shape = box;];
			qfconnect_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			qfconnect_UpdateEnrollments [label = "UpdateEnrollments, Method";shape = box;];
			qfconnect_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			qfconnect_UpdateReview [label = "UpdateReview, Method";shape = box;];
			qfconnect_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			qfconnect_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			qfconnect_UpdateUser [label = "UpdateUser, Method";shape = box;];
			qfconnect_NewQuickFeedServiceClient [label = "NewQuickFeedServiceClient, Function";shape = box;];
			qfconnect_quickFeedServiceClient [label = "quickFeedServiceClient, Struct";shape = box;];
			qfconnect_quickFeedServiceClient -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_quickFeedServiceClient -> qfconnect_GetUser;
			qfconnect_quickFeedServiceClient -> qfconnect_GetUsers;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateUser;
			qfconnect_quickFeedServiceClient -> qfconnect_GetGroup;
			qfconnect_quickFeedServiceClient -> qfconnect_GetGroupsByCourse;
			qfconnect_quickFeedServiceClient -> qfconnect_CreateGroup;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateGroup;
			qfconnect_quickFeedServiceClient -> qfconnect_DeleteGroup;
			qfconnect_quickFeedServiceClient -> qfconnect_GetCourse;
			qfconnect_quickFeedServiceClient -> qfconnect_GetCourses;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateCourse;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateCourseVisibility;
			qfconnect_quickFeedServiceClient -> qfconnect_GetAssignments;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateAssignments;
			qfconnect_quickFeedServiceClient -> qfconnect_GetEnrollments;
			qfconnect_quickFeedServiceClient -> qfconnect_CreateEnrollment;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateEnrollments;
			qfconnect_quickFeedServiceClient -> qfconnect_GetSubmission;
			qfconnect_quickFeedServiceClient -> qfconnect_GetSubmissions;
			qfconnect_quickFeedServiceClient -> qfconnect_GetSubmissionsByCourse;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateSubmission;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateSubmissions;
			qfconnect_quickFeedServiceClient -> qfconnect_RebuildSubmissions;
			qfconnect_quickFeedServiceClient -> qfconnect_CreateBenchmark;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateBenchmark;
			qfconnect_quickFeedServiceClient -> qfconnect_DeleteBenchmark;
			qfconnect_quickFeedServiceClient -> qfconnect_CreateCriterion;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateCriterion;
			qfconnect_quickFeedServiceClient -> qfconnect_DeleteCriterion;
			qfconnect_quickFeedServiceClient -> qfconnect_CreateReview;
			qfconnect_quickFeedServiceClient -> qfconnect_UpdateReview;
			qfconnect_quickFeedServiceClient -> qfconnect_GetOrganization;
			qfconnect_quickFeedServiceClient -> qfconnect_GetRepositories;
			qfconnect_quickFeedServiceClient -> qfconnect_IsEmptyRepo;
			qfconnect_createBenchmark [label = "createBenchmark, Field";shape = box;];
			qfconnect_createBenchmark -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_createBenchmark -> qfconnect_CreateBenchmark;
			qfconnect_createCriterion [label = "createCriterion, Field";shape = box;];
			qfconnect_createCriterion -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_createCriterion -> qfconnect_CreateCriterion;
			qfconnect_createEnrollment [label = "createEnrollment, Field";shape = box;];
			qfconnect_createEnrollment -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_createEnrollment -> qfconnect_CreateEnrollment;
			qfconnect_createGroup [label = "createGroup, Field";shape = box;];
			qfconnect_createGroup -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_createGroup -> qfconnect_CreateGroup;
			qfconnect_createReview [label = "createReview, Field";shape = box;];
			qfconnect_createReview -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_createReview -> qfconnect_CreateReview;
			qfconnect_deleteBenchmark [label = "deleteBenchmark, Field";shape = box;];
			qfconnect_deleteBenchmark -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_deleteBenchmark -> qfconnect_DeleteBenchmark;
			qfconnect_deleteCriterion [label = "deleteCriterion, Field";shape = box;];
			qfconnect_deleteCriterion -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_deleteCriterion -> qfconnect_DeleteCriterion;
			qfconnect_deleteGroup [label = "deleteGroup, Field";shape = box;];
			qfconnect_deleteGroup -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_deleteGroup -> qfconnect_DeleteGroup;
			qfconnect_getAssignments [label = "getAssignments, Field";shape = box;];
			qfconnect_getAssignments -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getAssignments -> qfconnect_GetAssignments;
			qfconnect_getCourse [label = "getCourse, Field";shape = box;];
			qfconnect_getCourse -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getCourse -> qfconnect_GetCourse;
			qfconnect_getCourses [label = "getCourses, Field";shape = box;];
			qfconnect_getCourses -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getCourses -> qfconnect_GetCourses;
			qfconnect_getEnrollments [label = "getEnrollments, Field";shape = box;];
			qfconnect_getEnrollments -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getEnrollments -> qfconnect_GetEnrollments;
			qfconnect_getGroup [label = "getGroup, Field";shape = box;];
			qfconnect_getGroup -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getGroup -> qfconnect_GetGroup;
			qfconnect_getGroupsByCourse [label = "getGroupsByCourse, Field";shape = box;];
			qfconnect_getGroupsByCourse -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getGroupsByCourse -> qfconnect_GetGroupsByCourse;
			qfconnect_getOrganization [label = "getOrganization, Field";shape = box;];
			qfconnect_getOrganization -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getOrganization -> qfconnect_GetOrganization;
			qfconnect_getRepositories [label = "getRepositories, Field";shape = box;];
			qfconnect_getRepositories -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getRepositories -> qfconnect_GetRepositories;
			qfconnect_getSubmission [label = "getSubmission, Field";shape = box;];
			qfconnect_getSubmission -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getSubmission -> qfconnect_GetSubmission;
			qfconnect_getSubmissions [label = "getSubmissions, Field";shape = box;];
			qfconnect_getSubmissions -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getSubmissions -> qfconnect_GetSubmissions;
			qfconnect_getSubmissionsByCourse [label = "getSubmissionsByCourse, Field";shape = box;];
			qfconnect_getSubmissionsByCourse -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getSubmissionsByCourse -> qfconnect_GetSubmissionsByCourse;
			qfconnect_getUser [label = "getUser, Field";shape = box;];
			qfconnect_getUser -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getUser -> qfconnect_GetUser;
			qfconnect_getUsers [label = "getUsers, Field";shape = box;];
			qfconnect_getUsers -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_getUsers -> qfconnect_GetUsers;
			qfconnect_isEmptyRepo [label = "isEmptyRepo, Field";shape = box;];
			qfconnect_isEmptyRepo -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_isEmptyRepo -> qfconnect_IsEmptyRepo;
			qfconnect_rebuildSubmissions [label = "rebuildSubmissions, Field";shape = box;];
			qfconnect_rebuildSubmissions -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_rebuildSubmissions -> qfconnect_RebuildSubmissions;
			qfconnect_submissionStream [label = "submissionStream, Field";shape = box;];
			qfconnect_submissionStream -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_submissionStream -> qfconnect_SubmissionStream;
			qfconnect_updateAssignments [label = "updateAssignments, Field";shape = box;];
			qfconnect_updateAssignments -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateAssignments -> qfconnect_UpdateAssignments;
			qfconnect_updateBenchmark [label = "updateBenchmark, Field";shape = box;];
			qfconnect_updateBenchmark -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateBenchmark -> qfconnect_UpdateBenchmark;
			qfconnect_updateCourse [label = "updateCourse, Field";shape = box;];
			qfconnect_updateCourse -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateCourse -> qfconnect_UpdateCourse;
			qfconnect_updateCourseVisibility [label = "updateCourseVisibility, Field";shape = box;];
			qfconnect_updateCourseVisibility -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateCourseVisibility -> qfconnect_UpdateCourseVisibility;
			qfconnect_updateCriterion [label = "updateCriterion, Field";shape = box;];
			qfconnect_updateCriterion -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateCriterion -> qfconnect_UpdateCriterion;
			qfconnect_updateEnrollments [label = "updateEnrollments, Field";shape = box;];
			qfconnect_updateEnrollments -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateEnrollments -> qfconnect_UpdateEnrollments;
			qfconnect_updateGroup [label = "updateGroup, Field";shape = box;];
			qfconnect_updateGroup -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateGroup -> qfconnect_UpdateGroup;
			qfconnect_updateReview [label = "updateReview, Field";shape = box;];
			qfconnect_updateReview -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateReview -> qfconnect_UpdateReview;
			qfconnect_updateSubmission [label = "updateSubmission, Field";shape = box;];
			qfconnect_updateSubmission -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateSubmission -> qfconnect_UpdateSubmission;
			qfconnect_updateSubmissions [label = "updateSubmissions, Field";shape = box;];
			qfconnect_updateSubmissions -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateSubmissions -> qfconnect_UpdateSubmissions;
			qfconnect_updateUser [label = "updateUser, Field";shape = box;];
			qfconnect_updateUser -> qfconnect_NewQuickFeedServiceClient;
			qfconnect_updateUser -> qfconnect_UpdateUser;
			qfconnect_GetUser [label = "GetUser, Method";shape = box;];
			qfconnect_GetUsers [label = "GetUsers, Method";shape = box;];
			qfconnect_UpdateUser [label = "UpdateUser, Method";shape = box;];
			qfconnect_GetGroup [label = "GetGroup, Method";shape = box;];
			qfconnect_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			qfconnect_CreateGroup [label = "CreateGroup, Method";shape = box;];
			qfconnect_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			qfconnect_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			qfconnect_GetCourse [label = "GetCourse, Method";shape = box;];
			qfconnect_GetCourses [label = "GetCourses, Method";shape = box;];
			qfconnect_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			qfconnect_UpdateCourseVisibility [label = "UpdateCourseVisibility, Method";shape = box;];
			qfconnect_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qfconnect_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			qfconnect_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qfconnect_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			qfconnect_UpdateEnrollments [label = "UpdateEnrollments, Method";shape = box;];
			qfconnect_GetSubmission [label = "GetSubmission, Method";shape = box;];
			qfconnect_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qfconnect_GetSubmissionsByCourse [label = "GetSubmissionsByCourse, Method";shape = box;];
			qfconnect_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			qfconnect_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			qfconnect_RebuildSubmissions [label = "RebuildSubmissions, Method";shape = box;];
			qfconnect_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			qfconnect_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			qfconnect_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			qfconnect_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			qfconnect_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			qfconnect_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			qfconnect_CreateReview [label = "CreateReview, Method";shape = box;];
			qfconnect_UpdateReview [label = "UpdateReview, Method";shape = box;];
			qfconnect_GetOrganization [label = "GetOrganization, Method";shape = box;];
			qfconnect_GetRepositories [label = "GetRepositories, Method";shape = box;];
			qfconnect_IsEmptyRepo [label = "IsEmptyRepo, Method";shape = box;];
			qfconnect_SubmissionStream [label = "SubmissionStream, Method";shape = box;];
			qfconnect_QuickFeedServiceHandler [label = "QuickFeedServiceHandler, Interface";shape = box;];
			qfconnect_QuickFeedServiceHandler -> qfconnect_SubmissionStream;
			qfconnect_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			qfconnect_CreateBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			qfconnect_CreateCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			qfconnect_CreateEnrollment -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateGroup [label = "CreateGroup, Method";shape = box;];
			qfconnect_CreateGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateReview [label = "CreateReview, Method";shape = box;];
			qfconnect_CreateReview -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			qfconnect_DeleteBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			qfconnect_DeleteCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			qfconnect_DeleteGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qfconnect_GetAssignments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetCourse [label = "GetCourse, Method";shape = box;];
			qfconnect_GetCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetCourses [label = "GetCourses, Method";shape = box;];
			qfconnect_GetCourses -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qfconnect_GetEnrollments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetGroup [label = "GetGroup, Method";shape = box;];
			qfconnect_GetGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			qfconnect_GetGroupsByCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetOrganization [label = "GetOrganization, Method";shape = box;];
			qfconnect_GetOrganization -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetRepositories [label = "GetRepositories, Method";shape = box;];
			qfconnect_GetRepositories -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmission [label = "GetSubmission, Method";shape = box;];
			qfconnect_GetSubmission -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qfconnect_GetSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmissionsByCourse [label = "GetSubmissionsByCourse, Method";shape = box;];
			qfconnect_GetSubmissionsByCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetUser [label = "GetUser, Method";shape = box;];
			qfconnect_GetUser -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetUsers [label = "GetUsers, Method";shape = box;];
			qfconnect_GetUsers -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_IsEmptyRepo [label = "IsEmptyRepo, Method";shape = box;];
			qfconnect_IsEmptyRepo -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_RebuildSubmissions [label = "RebuildSubmissions, Method";shape = box;];
			qfconnect_RebuildSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_SubmissionStream [label = "SubmissionStream, Method";shape = box;];
			qfconnect_SubmissionStream -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			qfconnect_UpdateAssignments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			qfconnect_UpdateBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			qfconnect_UpdateCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCourseVisibility [label = "UpdateCourseVisibility, Method";shape = box;];
			qfconnect_UpdateCourseVisibility -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			qfconnect_UpdateCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateEnrollments [label = "UpdateEnrollments, Method";shape = box;];
			qfconnect_UpdateEnrollments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			qfconnect_UpdateGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateReview [label = "UpdateReview, Method";shape = box;];
			qfconnect_UpdateReview -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			qfconnect_UpdateSubmission -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			qfconnect_UpdateSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateUser [label = "UpdateUser, Method";shape = box;];
			qfconnect_UpdateUser -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_NewQuickFeedServiceHandler [label = "NewQuickFeedServiceHandler, Function";shape = box;];
			qfconnect_UnimplementedQuickFeedServiceHandler [label = "UnimplementedQuickFeedServiceHandler, Struct";shape = box;];
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetUser;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetUsers;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateUser;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetGroup;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetGroupsByCourse;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_CreateGroup;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateGroup;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_DeleteGroup;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetCourse;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetCourses;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateCourse;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateCourseVisibility;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetAssignments;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateAssignments;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetEnrollments;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_CreateEnrollment;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateEnrollments;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetSubmission;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetSubmissions;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetSubmissionsByCourse;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateSubmission;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateSubmissions;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_RebuildSubmissions;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_CreateBenchmark;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateBenchmark;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_DeleteBenchmark;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_CreateCriterion;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateCriterion;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_DeleteCriterion;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_CreateReview;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_UpdateReview;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetOrganization;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_GetRepositories;
			qfconnect_UnimplementedQuickFeedServiceHandler -> qfconnect_IsEmptyRepo;
			qfconnect_GetUser [label = "GetUser, Method";shape = box;];
			qfconnect_GetUser -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetUsers [label = "GetUsers, Method";shape = box;];
			qfconnect_GetUsers -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateUser [label = "UpdateUser, Method";shape = box;];
			qfconnect_UpdateUser -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetGroup [label = "GetGroup, Method";shape = box;];
			qfconnect_GetGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			qfconnect_GetGroupsByCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateGroup [label = "CreateGroup, Method";shape = box;];
			qfconnect_CreateGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			qfconnect_UpdateGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			qfconnect_DeleteGroup -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetCourse [label = "GetCourse, Method";shape = box;];
			qfconnect_GetCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetCourses [label = "GetCourses, Method";shape = box;];
			qfconnect_GetCourses -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			qfconnect_UpdateCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCourseVisibility [label = "UpdateCourseVisibility, Method";shape = box;];
			qfconnect_UpdateCourseVisibility -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetAssignments [label = "GetAssignments, Method";shape = box;];
			qfconnect_GetAssignments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			qfconnect_UpdateAssignments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			qfconnect_GetEnrollments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			qfconnect_CreateEnrollment -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateEnrollments [label = "UpdateEnrollments, Method";shape = box;];
			qfconnect_UpdateEnrollments -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmission [label = "GetSubmission, Method";shape = box;];
			qfconnect_GetSubmission -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			qfconnect_GetSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetSubmissionsByCourse [label = "GetSubmissionsByCourse, Method";shape = box;];
			qfconnect_GetSubmissionsByCourse -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			qfconnect_UpdateSubmission -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			qfconnect_UpdateSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_RebuildSubmissions [label = "RebuildSubmissions, Method";shape = box;];
			qfconnect_RebuildSubmissions -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			qfconnect_CreateBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			qfconnect_UpdateBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			qfconnect_DeleteBenchmark -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			qfconnect_CreateCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			qfconnect_UpdateCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			qfconnect_DeleteCriterion -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_CreateReview [label = "CreateReview, Method";shape = box;];
			qfconnect_CreateReview -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_UpdateReview [label = "UpdateReview, Method";shape = box;];
			qfconnect_UpdateReview -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetOrganization [label = "GetOrganization, Method";shape = box;];
			qfconnect_GetOrganization -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_GetRepositories [label = "GetRepositories, Method";shape = box;];
			qfconnect_GetRepositories -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_IsEmptyRepo [label = "IsEmptyRepo, Method";shape = box;];
			qfconnect_IsEmptyRepo -> qfconnect_NewQuickFeedServiceHandler;
			qfconnect_SubmissionStream [label = "SubmissionStream, Method";shape = box;];
			qfconnect_SubmissionStream -> qfconnect_NewQuickFeedServiceHandler;
		}
	}
	subgraph cluster_assignments {
		label = "assignments (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_assignments_go {
			label = "assignments.go";
			labelloc="t";
			rankdir=TB;
			assignments_MaxWait [label = "MaxWait, Constant";shape = box;];
			assignments_MaxWait -> assignments_UpdateFromTestsRepo;
			assignments_updateMutex [label = "updateMutex, Variable";shape = box;];
			assignments_updateMutex -> assignments_UpdateFromTestsRepo;
			assignments_UpdateFromTestsRepo [label = "UpdateFromTestsRepo, Function";shape = box;];
			assignments_buildDockerImage [label = "buildDockerImage, Function";shape = box;];
			assignments_buildDockerImage -> assignments_UpdateFromTestsRepo;
		}
		assignments_buildDockerImage -> assignments_TestFetchAssignments;
		subgraph cluster_assignments_parser_go {
			label = "assignments_parser.go";
			labelloc="t";
			rankdir=TB;
			assignments_defaultAutoApproveScoreLimit [label = "defaultAutoApproveScoreLimit, Constant";shape = box;];
			assignments_defaultAutoApproveScoreLimit -> assignments_newAssignmentFromFile;
			assignments_assignmentData [label = "assignmentData, Struct";shape = box;];
			assignments_assignmentData -> assignments_newAssignmentFromFile;
			assignments_AutoApprove [label = "AutoApprove, Field";shape = box;];
			assignments_AutoApprove -> assignments_newAssignmentFromFile;
			assignments_ContainerTimeout [label = "ContainerTimeout, Field";shape = box;];
			assignments_ContainerTimeout -> assignments_newAssignmentFromFile;
			assignments_Deadline [label = "Deadline, Field";shape = box;];
			assignments_Deadline -> assignments_newAssignmentFromFile;
			assignments_IsGroupLab [label = "IsGroupLab, Field";shape = box;];
			assignments_IsGroupLab -> assignments_newAssignmentFromFile;
			assignments_Order [label = "Order, Field";shape = box;];
			assignments_Order -> assignments_newAssignmentFromFile;
			assignments_Reviewers [label = "Reviewers, Field";shape = box;];
			assignments_Reviewers -> assignments_newAssignmentFromFile;
			assignments_ScoreLimit [label = "ScoreLimit, Field";shape = box;];
			assignments_ScoreLimit -> assignments_newAssignmentFromFile;
			assignments_newAssignmentFromFile [label = "newAssignmentFromFile, Function";shape = box;];
			assignments_FixDeadline [label = "FixDeadline, Function";shape = box;];
			assignments_FixDeadline -> assignments_newAssignmentFromFile;
		}
		assignments_newAssignmentFromFile -> assignments_readTestsRepositoryContent;
		assignments_FixDeadline -> assignments_TestFixDeadline;
		subgraph cluster_assignments_parser_test_go {
			label = "assignments_parser_test.go";
			labelloc="t";
			rankdir=TB;
			assignments_TestParseWithInvalidDir [label = "TestParseWithInvalidDir, Function";shape = box;];
			assignments_y1 [label = "y1, Constant";shape = box;];
			assignments_y1 -> assignments_TestParseOneBadAssignmentAmongCorrectOnes;
			assignments_y1 -> assignments_TestParseAndSaveAssignment;
			assignments_y1 -> assignments_TestParse;
			assignments_y2 [label = "y2, Constant";shape = box;];
			assignments_y2 -> assignments_TestParse;
			assignments_y2 -> assignments_TestParseOneBadAssignmentAmongCorrectOnes;
			assignments_y2 -> assignments_TestParseAndSaveAssignment;
			assignments_y3 [label = "y3, Constant";shape = box;];
			assignments_y3 -> assignments_TestParseAndSaveAssignment;
			assignments_yOldAssignmentIDField [label = "yOldAssignmentIDField, Constant";shape = box;];
			assignments_yOldAssignmentIDField -> assignments_TestParseOldAssignmentIDField;
			assignments_yOldAssignmentIDField -> assignments_TestParseOneBadAssignmentAmongCorrectOnes;
			assignments_yUnknownFields [label = "yUnknownFields, Constant";shape = box;];
			assignments_yUnknownFields -> assignments_TestParseUnknownFields;
			assignments_script [label = "script, Constant";shape = box;];
			assignments_script -> assignments_TestParse;
			assignments_script1 [label = "script1, Constant";shape = box;];
			assignments_script1 -> assignments_TestParse;
			assignments_df [label = "df, Constant";shape = box;];
			assignments_df -> assignments_TestParse;
			assignments_criteria [label = "criteria, Constant";shape = box;];
			assignments_criteria -> assignments_TestParse;
			assignments_writeFile [label = "writeFile, Function";shape = box;];
			assignments_writeFile -> assignments_TestParse;
			assignments_writeFile -> assignments_TestParseOldAssignmentIDField;
			assignments_writeFile -> assignments_TestParseOneBadAssignmentAmongCorrectOnes;
			assignments_writeFile -> assignments_TestParseUnknownFields;
			assignments_writeFile -> assignments_TestParseAndSaveAssignment;
			assignments_TestParse [label = "TestParse, Function";shape = box;];
			assignments_TestParseOldAssignmentIDField [label = "TestParseOldAssignmentIDField, Function";shape = box;];
			assignments_TestParseOneBadAssignmentAmongCorrectOnes [label = "TestParseOneBadAssignmentAmongCorrectOnes, Function";shape = box;];
			assignments_TestParseUnknownFields [label = "TestParseUnknownFields, Function";shape = box;];
			assignments_TestParseAndSaveAssignment [label = "TestParseAndSaveAssignment, Function";shape = box;];
			assignments_TestFixDeadline [label = "TestFixDeadline, Function";shape = box;];
		}
		subgraph cluster_assignments_test_go {
			label = "assignments_test.go";
			labelloc="t";
			rankdir=TB;
			assignments_dockerClient [label = "dockerClient, Function";shape = box;];
			assignments_dockerClient -> assignments_TestFetchAssignments;
			assignments_TestFetchAssignments [label = "TestFetchAssignments, Function";shape = box;];
			assignments_TestUpdateCriteria [label = "TestUpdateCriteria, Function";shape = box;];
		}
		subgraph cluster_pull_requests_go {
			label = "pull_requests.go";
			labelloc="t";
			rankdir=TB;
			assignments_countMap [label = "countMap, Class";shape = box;];
			assignments_countMap -> assignments_;
			assignments_countMap -> assignments_initialize;
			assignments_initialize [label = "initialize, Method";shape = box;];
			assignments_initialize -> assignments_getNextTeacherReviewer;
			assignments_initialize -> assignments_getNextStudentReviewer;
			assignments_teacherReviewCounter [label = "teacherReviewCounter, Variable";shape = box;];
			assignments_teacherReviewCounter -> assignments_getNextTeacherReviewer;
			assignments_groupReviewCounter [label = "groupReviewCounter, Variable";shape = box;];
			assignments_groupReviewCounter -> assignments_getNextStudentReviewer;
			assignments_AssignReviewers [label = "AssignReviewers, Function";shape = box;];
			assignments_getNextReviewer [label = "getNextReviewer, Function";shape = box;];
			assignments_getNextReviewer -> assignments_getNextTeacherReviewer;
			assignments_getNextReviewer -> assignments_getNextStudentReviewer;
			assignments_getNextTeacherReviewer [label = "getNextTeacherReviewer, Function";shape = box;];
			assignments_getNextTeacherReviewer -> assignments_AssignReviewers;
			assignments_getNextStudentReviewer [label = "getNextStudentReviewer, Function";shape = box;];
			assignments_getNextStudentReviewer -> assignments_AssignReviewers;
		}
		assignments_countMap -> assignments_TestGetNextReviewer;
		assignments_initialize -> assignments_TestGetNextReviewer;
		assignments_getNextReviewer -> assignments_TestGetNextReviewer;
		subgraph cluster_pull_requests_test_go {
			label = "pull_requests_test.go";
			labelloc="t";
			rankdir=TB;
			assignments_TestGetNextReviewer [label = "TestGetNextReviewer, Function";shape = box;];
		}
		subgraph cluster_tasks_go {
			label = "tasks.go";
			labelloc="t";
			rankdir=TB;
			assignments_taskName [label = "taskName, Function";shape = box;];
			assignments_newTask [label = "newTask, Function";shape = box;];
			assignments_tasksFromAssignments [label = "tasksFromAssignments, Function";shape = box;];
			assignments_tasksFromAssignments -> assignments_synchronizeTasksWithIssues;
			assignments_mapTasksByID [label = "mapTasksByID, Function";shape = box;];
			assignments_mapTasksByID -> assignments_updateIssues;
			assignments_synchronizeTasksWithIssues [label = "synchronizeTasksWithIssues, Function";shape = box;];
			assignments_createIssues [label = "createIssues, Function";shape = box;];
			assignments_createIssues -> assignments_synchronizeTasksWithIssues;
			assignments_updateIssues [label = "updateIssues, Function";shape = box;];
			assignments_updateIssues -> assignments_synchronizeTasksWithIssues;
		}
		assignments_taskName -> assignments_readTestsRepositoryContent;
		assignments_newTask -> assignments_readTestsRepositoryContent;
		assignments_synchronizeTasksWithIssues -> assignments_UpdateFromTestsRepo;
		assignments_synchronizeTasksWithIssues -> assignments_TestSynchronizeTasksWithIssues;
		subgraph cluster_tasks_test_go {
			label = "tasks_test.go";
			labelloc="t";
			rankdir=TB;
			assignments_TestSynchronizeTasksWithIssues [label = "TestSynchronizeTasksWithIssues, Function";shape = box;];
			assignments_repoFn [label = "repoFn, Function";shape = box;];
			assignments_repoFn -> assignments_TestSynchronizeTasksWithIssues;
			assignments_initDatabase [label = "initDatabase, Function";shape = box;];
			assignments_initDatabase -> assignments_TestSynchronizeTasksWithIssues;
		}
		subgraph cluster_walk_tests_repo_go {
			label = "walk_tests_repo.go";
			labelloc="t";
			rankdir=TB;
			assignments_assignmentFile [label = "assignmentFile, Constant";shape = box;];
			assignments_assignmentFile -> assignments_;
			assignments_assignmentFile -> assignments_readTestsRepositoryContent;
			assignments_assignmentFileYaml [label = "assignmentFileYaml, Constant";shape = box;];
			assignments_assignmentFileYaml -> assignments_;
			assignments_assignmentFileYaml -> assignments_readTestsRepositoryContent;
			assignments_criteriaFile [label = "criteriaFile, Constant";shape = box;];
			assignments_criteriaFile -> assignments_;
			assignments_criteriaFile -> assignments_readTestsRepositoryContent;
			assignments_dockerfile [label = "dockerfile, Constant";shape = box;];
			assignments_dockerfile -> assignments_;
			assignments_dockerfile -> assignments_readTestsRepositoryContent;
			assignments_taskFilePattern [label = "taskFilePattern, Constant";shape = box;];
			assignments_taskFilePattern -> assignments_;
			assignments_taskFilePattern -> assignments_readTestsRepositoryContent;
			assignments_patterns [label = "patterns, Variable";shape = box;];
			assignments_patterns -> assignments_matchAny;
			assignments_matchAny [label = "matchAny, Function";shape = box;];
			assignments_matchAny -> assignments_walkTestsRepository;
			assignments_match [label = "match, Function";shape = box;];
			assignments_match -> assignments_readTestsRepositoryContent;
			assignments_readTestsRepositoryContent [label = "readTestsRepositoryContent, Function";shape = box;];
			assignments_walkTestsRepository [label = "walkTestsRepository, Function";shape = box;];
			assignments_walkTestsRepository -> assignments_readTestsRepositoryContent;
		}
		assignments_readTestsRepositoryContent -> assignments_UpdateFromTestsRepo;
		assignments_readTestsRepositoryContent -> assignments_TestParse;
		assignments_readTestsRepositoryContent -> assignments_TestParseWithInvalidDir;
		assignments_readTestsRepositoryContent -> assignments_TestParseOldAssignmentIDField;
		assignments_readTestsRepositoryContent -> assignments_TestParseOneBadAssignmentAmongCorrectOnes;
		assignments_readTestsRepositoryContent -> assignments_TestParseUnknownFields;
		assignments_readTestsRepositoryContent -> assignments_TestParseAndSaveAssignment;
		assignments_readTestsRepositoryContent -> assignments_TestFetchAssignments;
		assignments_readTestsRepositoryContent -> assignments_TestReadTestsRepositoryContent;
		assignments_readTestsRepositoryContent -> assignments_checkLabWithInvalidCriteriaFile;
		assignments_walkTestsRepository -> assignments_TestWalkTestsRepository;
		subgraph cluster_walk_tests_repo_test_go {
			label = "walk_tests_repo_test.go";
			labelloc="t";
			rankdir=TB;
			assignments_testsFolder [label = "testsFolder, Constant";shape = box;];
			assignments_testsFolder -> assignments_TestReadTestsRepositoryContent;
			assignments_testsFolder -> assignments_TestWalkTestsRepository;
			assignments_TestWalkTestsRepository [label = "TestWalkTestsRepository, Function";shape = box;];
			assignments_TestReadTestsRepositoryContent [label = "TestReadTestsRepositoryContent, Function";shape = box;];
			assignments_TestReadTestsRepositoryContentForInvalidCriteriaFiles [label = "TestReadTestsRepositoryContentForInvalidCriteriaFiles, Function";shape = box;];
			assignments_checkLabWithInvalidCriteriaFile [label = "checkLabWithInvalidCriteriaFile, Function";shape = box;];
			assignments_checkLabWithInvalidCriteriaFile -> assignments_TestReadTestsRepositoryContentForInvalidCriteriaFiles;
			assignments_isUnmarshalError [label = "isUnmarshalError, Function";shape = box;];
			assignments_isUnmarshalError -> assignments_checkLabWithInvalidCriteriaFile;
		}
	}
	subgraph cluster_testdata {
		label = "testdata (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_invalidJsonTests {
		label = "invalidJsonTests (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_invalidTypes {
		label = "invalidTypes (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_negativeInteger {
		label = "negativeInteger (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_tests {
		label = "tests (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_metrics {
		label = "metrics (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_prometheus_go {
			label = "prometheus.go";
			labelloc="t";
			rankdir=TB;
			metrics_reg [label = "reg, Variable";shape = box;];
			metrics_reg -> metrics_init;
			metrics_reg -> metrics_Handler;
			metrics_init [label = "init, Function";shape = box;];
			metrics_Handler [label = "Handler, Function";shape = box;];
		}
	}
	subgraph cluster_scm {
		label = "scm (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_env_helper_go {
			label = "env_helper.go";
			labelloc="t";
			rankdir=TB;
			scm_GetTestOrganization [label = "GetTestOrganization, Function";shape = box;];
			scm_GetTestOrganization -> scm_GetAppSCM;
			scm_GetTestSCM [label = "GetTestSCM, Function";shape = box;];
			scm_GetAccessToken [label = "GetAccessToken, Function";shape = box;];
			scm_GetAccessToken -> scm_GetTestSCM;
			scm_envFile [label = "envFile, Constant";shape = box;];
			scm_envFile -> scm_GetSCMManager;
			scm_appName [label = "appName, Constant";shape = box;];
			scm_appName -> scm_GetAppSCM;
			scm_appName -> scm_GetSCMManager;
			scm_appCreateInstructions [label = "appCreateInstructions, Constant";shape = box;];
			scm_appCreateInstructions -> scm_GetSCMManager;
			scm_InstallInstructions [label = "InstallInstructions, Constant";shape = box;];
			scm_InstallInstructions -> scm_GetAppSCM;
			scm_mgr [label = "mgr, Variable";shape = box;];
			scm_mgr -> scm_GetSCMManager;
			scm_mgr -> scm_GetAppSCM;
			scm_once [label = "once, Variable";shape = box;];
			scm_once -> scm_GetSCMManager;
			scm_GetSCMManager [label = "GetSCMManager, Function";shape = box;];
			scm_GetSCMManager -> scm_GetAppSCM;
			scm_GetAppSCM [label = "GetAppSCM, Function";shape = box;];
		}
		scm_GetTestOrganization -> scm_TestCloneTwice;
		scm_GetTestOrganization -> scm_TestCloneBranch;
		scm_GetTestOrganization -> scm_TestClone;
		scm_GetTestOrganization -> scm_TestDeleteAllIssues;
		scm_GetTestOrganization -> scm_TestRequestReviewers;
		scm_GetTestOrganization -> scm_TestCreateIssueComment;
		scm_GetTestOrganization -> scm_TestFeedbackCommentFormat;
		scm_GetTestOrganization -> scm_TestGetOrganization;
		scm_GetTestOrganization -> scm_TestEmptyRepo;
		scm_GetTestOrganization -> scm_TestCreateIssue;
		scm_GetTestOrganization -> scm_TestGetIssue;
		scm_GetTestOrganization -> scm_TestUpdateIssue;
		scm_GetTestOrganization -> scm_TestSCMManager;
		scm_GetTestSCM -> scm_TestCloneTwice;
		scm_GetTestSCM -> scm_TestCloneBranch;
		scm_GetTestSCM -> scm_TestClone;
		scm_GetTestSCM -> scm_TestDeleteAllIssues;
		scm_GetTestSCM -> scm_TestRequestReviewers;
		scm_GetTestSCM -> scm_TestCreateIssueComment;
		scm_GetTestSCM -> scm_TestFeedbackCommentFormat;
		scm_GetTestSCM -> scm_TestEmptyRepo;
		scm_GetTestSCM -> scm_TestGetOrganization;
		scm_GetTestSCM -> scm_TestCreateIssue;
		scm_GetTestSCM -> scm_TestGetIssue;
		scm_GetTestSCM -> scm_TestUpdateIssue;
		scm_InstallInstructions -> scm_TestSCMManager;
		scm_GetSCMManager -> scm_TestSCMManager;
		subgraph cluster_fetcher_go {
			label = "fetcher.go";
			labelloc="t";
			rankdir=TB;
			scm_authUserName [label = "authUserName, Constant";shape = box;];
			scm_authUserName -> scm_Clone;
			scm_Clone [label = "Clone, Method";shape = box;];
			scm_cloneURL [label = "cloneURL, Method";shape = box;];
			scm_cloneURL -> scm_Clone;
			scm_CloneOptions [label = "CloneOptions, Struct";shape = box;];
			scm_CloneOptions -> scm_;
			scm_CloneOptions -> scm_Clone;
			scm_Branch [label = "Branch, Field";shape = box;];
			scm_Branch -> scm_Clone;
			scm_DestDir [label = "DestDir, Field";shape = box;];
			scm_DestDir -> scm_Clone;
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_Clone;
			scm_Organization -> scm_cloneURL;
			scm_Repository [label = "Repository, Field";shape = box;];
			scm_Repository -> scm_Clone;
			scm_Repository -> scm_cloneURL;
		}
		scm_Clone -> scm_TestCloneTwice;
		scm_Clone -> scm_TestCloneBranch;
		scm_Clone -> scm_TestFileClone;
		scm_Clone -> scm_TestClone;
		scm_CloneOptions -> scm_TestCloneTwice;
		scm_CloneOptions -> scm_TestCloneBranch;
		scm_CloneOptions -> scm_TestFileClone;
		scm_CloneOptions -> scm_TestClone;
		scm_CloneOptions -> scm_DeleteGroup;
		scm_Branch -> scm_TestCloneBranch;
		scm_DestDir -> scm_TestClone;
		scm_DestDir -> scm_TestCloneTwice;
		scm_DestDir -> scm_TestCloneBranch;
		scm_DestDir -> scm_TestFileClone;
		scm_Organization -> scm_TestClone;
		scm_Organization -> scm_TestCloneTwice;
		scm_Organization -> scm_TestCloneBranch;
		scm_Organization -> scm_TestFileClone;
		scm_Repository -> scm_TestClone;
		scm_Repository -> scm_TestCloneTwice;
		scm_Repository -> scm_TestCloneBranch;
		scm_Repository -> scm_TestFileClone;
		subgraph cluster_fetcher_test_go {
			label = "fetcher_test.go";
			labelloc="t";
			rankdir=TB;
			scm_prepareGitRepo [label = "prepareGitRepo, Function";shape = box;];
			scm_prepareGitRepo -> scm_TestFileClone;
			scm_TestFileClone [label = "TestFileClone, Function";shape = box;];
			scm_TestClone [label = "TestClone, Function";shape = box;];
			scm_appendToFile [label = "appendToFile, Function";shape = box;];
			scm_appendToFile -> scm_TestCloneTwice;
			scm_TestCloneTwice [label = "TestCloneTwice, Function";shape = box;];
			scm_TestCloneBranch [label = "TestCloneBranch, Function";shape = box;];
			scm_exists [label = "exists, Function";shape = box;];
			scm_exists -> scm_TestClone;
			scm_exists -> scm_TestCloneTwice;
			scm_exists -> scm_TestCloneBranch;
			scm_exists -> scm_TestFileClone;
		}
		subgraph cluster_github_go {
			label = "github.go";
			labelloc="t";
			rankdir=TB;
			scm_GithubSCM [label = "GithubSCM, Struct";shape = box;];
			scm_GithubSCM -> scm_GetOrganization;
			scm_GithubSCM -> scm_GetRepositories;
			scm_GithubSCM -> scm_RepositoryIsEmpty;
			scm_GithubSCM -> scm_CreateCourse;
			scm_GithubSCM -> scm_UpdateEnrollment;
			scm_GithubSCM -> scm_RejectEnrollment;
			scm_GithubSCM -> scm_DemoteTeacherToStudent;
			scm_GithubSCM -> scm_CreateGroup;
			scm_GithubSCM -> scm_;
			scm_GithubSCM -> scm_UpdateGroupMembers;
			scm_GithubSCM -> scm_DeleteGroup;
			scm_GithubSCM -> scm_getRepository;
			scm_GithubSCM -> scm_NewGithubSCMClient;
			scm_GithubSCM -> scm_createRepository;
			scm_GithubSCM -> scm_deleteRepository;
			scm_GithubSCM -> scm_createStudentRepo;
			scm_GithubSCM -> scm_updatePermission;
			scm_GithubSCM -> scm_addUser;
			scm_client [label = "client, Field";shape = box;];
			scm_client -> scm_GetRepositories;
			scm_client -> scm_RepositoryIsEmpty;
			scm_client -> scm_CreateCourse;
			scm_client -> scm_RejectEnrollment;
			scm_client -> scm_UpdateGroupMembers;
			scm_client -> scm_getRepository;
			scm_client -> scm_createRepository;
			scm_client -> scm_NewGithubSCMClient;
			scm_client -> scm_deleteRepository;
			scm_client -> scm_updatePermission;
			scm_client -> scm_addUser;
			scm_client -> scm_Client;
			scm_client -> scm_GetOrganization;
			scm_clientV4 [label = "clientV4, Field";shape = box;];
			scm_clientV4 -> scm_NewGithubSCMClient;
			scm_config [label = "config, Field";shape = box;];
			scm_logger [label = "logger, Field";shape = box;];
			scm_logger -> scm_RepositoryIsEmpty;
			scm_logger -> scm_createRepository;
			scm_logger -> scm_NewGithubSCMClient;
			scm_providerURL [label = "providerURL, Field";shape = box;];
			scm_providerURL -> scm_NewGithubSCMClient;
			scm_token [label = "token, Field";shape = box;];
			scm_token -> scm_NewGithubSCMClient;
			scm_tokenURL [label = "tokenURL, Field";shape = box;];
			scm_NewGithubSCMClient [label = "NewGithubSCMClient, Function";shape = box;];
			scm_GetOrganization [label = "GetOrganization, Method";shape = box;];
			scm_GetOrganization -> scm_CreateCourse;
			scm_GetOrganization -> scm_UpdateEnrollment;
			scm_GetOrganization -> scm_RejectEnrollment;
			scm_GetOrganization -> scm_CreateGroup;
			scm_GetRepositories [label = "GetRepositories, Method";shape = box;];
			scm_GetRepositories -> scm_GetOrganization;
			scm_RepositoryIsEmpty [label = "RepositoryIsEmpty, Method";shape = box;];
			scm_CreateCourse [label = "CreateCourse, Method";shape = box;];
			scm_UpdateEnrollment [label = "UpdateEnrollment, Method";shape = box;];
			scm_RejectEnrollment [label = "RejectEnrollment, Method";shape = box;];
			scm_DemoteTeacherToStudent [label = "DemoteTeacherToStudent, Method";shape = box;];
			scm_CreateGroup [label = "CreateGroup, Method";shape = box;];
			scm_UpdateGroupMembers [label = "UpdateGroupMembers, Method";shape = box;];
			scm_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			scm_getRepository [label = "getRepository, Method";shape = box;];
			scm_getRepository -> scm_RepositoryIsEmpty;
			scm_getRepository -> scm_CreateGroup;
			scm_createRepository [label = "createRepository, Method";shape = box;];
			scm_createRepository -> scm_CreateCourse;
			scm_createRepository -> scm_CreateGroup;
			scm_createRepository -> scm_createStudentRepo;
			scm_deleteRepository [label = "deleteRepository, Method";shape = box;];
			scm_deleteRepository -> scm_RejectEnrollment;
			scm_deleteRepository -> scm_DeleteGroup;
			scm_createStudentRepo [label = "createStudentRepo, Method";shape = box;];
			scm_createStudentRepo -> scm_CreateCourse;
			scm_createStudentRepo -> scm_UpdateEnrollment;
			scm_updatePermission [label = "updatePermission, Method";shape = box;];
			scm_updatePermission -> scm_UpdateEnrollment;
			scm_updatePermission -> scm_DemoteTeacherToStudent;
			scm_addUser [label = "addUser, Method";shape = box;];
			scm_addUser -> scm_UpdateEnrollment;
			scm_addUser -> scm_CreateGroup;
			scm_addUser -> scm_UpdateGroupMembers;
			scm_addUser -> scm_createStudentRepo;
			scm_Client [label = "Client, Method";shape = box;];
			scm_toRepository [label = "toRepository, Function";shape = box;];
			scm_toRepository -> scm_GetRepositories;
			scm_toRepository -> scm_getRepository;
			scm_toRepository -> scm_createRepository;
		}
		scm_GithubSCM -> scm_GetTestOrganization;
		scm_GithubSCM -> scm_;
		scm_GithubSCM -> scm_Clone;
		scm_GithubSCM -> scm_newGithubAppClient;
		scm_GithubSCM -> scm_ExchangeToken;
		scm_GithubSCM -> scm_newGithubInviteClient;
		scm_GithubSCM -> scm_CreateIssueComment;
		scm_GithubSCM -> scm_UpdateIssueComment;
		scm_GithubSCM -> scm_CreateIssue;
		scm_GithubSCM -> scm_UpdateIssue;
		scm_GithubSCM -> scm_GetIssue;
		scm_GithubSCM -> scm_GetIssues;
		scm_GithubSCM -> scm_NewMockedGithubSCMClient;
		scm_GithubSCM -> scm_DeleteIssue;
		scm_client -> scm_GetTestSCM;
		scm_client -> scm_newGithubAppClient;
		scm_client -> scm_AcceptInvitations;
		scm_client -> scm_UpdateIssueComment;
		scm_client -> scm_RequestReviewers;
		scm_client -> scm_CreateIssue;
		scm_client -> scm_UpdateIssue;
		scm_client -> scm_GetIssue;
		scm_client -> scm_GetIssues;
		scm_client -> scm_CreateIssueComment;
		scm_client -> scm_NewMockedGithubSCMClient;
		scm_client -> scm_DeleteIssues;
		scm_clientV4 -> scm_newGithubAppClient;
		scm_clientV4 -> scm_NewMockedGithubSCMClient;
		scm_clientV4 -> scm_DeleteIssue;
		scm_config -> scm_Clone;
		scm_config -> scm_newGithubAppClient;
		scm_config -> scm_refreshToken;
		scm_config -> scm_AcceptInvitations;
		scm_logger -> scm_Clone;
		scm_logger -> scm_newGithubAppClient;
		scm_logger -> scm_CreateIssue;
		scm_logger -> scm_UpdateIssue;
		scm_logger -> scm_NewMockedGithubSCMClient;
		scm_providerURL -> scm_cloneURL;
		scm_providerURL -> scm_newGithubAppClient;
		scm_providerURL -> scm_NewMockedGithubSCMClient;
		scm_token -> scm_Clone;
		scm_token -> scm_refreshToken;
		scm_tokenURL -> scm_newGithubAppClient;
		scm_tokenURL -> scm_refreshToken;
		scm_NewGithubSCMClient -> scm_GetTestSCM;
		scm_NewGithubSCMClient -> scm_NewSCMClient;
		scm_GetOrganization -> scm_TestMockGetOrganization;
		scm_GetOrganization -> scm_TestGetOrganization;
		scm_GetOrganization -> scm_TestErrorGetOrganization;
		scm_GetRepositories -> scm_TestMockGetRepositories;
		scm_RepositoryIsEmpty -> scm_TestMockRepositoryIsEmpty;
		scm_RepositoryIsEmpty -> scm_TestEmptyRepo;
		scm_CreateCourse -> scm_TestMockCreateCourse;
		scm_CreateCourse -> scm_TestErrorCreateCourse;
		scm_UpdateEnrollment -> scm_TestMockUpdateEnrollment;
		scm_UpdateEnrollment -> scm_TestErrorUpdateEnrollment;
		scm_RejectEnrollment -> scm_TestMockRejectEnrollment;
		scm_RejectEnrollment -> scm_TestErrorRejectEnrollment;
		scm_DemoteTeacherToStudent -> scm_TestMockDemoteTeacherToStudent;
		scm_DemoteTeacherToStudent -> scm_TestErrorDemoteTeacherToStudent;
		scm_CreateGroup -> scm_TestMockCreateGroup;
		scm_CreateGroup -> scm_TestErrorCreateGroup;
		scm_UpdateGroupMembers -> scm_TestMockUpdateGroupMembers;
		scm_UpdateGroupMembers -> scm_TestErrorUpdateGroupMembers;
		scm_DeleteGroup -> scm_TestMockDeleteGroup;
		scm_Client -> scm_TestRequestReviewers;
		subgraph cluster_github_app_go {
			label = "github_app.go";
			labelloc="t";
			rankdir=TB;
			scm_newGithubAppClient [label = "newGithubAppClient, Function";shape = box;];
			scm_fetchInstallation [label = "fetchInstallation, Method";shape = box;];
			scm_fetchInstallation -> scm_newGithubAppClient;
			scm_ExchangeToken [label = "ExchangeToken, Struct";shape = box;];
			scm_ExchangeToken -> scm_fetchInstallation;
			scm_ExchangeToken -> scm_ExchangeToken;
			scm_AccessToken [label = "AccessToken, Field";shape = box;];
			scm_AccessToken -> scm_ExchangeToken;
			scm_RefreshToken [label = "RefreshToken, Field";shape = box;];
			scm_RefreshToken -> scm_ExchangeToken;
			scm_ExchangeToken [label = "ExchangeToken, Method";shape = box;];
			scm_refreshToken [label = "refreshToken, Method";shape = box;];
		}
		scm_newGithubAppClient -> scm_newSCMAppClient;
		scm_AccessToken -> scm_AcceptInvitations;
		scm_RefreshToken -> scm_AcceptInvitations;
		scm_ExchangeToken -> scm_AcceptInvitations;
		scm_refreshToken -> scm_Clone;
		subgraph cluster_github_invite_go {
			label = "github_invite.go";
			labelloc="t";
			rankdir=TB;
			scm_newGithubInviteClient [label = "newGithubInviteClient, Function";shape = box;];
			scm_newGithubInviteClient -> scm_AcceptInvitations;
			scm_AcceptInvitations [label = "AcceptInvitations, Method";shape = box;];
		}
		subgraph cluster_github_issues_go {
			label = "github_issues.go";
			labelloc="t";
			rankdir=TB;
			scm_CreateIssue [label = "CreateIssue, Method";shape = box;];
			scm_UpdateIssue [label = "UpdateIssue, Method";shape = box;];
			scm_GetIssue [label = "GetIssue, Method";shape = box;];
			scm_GetIssues [label = "GetIssues, Method";shape = box;];
			scm_CreateIssueComment [label = "CreateIssueComment, Method";shape = box;];
			scm_UpdateIssueComment [label = "UpdateIssueComment, Method";shape = box;];
			scm_RequestReviewers [label = "RequestReviewers, Method";shape = box;];
			scm_toIssue [label = "toIssue, Function";shape = box;];
			scm_toIssue -> scm_CreateIssue;
			scm_toIssue -> scm_UpdateIssue;
			scm_toIssue -> scm_GetIssue;
			scm_toIssue -> scm_GetIssues;
		}
		scm_CreateIssue -> scm_TestMockDeleteIssues;
		scm_CreateIssue -> scm_TestMockUpdateIssue;
		scm_CreateIssue -> scm_TestMockGetIssue;
		scm_CreateIssue -> scm_TestMockGetIssues;
		scm_CreateIssue -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_CreateIssue -> scm_TestMockCreateIssueComment;
		scm_CreateIssue -> scm_TestMockUpdateIssueComment;
		scm_CreateIssue -> scm_TestMockCreateIssue;
		scm_CreateIssue -> scm_TestMockDeleteIssue;
		scm_CreateIssue -> scm_createIssue;
		scm_UpdateIssue -> scm_TestMockUpdateIssue;
		scm_UpdateIssue -> scm_TestUpdateIssue;
		scm_GetIssue -> scm_TestMockGetIssue;
		scm_GetIssue -> scm_TestGetIssue;
		scm_GetIssues -> scm_TestMockDeleteIssue;
		scm_GetIssues -> scm_TestMockDeleteIssues;
		scm_GetIssues -> scm_TestMockGetIssues;
		scm_GetIssues -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_CreateIssueComment -> scm_TestMockCreateIssueComment;
		scm_CreateIssueComment -> scm_TestMockUpdateIssueComment;
		scm_CreateIssueComment -> scm_TestCreateIssueComment;
		scm_CreateIssueComment -> scm_TestFeedbackCommentFormat;
		scm_UpdateIssueComment -> scm_TestMockUpdateIssueComment;
		scm_UpdateIssueComment -> scm_TestFeedbackCommentFormat;
		scm_RequestReviewers -> scm_TestMockRequestReviewers;
		scm_RequestReviewers -> scm_TestRequestReviewers;
		subgraph cluster_github_issues_mock_test_go {
			label = "github_issues_mock_test.go";
			labelloc="t";
			rankdir=TB;
			scm_TestMockCreateIssue [label = "TestMockCreateIssue, Function";shape = box;];
			scm_TestMockDeleteIssue [label = "TestMockDeleteIssue, Function";shape = box;];
			scm_TestMockDeleteIssues [label = "TestMockDeleteIssues, Function";shape = box;];
			scm_TestMockUpdateIssue [label = "TestMockUpdateIssue, Function";shape = box;];
			scm_TestMockGetIssue [label = "TestMockGetIssue, Function";shape = box;];
			scm_TestMockGetIssues [label = "TestMockGetIssues, Function";shape = box;];
			scm_TestMockGetIssues_CheckIssueNumbers [label = "TestMockGetIssues_CheckIssueNumbers, Function";shape = box;];
			scm_TestMockCreateIssueComment [label = "TestMockCreateIssueComment, Function";shape = box;];
			scm_TestMockUpdateIssueComment [label = "TestMockUpdateIssueComment, Function";shape = box;];
			scm_TestMockRequestReviewers [label = "TestMockRequestReviewers, Function";shape = box;];
		}
		subgraph cluster_github_mock_go {
			label = "github_mock.go";
			labelloc="t";
			rankdir=TB;
			scm_jsonFolderContent [label = "jsonFolderContent, Variable";shape = box;];
			scm_jsonFolderContent -> scm_NewMockedGithubSCMClient;
			scm_MockedGithubSCM [label = "MockedGithubSCM, Struct";shape = box;];
			scm_MockedGithubSCM -> scm_;
			scm_MockedGithubSCM -> scm_nextIssueNumber;
			scm_MockedGithubSCM -> scm_NewMockedGithubSCMClient;
			scm_GithubSCM [label = "GithubSCM, Field";shape = box;];
			scm_GithubSCM -> scm_NewMockedGithubSCMClient;
			scm_commentID [label = "commentID, Field";shape = box;];
			scm_commentID -> scm_NewMockedGithubSCMClient;
			scm_issueID [label = "issueID, Field";shape = box;];
			scm_issueID -> scm_NewMockedGithubSCMClient;
			scm_issueNumber [label = "issueNumber, Field";shape = box;];
			scm_issueNumber -> scm_nextIssueNumber;
			scm_mockOptions [label = "mockOptions, Field";shape = box;];
			scm_mockOptions -> scm_NewMockedGithubSCMClient;
			scm_repoID [label = "repoID, Field";shape = box;];
			scm_repoID -> scm_NewMockedGithubSCMClient;
			scm_nextIssueNumber [label = "nextIssueNumber, Method";shape = box;];
			scm_nextIssueNumber -> scm_NewMockedGithubSCMClient;
			scm_NewMockedGithubSCMClient [label = "NewMockedGithubSCMClient, Function";shape = box;];
		}
		scm_NewMockedGithubSCMClient -> scm_TestFileClone;
		scm_NewMockedGithubSCMClient -> scm_TestMockDeleteIssues;
		scm_NewMockedGithubSCMClient -> scm_TestMockUpdateIssue;
		scm_NewMockedGithubSCMClient -> scm_TestMockGetIssue;
		scm_NewMockedGithubSCMClient -> scm_TestMockGetIssues;
		scm_NewMockedGithubSCMClient -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_NewMockedGithubSCMClient -> scm_TestMockCreateIssueComment;
		scm_NewMockedGithubSCMClient -> scm_TestMockUpdateIssueComment;
		scm_NewMockedGithubSCMClient -> scm_TestMockCreateIssue;
		scm_NewMockedGithubSCMClient -> scm_TestMockRequestReviewers;
		scm_NewMockedGithubSCMClient -> scm_TestMockDeleteIssue;
		scm_NewMockedGithubSCMClient -> scm_TestMockGetOrganization;
		scm_NewMockedGithubSCMClient -> scm_TestMockGetRepositories;
		scm_NewMockedGithubSCMClient -> scm_TestMockRepositoryIsEmpty;
		scm_NewMockedGithubSCMClient -> scm_TestMockCreateCourse;
		scm_NewMockedGithubSCMClient -> scm_TestMockUpdateEnrollment;
		scm_NewMockedGithubSCMClient -> scm_TestMockRejectEnrollment;
		scm_NewMockedGithubSCMClient -> scm_TestMockDemoteTeacherToStudent;
		scm_NewMockedGithubSCMClient -> scm_TestMockCreateGroup;
		scm_NewMockedGithubSCMClient -> scm_TestMockUpdateGroupMembers;
		scm_NewMockedGithubSCMClient -> scm_TestMockDeleteGroup;
		scm_NewMockedGithubSCMClient -> scm_MockManager;
		scm_NewMockedGithubSCMClient -> scm_NewSCMClient;
		scm_NewMockedGithubSCMClient -> scm_newSCMAppClient;
		scm_NewMockedGithubSCMClient -> scm_TestErrorGetOrganization;
		scm_NewMockedGithubSCMClient -> scm_TestErrorCreateCourse;
		scm_NewMockedGithubSCMClient -> scm_TestErrorUpdateEnrollment;
		scm_NewMockedGithubSCMClient -> scm_TestErrorRejectEnrollment;
		scm_NewMockedGithubSCMClient -> scm_TestErrorDemoteTeacherToStudent;
		scm_NewMockedGithubSCMClient -> scm_TestErrorCreateGroup;
		scm_NewMockedGithubSCMClient -> scm_TestErrorUpdateGroupMembers;
		subgraph cluster_github_mock_lib_go {
			label = "github_mock_lib.go";
			labelloc="t";
			rankdir=TB;
			scm_mustParse [label = "mustParse, Function";shape = box;];
			scm_mustRead [label = "mustRead, Function";shape = box;];
			scm_mustWrite [label = "mustWrite, Function";shape = box;];
			scm_replaceArgs [label = "replaceArgs, Function";shape = box;];
			scm_MockBackendOption [label = "MockBackendOption, Function";shape = box;];
			scm_MockBackendOption -> scm_MockBackendOption;
			scm_MockBackendOption -> scm_RoundTrip;
			scm_WithRequestMatchHandler [label = "WithRequestMatchHandler, Function";shape = box;];
			scm_EnforceHostRoundTripper [label = "EnforceHostRoundTripper, Struct";shape = box;];
			scm_EnforceHostRoundTripper -> scm_WithRequestMatchHandler;
			scm_EnforceHostRoundTripper -> scm_NewMockedHTTPClient;
			scm_Host [label = "Host, Field";shape = box;];
			scm_Host -> scm_RoundTrip;
			scm_Host -> scm_NewMockedHTTPClient;
			scm_UpstreamRoundTripper [label = "UpstreamRoundTripper, Field";shape = box;];
			scm_UpstreamRoundTripper -> scm_RoundTrip;
			scm_UpstreamRoundTripper -> scm_NewMockedHTTPClient;
			scm_RoundTrip [label = "RoundTrip, Method";shape = box;];
			scm_RoundTrip -> scm_RoundTrip;
			scm_NewMockedHTTPClient [label = "NewMockedHTTPClient, Function";shape = box;];
		}
		scm_mustParse -> scm_NewMockedGithubSCMClient;
		scm_mustRead -> scm_NewMockedGithubSCMClient;
		scm_mustWrite -> scm_NewMockedGithubSCMClient;
		scm_replaceArgs -> scm_NewMockedGithubSCMClient;
		scm_replaceArgs -> scm_TestReplaceArgs;
		scm_WithRequestMatchHandler -> scm_NewMockedGithubSCMClient;
		scm_NewMockedHTTPClient -> scm_NewMockedGithubSCMClient;
		subgraph cluster_github_mock_opts_go {
			label = "github_mock_opts.go";
			labelloc="t";
			rankdir=TB;
			scm_mockOptions [label = "mockOptions, Struct";shape = box;];
			scm_mockOptions -> scm_GetComment;
			scm_mockOptions -> scm_newMockOptions;
			scm_mockOptions -> scm_WithOrgs;
			scm_mockOptions -> scm_WithRepos;
			scm_mockOptions -> scm_WithMembers;
			scm_mockOptions -> scm_WithGroups;
			scm_mockOptions -> scm_WithReviewers;
			scm_mockOptions -> scm_WithIssues;
			scm_mockOptions -> scm_WithMockOrgs;
			scm_mockOptions -> scm_WithMockCourses;
			scm_mockOptions -> scm_WithMockAppConfig;
			scm_mockOptions -> scm_;
			scm_mockOptions -> scm_DumpState;
			scm_mockOptions -> scm_hasOrgRepo;
			scm_mockOptions -> scm_matchOrgFunc;
			scm_appConfigs [label = "appConfigs, Field";shape = box;];
			scm_appConfigs -> scm_WithMockAppConfig;
			scm_comments [label = "comments, Field";shape = box;];
			scm_comments -> scm_newMockOptions;
			scm_comments -> scm_DumpState;
			scm_comments -> scm_GetComment;
			scm_groups [label = "groups, Field";shape = box;];
			scm_groups -> scm_newMockOptions;
			scm_groups -> scm_WithGroups;
			scm_groups -> scm_DumpState;
			scm_issues [label = "issues, Field";shape = box;];
			scm_issues -> scm_newMockOptions;
			scm_issues -> scm_WithIssues;
			scm_issues -> scm_DumpState;
			scm_members [label = "members, Field";shape = box;];
			scm_members -> scm_newMockOptions;
			scm_members -> scm_WithMembers;
			scm_members -> scm_WithMockOrgs;
			scm_members -> scm_DumpState;
			scm_orgs [label = "orgs, Field";shape = box;];
			scm_orgs -> scm_newMockOptions;
			scm_orgs -> scm_WithOrgs;
			scm_orgs -> scm_WithMockOrgs;
			scm_orgs -> scm_WithMockCourses;
			scm_orgs -> scm_DumpState;
			scm_orgs -> scm_matchOrgFunc;
			scm_repos [label = "repos, Field";shape = box;];
			scm_repos -> scm_newMockOptions;
			scm_repos -> scm_WithRepos;
			scm_repos -> scm_WithMockCourses;
			scm_repos -> scm_DumpState;
			scm_repos -> scm_hasOrgRepo;
			scm_reviewers [label = "reviewers, Field";shape = box;];
			scm_reviewers -> scm_newMockOptions;
			scm_reviewers -> scm_WithReviewers;
			scm_reviewers -> scm_DumpState;
			scm_DumpState [label = "DumpState, Method";shape = box;];
			scm_hasOrgRepo [label = "hasOrgRepo, Method";shape = box;];
			scm_matchOrgFunc [label = "matchOrgFunc, Method";shape = box;];
			scm_GetComment [label = "GetComment, Method";shape = box;];
			scm_newMockOptions [label = "newMockOptions, Function";shape = box;];
			scm_MockOption [label = "MockOption, Function";shape = box;];
			scm_MockOption -> scm_MockOption;
			scm_MockOption -> scm_WithOrgs;
			scm_MockOption -> scm_WithRepos;
			scm_MockOption -> scm_WithMembers;
			scm_MockOption -> scm_WithGroups;
			scm_MockOption -> scm_WithReviewers;
			scm_MockOption -> scm_WithIssues;
			scm_MockOption -> scm_WithMockOrgs;
			scm_MockOption -> scm_WithMockCourses;
			scm_WithOrgs [label = "WithOrgs, Function";shape = box;];
			scm_WithRepos [label = "WithRepos, Function";shape = box;];
			scm_WithMembers [label = "WithMembers, Function";shape = box;];
			scm_WithGroups [label = "WithGroups, Function";shape = box;];
			scm_WithReviewers [label = "WithReviewers, Function";shape = box;];
			scm_WithIssues [label = "WithIssues, Function";shape = box;];
			scm_WithMockOrgs [label = "WithMockOrgs, Function";shape = box;];
			scm_WithMockCourses [label = "WithMockCourses, Function";shape = box;];
			scm_WithMockAppConfig [label = "WithMockAppConfig, Function";shape = box;];
			scm_toOrg [label = "toOrg, Variable";shape = box;];
			scm_toOrg -> scm_WithMockOrgs;
			scm_toOrg -> scm_WithMockCourses;
			scm_toRepo [label = "toRepo, Variable";shape = box;];
			scm_toRepo -> scm_WithMockCourses;
		}
		scm_mockOptions -> scm_;
		scm_appConfigs -> scm_NewMockedGithubSCMClient;
		scm_comments -> scm_TestMockUpdateIssueComment;
		scm_comments -> scm_NewMockedGithubSCMClient;
		scm_groups -> scm_NewMockedGithubSCMClient;
		scm_groups -> scm_TestMockCreateGroup;
		scm_groups -> scm_TestMockUpdateGroupMembers;
		scm_groups -> scm_TestMockDeleteGroup;
		scm_issues -> scm_NewMockedGithubSCMClient;
		scm_members -> scm_NewMockedGithubSCMClient;
		scm_orgs -> scm_NewMockedGithubSCMClient;
		scm_orgs -> scm_MockManager;
		scm_repos -> scm_NewMockedGithubSCMClient;
		scm_reviewers -> scm_TestMockRequestReviewers;
		scm_reviewers -> scm_NewMockedGithubSCMClient;
		scm_hasOrgRepo -> scm_NewMockedGithubSCMClient;
		scm_matchOrgFunc -> scm_NewMockedGithubSCMClient;
		scm_newMockOptions -> scm_NewMockedGithubSCMClient;
		scm_MockOption -> scm_nextIssueNumber;
		scm_MockOption -> scm_;
		scm_WithOrgs -> scm_TestMockDeleteIssues;
		scm_WithOrgs -> scm_TestMockUpdateIssue;
		scm_WithOrgs -> scm_TestMockGetIssue;
		scm_WithOrgs -> scm_TestMockGetIssues;
		scm_WithOrgs -> scm_TestMockCreateIssueComment;
		scm_WithOrgs -> scm_TestMockUpdateIssueComment;
		scm_WithOrgs -> scm_TestMockCreateIssue;
		scm_WithOrgs -> scm_TestMockRequestReviewers;
		scm_WithOrgs -> scm_TestMockDeleteIssue;
		scm_WithOrgs -> scm_TestMockGetOrganization;
		scm_WithOrgs -> scm_TestMockGetRepositories;
		scm_WithOrgs -> scm_TestMockRepositoryIsEmpty;
		scm_WithOrgs -> scm_TestMockCreateCourse;
		scm_WithOrgs -> scm_TestMockUpdateEnrollment;
		scm_WithOrgs -> scm_TestMockRejectEnrollment;
		scm_WithOrgs -> scm_TestMockDemoteTeacherToStudent;
		scm_WithOrgs -> scm_TestMockCreateGroup;
		scm_WithOrgs -> scm_TestMockDeleteGroup;
		scm_WithOrgs -> scm_TestErrorGetOrganization;
		scm_WithOrgs -> scm_TestErrorCreateCourse;
		scm_WithOrgs -> scm_TestErrorUpdateEnrollment;
		scm_WithOrgs -> scm_TestErrorRejectEnrollment;
		scm_WithOrgs -> scm_TestErrorDemoteTeacherToStudent;
		scm_WithOrgs -> scm_TestErrorCreateGroup;
		scm_WithRepos -> scm_TestMockDeleteIssues;
		scm_WithRepos -> scm_TestMockUpdateIssue;
		scm_WithRepos -> scm_TestMockGetIssue;
		scm_WithRepos -> scm_TestMockGetIssues;
		scm_WithRepos -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_WithRepos -> scm_TestMockCreateIssueComment;
		scm_WithRepos -> scm_TestMockUpdateIssueComment;
		scm_WithRepos -> scm_TestMockCreateIssue;
		scm_WithRepos -> scm_TestMockRequestReviewers;
		scm_WithRepos -> scm_TestMockDeleteIssue;
		scm_WithRepos -> scm_TestMockGetOrganization;
		scm_WithRepos -> scm_TestMockGetRepositories;
		scm_WithRepos -> scm_TestMockRepositoryIsEmpty;
		scm_WithRepos -> scm_TestMockCreateCourse;
		scm_WithRepos -> scm_TestMockUpdateEnrollment;
		scm_WithRepos -> scm_TestMockRejectEnrollment;
		scm_WithRepos -> scm_TestMockDemoteTeacherToStudent;
		scm_WithRepos -> scm_TestMockCreateGroup;
		scm_WithRepos -> scm_TestMockDeleteGroup;
		scm_WithRepos -> scm_TestErrorGetOrganization;
		scm_WithRepos -> scm_TestErrorCreateCourse;
		scm_WithRepos -> scm_TestErrorUpdateEnrollment;
		scm_WithRepos -> scm_TestErrorRejectEnrollment;
		scm_WithRepos -> scm_TestErrorDemoteTeacherToStudent;
		scm_WithRepos -> scm_TestErrorCreateGroup;
		scm_WithMembers -> scm_TestMockGetOrganization;
		scm_WithMembers -> scm_TestMockCreateCourse;
		scm_WithMembers -> scm_TestMockUpdateEnrollment;
		scm_WithMembers -> scm_TestMockRejectEnrollment;
		scm_WithMembers -> scm_TestMockDemoteTeacherToStudent;
		scm_WithMembers -> scm_TestErrorGetOrganization;
		scm_WithMembers -> scm_TestErrorCreateCourse;
		scm_WithMembers -> scm_TestErrorUpdateEnrollment;
		scm_WithMembers -> scm_TestErrorRejectEnrollment;
		scm_WithMembers -> scm_TestErrorDemoteTeacherToStudent;
		scm_WithGroups -> scm_TestMockUpdateEnrollment;
		scm_WithGroups -> scm_TestMockCreateGroup;
		scm_WithGroups -> scm_TestMockUpdateGroupMembers;
		scm_WithGroups -> scm_TestMockDeleteGroup;
		scm_WithGroups -> scm_TestErrorUpdateEnrollment;
		scm_WithGroups -> scm_TestErrorCreateGroup;
		scm_WithGroups -> scm_TestErrorUpdateGroupMembers;
		scm_WithReviewers -> scm_TestMockRequestReviewers;
		scm_WithMockOrgs -> scm_TestMockGetOrganization;
		scm_WithMockOrgs -> scm_NewSCMClient;
		scm_WithMockOrgs -> scm_newSCMAppClient;
		scm_WithMockCourses -> scm_TestMockDeleteIssues;
		scm_WithMockCourses -> scm_TestMockUpdateIssue;
		scm_WithMockCourses -> scm_TestMockGetIssue;
		scm_WithMockCourses -> scm_TestMockGetIssues;
		scm_WithMockCourses -> scm_TestMockCreateIssueComment;
		scm_WithMockCourses -> scm_TestMockUpdateIssueComment;
		scm_WithMockCourses -> scm_TestMockCreateIssue;
		scm_WithMockCourses -> scm_TestMockRequestReviewers;
		scm_WithMockCourses -> scm_TestMockDeleteIssue;
		subgraph cluster_github_mock_patterns_go {
			label = "github_mock_patterns.go";
			labelloc="t";
			rankdir=TB;
			scm_getOrganizationsByID [label = "getOrganizationsByID, Constant";shape = box;];
			scm_getOrgsByOrg [label = "getOrgsByOrg, Constant";shape = box;];
			scm_patchOrgsByOrg [label = "patchOrgsByOrg, Constant";shape = box;];
			scm_getOrgsReposByOrg [label = "getOrgsReposByOrg, Constant";shape = box;];
			scm_postOrgsReposByOrg [label = "postOrgsReposByOrg, Constant";shape = box;];
			scm_getOrgsMembershipsByOrgByUsername [label = "getOrgsMembershipsByOrgByUsername, Constant";shape = box;];
			scm_putOrgsMembershipsByOrgByUsername [label = "putOrgsMembershipsByOrgByUsername, Constant";shape = box;];
			scm_deleteOrgsMembersByOrgByUsername [label = "deleteOrgsMembersByOrgByUsername, Constant";shape = box;];
			scm_getReposByOwnerByRepo [label = "getReposByOwnerByRepo, Constant";shape = box;];
			scm_deleteReposByOwnerByRepo [label = "deleteReposByOwnerByRepo, Constant";shape = box;];
			scm_getRepositoriesByID [label = "getRepositoriesByID, Constant";shape = box;];
			scm_getReposContentsByOwnerByRepoByPath [label = "getReposContentsByOwnerByRepoByPath, Constant";shape = box;];
			scm_getReposCollaboratorsByOwnerByRepo [label = "getReposCollaboratorsByOwnerByRepo, Constant";shape = box;];
			scm_putReposCollaboratorsByOwnerByRepoByUsername [label = "putReposCollaboratorsByOwnerByRepoByUsername, Constant";shape = box;];
			scm_deleteReposCollaboratorsByOwnerByRepoByUsername [label = "deleteReposCollaboratorsByOwnerByRepoByUsername, Constant";shape = box;];
			scm_postReposIssuesByOwnerByRepo [label = "postReposIssuesByOwnerByRepo, Constant";shape = box;];
			scm_patchReposIssuesByOwnerByRepoByIssueNumber [label = "patchReposIssuesByOwnerByRepoByIssueNumber, Constant";shape = box;];
			scm_getReposIssuesByOwnerByRepoByIssueNumber [label = "getReposIssuesByOwnerByRepoByIssueNumber, Constant";shape = box;];
			scm_getReposIssuesByOwnerByRepo [label = "getReposIssuesByOwnerByRepo, Constant";shape = box;];
			scm_postReposIssuesCommentsByOwnerByRepoByIssueNumber [label = "postReposIssuesCommentsByOwnerByRepoByIssueNumber, Constant";shape = box;];
			scm_patchReposIssuesCommentsByOwnerByRepoByCommentID [label = "patchReposIssuesCommentsByOwnerByRepoByCommentID, Constant";shape = box;];
			scm_postReposPullsRequestedReviewersByOwnerByRepoByPullNumber [label = "postReposPullsRequestedReviewersByOwnerByRepoByPullNumber, Constant";shape = box;];
			scm_postAppManifestsByCodeConversions [label = "postAppManifestsByCodeConversions, Constant";shape = box;];
		}
		scm_getOrganizationsByID -> scm_NewMockedGithubSCMClient;
		scm_getOrgsByOrg -> scm_NewMockedGithubSCMClient;
		scm_patchOrgsByOrg -> scm_NewMockedGithubSCMClient;
		scm_getOrgsReposByOrg -> scm_NewMockedGithubSCMClient;
		scm_postOrgsReposByOrg -> scm_NewMockedGithubSCMClient;
		scm_getOrgsMembershipsByOrgByUsername -> scm_NewMockedGithubSCMClient;
		scm_putOrgsMembershipsByOrgByUsername -> scm_NewMockedGithubSCMClient;
		scm_deleteOrgsMembersByOrgByUsername -> scm_NewMockedGithubSCMClient;
		scm_getReposByOwnerByRepo -> scm_NewMockedGithubSCMClient;
		scm_deleteReposByOwnerByRepo -> scm_NewMockedGithubSCMClient;
		scm_getRepositoriesByID -> scm_NewMockedGithubSCMClient;
		scm_getReposContentsByOwnerByRepoByPath -> scm_NewMockedGithubSCMClient;
		scm_getReposCollaboratorsByOwnerByRepo -> scm_NewMockedGithubSCMClient;
		scm_putReposCollaboratorsByOwnerByRepoByUsername -> scm_NewMockedGithubSCMClient;
		scm_deleteReposCollaboratorsByOwnerByRepoByUsername -> scm_NewMockedGithubSCMClient;
		scm_postReposIssuesByOwnerByRepo -> scm_NewMockedGithubSCMClient;
		scm_patchReposIssuesByOwnerByRepoByIssueNumber -> scm_NewMockedGithubSCMClient;
		scm_getReposIssuesByOwnerByRepoByIssueNumber -> scm_NewMockedGithubSCMClient;
		scm_getReposIssuesByOwnerByRepo -> scm_NewMockedGithubSCMClient;
		scm_postReposIssuesCommentsByOwnerByRepoByIssueNumber -> scm_NewMockedGithubSCMClient;
		scm_patchReposIssuesCommentsByOwnerByRepoByCommentID -> scm_NewMockedGithubSCMClient;
		scm_postReposPullsRequestedReviewersByOwnerByRepoByPullNumber -> scm_NewMockedGithubSCMClient;
		scm_postAppManifestsByCodeConversions -> scm_NewMockedGithubSCMClient;
		subgraph cluster_github_mock_test_go {
			label = "github_mock_test.go";
			labelloc="t";
			rankdir=TB;
			scm_ghOrgFoo [label = "ghOrgFoo, Variable";shape = box;];
			scm_ghOrgFoo -> scm_TestMockGetOrganization;
			scm_ghOrgFoo -> scm_TestMockGetRepositories;
			scm_ghOrgFoo -> scm_TestMockRepositoryIsEmpty;
			scm_ghOrgFoo -> scm_TestMockCreateCourse;
			scm_ghOrgFoo -> scm_;
			scm_ghOrgFoo -> scm_TestMockUpdateEnrollment;
			scm_ghOrgFoo -> scm_TestMockRejectEnrollment;
			scm_ghOrgFoo -> scm_TestMockDemoteTeacherToStudent;
			scm_ghOrgFoo -> scm_TestMockCreateGroup;
			scm_ghOrgFoo -> scm_TestMockDeleteGroup;
			scm_ghOrgBar [label = "ghOrgBar, Variable";shape = box;];
			scm_ghOrgBar -> scm_TestMockGetOrganization;
			scm_ghOrgBar -> scm_TestMockGetRepositories;
			scm_ghOrgBar -> scm_TestMockRepositoryIsEmpty;
			scm_ghOrgBar -> scm_TestMockCreateCourse;
			scm_ghOrgBar -> scm_TestMockUpdateEnrollment;
			scm_ghOrgBar -> scm_;
			scm_ghOrgBar -> scm_TestMockRejectEnrollment;
			scm_ghOrgBar -> scm_TestMockDemoteTeacherToStudent;
			scm_ghOrgBar -> scm_TestMockCreateGroup;
			scm_ghOrgBar -> scm_TestMockDeleteGroup;
			scm_ghOrgBuz [label = "ghOrgBuz, Variable";shape = box;];
			scm_ghOrgBuz -> scm_TestMockGetRepositories;
			scm_ghOrgDat320 [label = "ghOrgDat320, Variable";shape = box;];
			scm_repos [label = "repos, Variable";shape = box;];
			scm_repos -> scm_TestMockGetOrganization;
			scm_repos -> scm_TestMockGetRepositories;
			scm_repos -> scm_TestMockRepositoryIsEmpty;
			scm_repos -> scm_TestMockCreateCourse;
			scm_repos -> scm_TestMockUpdateEnrollment;
			scm_repos -> scm_TestMockRejectEnrollment;
			scm_repos -> scm_TestMockDemoteTeacherToStudent;
			scm_repos -> scm_TestMockCreateGroup;
			scm_repos -> scm_TestMockDeleteGroup;
			scm_meling [label = "meling, Variable";shape = box;];
			scm_meling -> scm_TestMockCreateCourse;
			scm_meling -> scm_TestMockUpdateEnrollment;
			scm_meling -> scm_TestMockRejectEnrollment;
			scm_meling -> scm_TestMockDemoteTeacherToStudent;
			scm_meling -> scm_;
			scm_leslie [label = "leslie, Variable";shape = box;];
			scm_leslie -> scm_;
			scm_lamport [label = "lamport, Variable";shape = box;];
			scm_lamport -> scm_;
			scm_jostein [label = "jostein, Variable";shape = box;];
			scm_jostein -> scm_TestMockCreateCourse;
			scm_jostein -> scm_TestMockRejectEnrollment;
			scm_jostein -> scm_TestMockDemoteTeacherToStudent;
			scm_foo [label = "foo, Variable";shape = box;];
			scm_foo -> scm_TestMockGetOrganization;
			scm_foo -> scm_;
			scm_bar [label = "bar, Variable";shape = box;];
			scm_bar -> scm_TestMockGetOrganization;
			scm_bar -> scm_;
			scm_buz [label = "buz, Variable";shape = box;];
			scm_buz -> scm_;
			scm_members [label = "members, Variable";shape = box;];
			scm_members -> scm_TestMockGetOrganization;
			scm_groups [label = "groups, Variable";shape = box;];
			scm_groups -> scm_TestMockCreateGroup;
			scm_groups -> scm_TestMockUpdateGroupMembers;
			scm_groups -> scm_TestMockDeleteGroup;
			scm_reviewers [label = "reviewers, Variable";shape = box;];
			scm_TestReplaceArgs [label = "TestReplaceArgs, Function";shape = box;];
			scm_TestMockGetOrganization [label = "TestMockGetOrganization, Function";shape = box;];
			scm_TestMockGetRepositories [label = "TestMockGetRepositories, Function";shape = box;];
			scm_TestMockRepositoryIsEmpty [label = "TestMockRepositoryIsEmpty, Function";shape = box;];
			scm_TestMockCreateCourse [label = "TestMockCreateCourse, Function";shape = box;];
			scm_TestMockUpdateEnrollment [label = "TestMockUpdateEnrollment, Function";shape = box;];
			scm_TestMockRejectEnrollment [label = "TestMockRejectEnrollment, Function";shape = box;];
			scm_TestMockDemoteTeacherToStudent [label = "TestMockDemoteTeacherToStudent, Function";shape = box;];
			scm_TestMockCreateGroup [label = "TestMockCreateGroup, Function";shape = box;];
			scm_TestMockUpdateGroupMembers [label = "TestMockUpdateGroupMembers, Function";shape = box;];
			scm_TestMockDeleteGroup [label = "TestMockDeleteGroup, Function";shape = box;];
		}
		scm_ghOrgFoo -> scm_TestMockDeleteIssues;
		scm_ghOrgFoo -> scm_TestMockUpdateIssue;
		scm_ghOrgFoo -> scm_TestMockGetIssue;
		scm_ghOrgFoo -> scm_TestMockGetIssues;
		scm_ghOrgFoo -> scm_TestMockCreateIssueComment;
		scm_ghOrgFoo -> scm_TestMockUpdateIssueComment;
		scm_ghOrgFoo -> scm_TestMockCreateIssue;
		scm_ghOrgFoo -> scm_TestMockRequestReviewers;
		scm_ghOrgFoo -> scm_TestMockDeleteIssue;
		scm_ghOrgFoo -> scm_TestErrorGetOrganization;
		scm_ghOrgFoo -> scm_TestErrorCreateCourse;
		scm_ghOrgFoo -> scm_TestErrorUpdateEnrollment;
		scm_ghOrgFoo -> scm_TestErrorRejectEnrollment;
		scm_ghOrgFoo -> scm_TestErrorDemoteTeacherToStudent;
		scm_ghOrgFoo -> scm_TestErrorCreateGroup;
		scm_ghOrgBar -> scm_TestMockDeleteIssues;
		scm_ghOrgBar -> scm_TestMockUpdateIssue;
		scm_ghOrgBar -> scm_TestMockGetIssue;
		scm_ghOrgBar -> scm_TestMockGetIssues;
		scm_ghOrgBar -> scm_TestMockCreateIssueComment;
		scm_ghOrgBar -> scm_TestMockUpdateIssueComment;
		scm_ghOrgBar -> scm_TestMockCreateIssue;
		scm_ghOrgBar -> scm_TestMockRequestReviewers;
		scm_ghOrgBar -> scm_TestMockDeleteIssue;
		scm_ghOrgBar -> scm_TestErrorGetOrganization;
		scm_ghOrgBar -> scm_TestErrorCreateCourse;
		scm_ghOrgBar -> scm_TestErrorUpdateEnrollment;
		scm_ghOrgBar -> scm_TestErrorRejectEnrollment;
		scm_ghOrgBar -> scm_TestErrorDemoteTeacherToStudent;
		scm_ghOrgBar -> scm_TestErrorCreateGroup;
		scm_ghOrgDat320 -> scm_TestMockDeleteIssues;
		scm_ghOrgDat320 -> scm_TestMockUpdateIssue;
		scm_ghOrgDat320 -> scm_TestMockGetIssue;
		scm_ghOrgDat320 -> scm_TestMockGetIssues;
		scm_ghOrgDat320 -> scm_TestMockCreateIssueComment;
		scm_ghOrgDat320 -> scm_TestMockUpdateIssueComment;
		scm_ghOrgDat320 -> scm_TestMockCreateIssue;
		scm_ghOrgDat320 -> scm_TestMockDeleteIssue;
		scm_repos -> scm_TestMockDeleteIssues;
		scm_repos -> scm_TestMockUpdateIssue;
		scm_repos -> scm_TestMockGetIssue;
		scm_repos -> scm_TestMockGetIssues;
		scm_repos -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_repos -> scm_TestMockCreateIssueComment;
		scm_repos -> scm_TestMockUpdateIssueComment;
		scm_repos -> scm_TestMockCreateIssue;
		scm_repos -> scm_TestMockRequestReviewers;
		scm_repos -> scm_TestMockDeleteIssue;
		scm_repos -> scm_TestErrorGetOrganization;
		scm_repos -> scm_TestErrorCreateCourse;
		scm_repos -> scm_TestErrorUpdateEnrollment;
		scm_repos -> scm_TestErrorRejectEnrollment;
		scm_repos -> scm_TestErrorDemoteTeacherToStudent;
		scm_repos -> scm_TestErrorCreateGroup;
		scm_meling -> scm_TestErrorCreateCourse;
		scm_meling -> scm_TestErrorUpdateEnrollment;
		scm_meling -> scm_TestErrorRejectEnrollment;
		scm_meling -> scm_TestErrorDemoteTeacherToStudent;
		scm_jostein -> scm_TestErrorCreateCourse;
		scm_jostein -> scm_TestErrorRejectEnrollment;
		scm_jostein -> scm_TestErrorDemoteTeacherToStudent;
		scm_members -> scm_TestErrorGetOrganization;
		scm_groups -> scm_TestErrorCreateGroup;
		scm_groups -> scm_TestErrorUpdateGroupMembers;
		scm_reviewers -> scm_TestMockRequestReviewers;
		subgraph cluster_github_test_go {
			label = "github_test.go";
			labelloc="t";
			rankdir=TB;
			scm_qf101Org [label = "qf101Org, Constant";shape = box;];
			scm_qf101Org -> scm_TestGetOrganization;
			scm_qf101OrdID [label = "qf101OrdID, Constant";shape = box;];
			scm_qf101OrdID -> scm_TestGetOrganization;
			scm_TestGetOrganization [label = "TestGetOrganization, Function";shape = box;];
			scm_TestCreateIssue [label = "TestCreateIssue, Function";shape = box;];
			scm_TestGetIssue [label = "TestGetIssue, Function";shape = box;];
			scm_TestUpdateIssue [label = "TestUpdateIssue, Function";shape = box;];
			scm_TestDeleteAllIssues [label = "TestDeleteAllIssues, Function";shape = box;];
			scm_TestRequestReviewers [label = "TestRequestReviewers, Function";shape = box;];
			scm_TestCreateIssueComment [label = "TestCreateIssueComment, Function";shape = box;];
			scm_TestFeedbackCommentFormat [label = "TestFeedbackCommentFormat, Function";shape = box;];
			scm_TestEmptyRepo [label = "TestEmptyRepo, Function";shape = box;];
			scm_createIssue [label = "createIssue, Function";shape = box;];
			scm_createIssue -> scm_TestCreateIssueComment;
			scm_createIssue -> scm_TestFeedbackCommentFormat;
			scm_createIssue -> scm_TestCreateIssue;
			scm_createIssue -> scm_TestGetIssue;
			scm_createIssue -> scm_TestUpdateIssue;
		}
		subgraph cluster_githubv4_go {
			label = "githubv4.go";
			labelloc="t";
			rankdir=TB;
			scm_DeleteIssue [label = "DeleteIssue, Method";shape = box;];
			scm_DeleteIssue -> scm_DeleteIssues;
			scm_DeleteIssues [label = "DeleteIssues, Method";shape = box;];
		}
		scm_DeleteIssue -> scm_TestMockDeleteIssue;
		scm_DeleteIssue -> scm_createIssue;
		scm_DeleteIssues -> scm_TestMockDeleteIssues;
		scm_DeleteIssues -> scm_TestDeleteAllIssues;
		subgraph cluster_helper_go {
			label = "helper.go";
			labelloc="t";
			rankdir=TB;
			scm_OrgOwner [label = "OrgOwner, Constant";shape = box;];
			scm_OrgOwner -> scm_;
			scm_OrgMember [label = "OrgMember, Constant";shape = box;];
			scm_OrgMember -> scm_;
			scm_private [label = "private, Constant";shape = box;];
			scm_private -> scm_;
			scm_public [label = "public, Constant";shape = box;];
			scm_public -> scm_;
			scm_pullAccess [label = "pullAccess, Variable";shape = box;];
			scm_pushAccess [label = "pushAccess, Variable";shape = box;];
			scm_member [label = "member, Variable";shape = box;];
			scm_admin [label = "admin, Variable";shape = box;];
			scm_RepoPaths [label = "RepoPaths, Variable";shape = box;];
			scm_RepoPaths -> scm_isDirty;
			scm_repoNames [label = "repoNames, Variable";shape = box;];
			scm_isDirty [label = "isDirty, Function";shape = box;];
		}
		scm_OrgOwner -> scm_GetOrganization;
		scm_OrgOwner -> scm_WithMockOrgs;
		scm_OrgOwner -> scm_TestMockCreateCourse;
		scm_OrgOwner -> scm_TestMockDemoteTeacherToStudent;
		scm_OrgOwner -> scm_;
		scm_OrgOwner -> scm_TestErrorCreateCourse;
		scm_OrgOwner -> scm_TestErrorDemoteTeacherToStudent;
		scm_OrgMember -> scm_WithMockOrgs;
		scm_OrgMember -> scm_TestMockCreateCourse;
		scm_OrgMember -> scm_TestMockDemoteTeacherToStudent;
		scm_OrgMember -> scm_;
		scm_OrgMember -> scm_TestErrorCreateCourse;
		scm_OrgMember -> scm_TestErrorDemoteTeacherToStudent;
		scm_pullAccess -> scm_UpdateEnrollment;
		scm_pushAccess -> scm_CreateGroup;
		scm_pushAccess -> scm_UpdateGroupMembers;
		scm_pushAccess -> scm_createStudentRepo;
		scm_member -> scm_UpdateEnrollment;
		scm_member -> scm_DemoteTeacherToStudent;
		scm_admin -> scm_UpdateEnrollment;
		scm_RepoPaths -> scm_CreateCourse;
		scm_repoNames -> scm_GetOrganization;
		scm_repoNames -> scm_TestErrorCheckSentinel;
		scm_isDirty -> scm_GetOrganization;
		subgraph cluster_manager_go {
			label = "manager.go";
			labelloc="t";
			rankdir=TB;
			scm_Manager [label = "Manager, Struct";shape = box;];
			scm_Manager -> scm_NewSCMConfig;
			scm_Manager -> scm_NewSCMManager;
			scm_Manager -> scm_GetOrCreateSCM;
			scm_Config [label = "Config, Field";shape = box;];
			scm_Config -> scm_NewSCMManager;
			scm_Config -> scm_GetOrCreateSCM;
			scm_mu [label = "mu, Field";shape = box;];
			scm_mu -> scm_GetOrCreateSCM;
			scm_mu -> scm_GetSCM;
			scm_scms [label = "scms, Field";shape = box;];
			scm_scms -> scm_NewSCMManager;
			scm_scms -> scm_GetOrCreateSCM;
			scm_scms -> scm_GetSCM;
			scm_Config [label = "Config, Struct";shape = box;];
			scm_Config -> scm_;
			scm_Config -> scm_NewSCMConfig;
			scm_ClientID [label = "ClientID, Field";shape = box;];
			scm_ClientID -> scm_NewSCMConfig;
			scm_ClientSecret [label = "ClientSecret, Field";shape = box;];
			scm_ClientSecret -> scm_NewSCMConfig;
			scm_Config [label = "Config, Field";shape = box;];
			scm_Config -> scm_NewSCMConfig;
			scm_NewSCMConfig [label = "NewSCMConfig, Function";shape = box;];
			scm_NewSCMManager [label = "NewSCMManager, Function";shape = box;];
			scm_GetOrCreateSCM [label = "GetOrCreateSCM, Method";shape = box;];
			scm_GetSCM [label = "GetSCM, Method";shape = box;];
		}
		scm_Manager -> scm_GetAccessToken;
		scm_Manager -> scm_;
		scm_Manager -> scm_MockManager;
		scm_Config -> scm_MockManager;
		scm_scms -> scm_MockManager;
		scm_Config -> scm_;
		scm_Config -> scm_newGithubAppClient;
		scm_Config -> scm_fetchInstallation;
		scm_Config -> scm_NewSCMClient;
		scm_ClientID -> scm_ExchangeToken;
		scm_ClientSecret -> scm_ExchangeToken;
		scm_NewSCMConfig -> scm_GetSCMManager;
		scm_NewSCMManager -> scm_GetSCMManager;
		scm_GetOrCreateSCM -> scm_GetAppSCM;
		scm_GetOrCreateSCM -> scm_TestSCMManager;
		scm_GetSCM -> scm_TestSCMManager;
		subgraph cluster_manager_mock_go {
			label = "manager_mock.go";
			labelloc="t";
			rankdir=TB;
			scm_MockManager [label = "MockManager, Function";shape = box;];
		}
		subgraph cluster_manager_test_go {
			label = "manager_test.go";
			labelloc="t";
			rankdir=TB;
			scm_TestSCMManager [label = "TestSCMManager, Function";shape = box;];
		}
		subgraph cluster_scm_go {
			label = "scm.go";
			labelloc="t";
			rankdir=TB;
			scm_SCM [label = "SCM, Interface";shape = box;];
			scm_SCM -> scm_RequestReviewers;
			scm_SCM -> scm_NewSCMClient;
			scm_AcceptInvitations [label = "AcceptInvitations, Method";shape = box;];
			scm_Clone [label = "Clone, Method";shape = box;];
			scm_CreateCourse [label = "CreateCourse, Method";shape = box;];
			scm_CreateGroup [label = "CreateGroup, Method";shape = box;];
			scm_CreateIssue [label = "CreateIssue, Method";shape = box;];
			scm_CreateIssueComment [label = "CreateIssueComment, Method";shape = box;];
			scm_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			scm_DeleteIssue [label = "DeleteIssue, Method";shape = box;];
			scm_DeleteIssues [label = "DeleteIssues, Method";shape = box;];
			scm_DemoteTeacherToStudent [label = "DemoteTeacherToStudent, Method";shape = box;];
			scm_GetIssue [label = "GetIssue, Method";shape = box;];
			scm_GetIssues [label = "GetIssues, Method";shape = box;];
			scm_GetOrganization [label = "GetOrganization, Method";shape = box;];
			scm_GetRepositories [label = "GetRepositories, Method";shape = box;];
			scm_RejectEnrollment [label = "RejectEnrollment, Method";shape = box;];
			scm_RepositoryIsEmpty [label = "RepositoryIsEmpty, Method";shape = box;];
			scm_RequestReviewers [label = "RequestReviewers, Method";shape = box;];
			scm_UpdateEnrollment [label = "UpdateEnrollment, Method";shape = box;];
			scm_UpdateGroupMembers [label = "UpdateGroupMembers, Method";shape = box;];
			scm_UpdateIssue [label = "UpdateIssue, Method";shape = box;];
			scm_UpdateIssueComment [label = "UpdateIssueComment, Method";shape = box;];
			scm_NewSCMClient [label = "NewSCMClient, Function";shape = box;];
			scm_newSCMAppClient [label = "newSCMAppClient, Function";shape = box;];
			scm_Repository [label = "Repository, Struct";shape = box;];
			scm_Repository -> scm_GetOrganization;
			scm_Repository -> scm_RepositoryIsEmpty;
			scm_Repository -> scm_CreateCourse;
			scm_Repository -> scm_DemoteTeacherToStudent;
			scm_HTMLURL [label = "HTMLURL, Field";shape = box;];
			scm_ID [label = "ID, Field";shape = box;];
			scm_Owner [label = "Owner, Field";shape = box;];
			scm_Repo [label = "Repo, Field";shape = box;];
			scm_Issue [label = "Issue, Struct";shape = box;];
			scm_Issue -> scm_AcceptInvitations;
			scm_Issue -> scm_CreateIssue;
			scm_Issue -> scm_UpdateIssue;
			scm_Issue -> scm_GetIssue;
			scm_Assignee [label = "Assignee, Field";shape = box;];
			scm_Body [label = "Body, Field";shape = box;];
			scm_ID [label = "ID, Field";shape = box;];
			scm_Number [label = "Number, Field";shape = box;];
			scm_Repository [label = "Repository, Field";shape = box;];
			scm_Status [label = "Status, Field";shape = box;];
			scm_Title [label = "Title, Field";shape = box;];
		}
		scm_SCM -> scm_GetSCMManager;
		scm_SCM -> scm_TestEmptyRepo;
		scm_SCM -> scm_;
		scm_SCM -> scm_NewSCMManager;
		scm_SCM -> scm_GetOrCreateSCM;
		scm_SCM -> scm_MockManager;
		scm_Clone -> scm_TestCloneTwice;
		scm_Clone -> scm_TestCloneBranch;
		scm_Clone -> scm_TestFileClone;
		scm_Clone -> scm_TestClone;
		scm_CreateCourse -> scm_TestMockCreateCourse;
		scm_CreateCourse -> scm_TestErrorCreateCourse;
		scm_CreateGroup -> scm_TestMockCreateGroup;
		scm_CreateGroup -> scm_TestErrorCreateGroup;
		scm_CreateIssue -> scm_TestMockDeleteIssues;
		scm_CreateIssue -> scm_TestMockUpdateIssue;
		scm_CreateIssue -> scm_TestMockGetIssue;
		scm_CreateIssue -> scm_TestMockGetIssues;
		scm_CreateIssue -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_CreateIssue -> scm_TestMockCreateIssueComment;
		scm_CreateIssue -> scm_TestMockUpdateIssueComment;
		scm_CreateIssue -> scm_TestMockCreateIssue;
		scm_CreateIssue -> scm_TestMockDeleteIssue;
		scm_CreateIssue -> scm_createIssue;
		scm_CreateIssueComment -> scm_TestMockCreateIssueComment;
		scm_CreateIssueComment -> scm_TestMockUpdateIssueComment;
		scm_CreateIssueComment -> scm_TestCreateIssueComment;
		scm_CreateIssueComment -> scm_TestFeedbackCommentFormat;
		scm_DeleteGroup -> scm_TestMockDeleteGroup;
		scm_DeleteIssue -> scm_TestMockDeleteIssue;
		scm_DeleteIssue -> scm_createIssue;
		scm_DeleteIssue -> scm_DeleteIssues;
		scm_DeleteIssues -> scm_TestMockDeleteIssues;
		scm_DeleteIssues -> scm_TestDeleteAllIssues;
		scm_DemoteTeacherToStudent -> scm_TestMockDemoteTeacherToStudent;
		scm_DemoteTeacherToStudent -> scm_TestErrorDemoteTeacherToStudent;
		scm_GetIssue -> scm_TestMockGetIssue;
		scm_GetIssue -> scm_TestGetIssue;
		scm_GetIssues -> scm_TestMockDeleteIssue;
		scm_GetIssues -> scm_TestMockDeleteIssues;
		scm_GetIssues -> scm_TestMockGetIssues;
		scm_GetIssues -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_GetOrganization -> scm_CreateCourse;
		scm_GetOrganization -> scm_UpdateEnrollment;
		scm_GetOrganization -> scm_RejectEnrollment;
		scm_GetOrganization -> scm_CreateGroup;
		scm_GetOrganization -> scm_TestMockGetOrganization;
		scm_GetOrganization -> scm_TestGetOrganization;
		scm_GetOrganization -> scm_TestErrorGetOrganization;
		scm_GetRepositories -> scm_GetOrganization;
		scm_GetRepositories -> scm_TestMockGetRepositories;
		scm_RejectEnrollment -> scm_TestMockRejectEnrollment;
		scm_RejectEnrollment -> scm_TestErrorRejectEnrollment;
		scm_RepositoryIsEmpty -> scm_TestMockRepositoryIsEmpty;
		scm_RepositoryIsEmpty -> scm_TestEmptyRepo;
		scm_RequestReviewers -> scm_TestMockRequestReviewers;
		scm_RequestReviewers -> scm_TestRequestReviewers;
		scm_UpdateEnrollment -> scm_TestMockUpdateEnrollment;
		scm_UpdateEnrollment -> scm_TestErrorUpdateEnrollment;
		scm_UpdateGroupMembers -> scm_TestMockUpdateGroupMembers;
		scm_UpdateGroupMembers -> scm_TestErrorUpdateGroupMembers;
		scm_UpdateIssue -> scm_TestMockUpdateIssue;
		scm_UpdateIssue -> scm_TestUpdateIssue;
		scm_UpdateIssueComment -> scm_TestMockUpdateIssueComment;
		scm_UpdateIssueComment -> scm_TestFeedbackCommentFormat;
		scm_newSCMAppClient -> scm_GetOrCreateSCM;
		scm_Repository -> scm_GetOrganization;
		scm_Repository -> scm_GetRepositories;
		scm_Repository -> scm_RepositoryIsEmpty;
		scm_Repository -> scm_CreateCourse;
		scm_Repository -> scm_DemoteTeacherToStudent;
		scm_Repository -> scm_DeleteGroup;
		scm_Repository -> scm_getRepository;
		scm_Repository -> scm_deleteRepository;
		scm_Repository -> scm_Client;
		scm_Repository -> scm_toRepository;
		scm_Repository -> scm_TestMockGetRepositories;
		scm_Repository -> scm_TestMockCreateCourse;
		scm_Repository -> scm_TestMockUpdateEnrollment;
		scm_Repository -> scm_TestMockCreateGroup;
		scm_Repository -> scm_;
		scm_HTMLURL -> scm_toRepository;
		scm_ID -> scm_RepositoryIsEmpty;
		scm_ID -> scm_toRepository;
		scm_ID -> scm_TestMockGetRepositories;
		scm_Owner -> scm_RepositoryIsEmpty;
		scm_Owner -> scm_createStudentRepo;
		scm_Owner -> scm_toRepository;
		scm_Owner -> scm_TestMockCreateCourse;
		scm_Owner -> scm_TestMockUpdateEnrollment;
		scm_Owner -> scm_TestMockCreateGroup;
		scm_Repo -> scm_RepositoryIsEmpty;
		scm_Repo -> scm_CreateGroup;
		scm_Repo -> scm_createStudentRepo;
		scm_Repo -> scm_toRepository;
		scm_Repo -> scm_TestMockGetRepositories;
		scm_Repo -> scm_TestMockCreateCourse;
		scm_Repo -> scm_TestMockUpdateEnrollment;
		scm_Repo -> scm_TestMockCreateGroup;
		scm_Repo -> scm_isDirty;
		scm_Issue -> scm_;
		scm_Issue -> scm_RequestReviewers;
		scm_Issue -> scm_toIssue;
		scm_Issue -> scm_CreateIssue;
		scm_Issue -> scm_UpdateIssue;
		scm_Issue -> scm_GetIssue;
		scm_Issue -> scm_GetIssues;
		scm_Issue -> scm_TestMockCreateIssue;
		scm_Issue -> scm_TestMockDeleteIssues;
		scm_Issue -> scm_TestMockUpdateIssue;
		scm_Issue -> scm_TestMockGetIssue;
		scm_Issue -> scm_TestMockGetIssues;
		scm_Issue -> scm_TestEmptyRepo;
		scm_Assignee -> scm_toIssue;
		scm_Body -> scm_toIssue;
		scm_Body -> scm_TestMockCreateIssue;
		scm_Body -> scm_TestMockUpdateIssue;
		scm_Body -> scm_TestMockGetIssue;
		scm_Body -> scm_TestMockGetIssues;
		scm_Body -> scm_TestUpdateIssue;
		scm_Body -> scm_TestCreateIssue;
		scm_ID -> scm_toIssue;
		scm_ID -> scm_TestMockDeleteIssues;
		scm_ID -> scm_TestMockCreateIssue;
		scm_ID -> scm_TestMockUpdateIssue;
		scm_ID -> scm_TestMockGetIssue;
		scm_ID -> scm_TestMockGetIssues;
		scm_Number -> scm_toIssue;
		scm_Number -> scm_TestMockCreateIssue;
		scm_Number -> scm_TestMockUpdateIssue;
		scm_Number -> scm_TestMockGetIssue;
		scm_Number -> scm_TestMockGetIssues;
		scm_Number -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Number -> scm_TestCreateIssueComment;
		scm_Number -> scm_TestFeedbackCommentFormat;
		scm_Number -> scm_createIssue;
		scm_Number -> scm_TestGetIssue;
		scm_Number -> scm_TestUpdateIssue;
		scm_Repository -> scm_toIssue;
		scm_Repository -> scm_TestMockCreateIssue;
		scm_Repository -> scm_TestMockUpdateIssue;
		scm_Repository -> scm_TestMockGetIssue;
		scm_Repository -> scm_TestMockGetIssues;
		scm_Status -> scm_toIssue;
		scm_Title -> scm_toIssue;
		scm_Title -> scm_TestMockCreateIssue;
		scm_Title -> scm_TestMockUpdateIssue;
		scm_Title -> scm_TestMockGetIssue;
		scm_Title -> scm_TestMockGetIssues;
		scm_Title -> scm_TestUpdateIssue;
		scm_Title -> scm_TestCreateIssue;
		subgraph cluster_scm_errors_go {
			label = "scm_errors.go";
			labelloc="t";
			rankdir=TB;
			scm_ErrNotMember [label = "ErrNotMember, Variable";shape = box;];
			scm_ErrNotOwner [label = "ErrNotOwner, Variable";shape = box;];
			scm_ErrAlreadyExists [label = "ErrAlreadyExists, Variable";shape = box;];
			scm_SCMError [label = "SCMError, Struct";shape = box;];
			scm_SCMError -> scm_Unwrap;
			scm_SCMError -> scm_E;
			scm_SCMError -> scm_add;
			scm_SCMError -> scm_Error;
			scm_err [label = "err, Field";shape = box;];
			scm_err -> scm_UserError;
			scm_err -> scm_add;
			scm_err -> scm_Error;
			scm_err -> scm_Unwrap;
			scm_op [label = "op, Field";shape = box;];
			scm_op -> scm_E;
			scm_op -> scm_Error;
			scm_unwrap [label = "unwrap, Interface";shape = box;];
			scm_unwrap -> scm_Unwrap;
			scm_Unwrap [label = "Unwrap, Method";shape = box;];
			scm_Op [label = "Op, Class";shape = box;];
			scm_Op -> scm_;
			scm_Op -> scm_E;
			scm_UserError [label = "UserError, Struct";shape = box;];
			scm_UserError -> scm_UserError;
			scm_UserError -> scm_Unwrap;
			scm_UserError -> scm_Error;
			scm_UserError -> scm_M;
			scm_UserError -> scm_E;
			scm_e [label = "e, Field";shape = box;];
			scm_e -> scm_Error;
			scm_e -> scm_Unwrap;
			scm_Error [label = "Error, Method";shape = box;];
			scm_Error -> scm_Error;
			scm_Unwrap [label = "Unwrap, Method";shape = box;];
			scm_M [label = "M, Function";shape = box;];
			scm_E [label = "E, Function";shape = box;];
			scm_add [label = "add, Method";shape = box;];
			scm_add -> scm_E;
			scm_Error [label = "Error, Method";shape = box;];
			scm_Error -> scm_Error;
			scm_Unwrap [label = "Unwrap, Method";shape = box;];
			scm_UserError [label = "UserError, Method";shape = box;];
		}
		scm_ErrNotOwner -> scm_GetOrganization;
		scm_ErrAlreadyExists -> scm_CreateGroup;
		scm_ErrAlreadyExists -> scm_GetOrganization;
		scm_ErrAlreadyExists -> scm_TestErrorCheckSentinel;
		scm_Op -> scm_GetRepositories;
		scm_Op -> scm_CreateCourse;
		scm_Op -> scm_UpdateEnrollment;
		scm_Op -> scm_RejectEnrollment;
		scm_Op -> scm_DemoteTeacherToStudent;
		scm_Op -> scm_CreateGroup;
		scm_Op -> scm_UpdateGroupMembers;
		scm_Op -> scm_DeleteGroup;
		scm_Op -> scm_getRepository;
		scm_Op -> scm_createRepository;
		scm_Op -> scm_deleteRepository;
		scm_Op -> scm_GetOrganization;
		scm_Op -> scm_UpdateIssueComment;
		scm_Op -> scm_RequestReviewers;
		scm_Op -> scm_CreateIssue;
		scm_Op -> scm_UpdateIssue;
		scm_Op -> scm_GetIssue;
		scm_Op -> scm_GetIssues;
		scm_Op -> scm_CreateIssueComment;
		scm_Op -> scm_TestErrorCheckSentinel;
		scm_Op -> scm_TestErrorE;
		scm_UserError -> scm_chkErrMsg;
		scm_UserError -> scm_TestErrorE;
		scm_Error -> scm_chkErrMsg;
		scm_Error -> scm_TestErrorE;
		scm_M -> scm_GetRepositories;
		scm_M -> scm_CreateCourse;
		scm_M -> scm_UpdateEnrollment;
		scm_M -> scm_RejectEnrollment;
		scm_M -> scm_DemoteTeacherToStudent;
		scm_M -> scm_CreateGroup;
		scm_M -> scm_UpdateGroupMembers;
		scm_M -> scm_DeleteGroup;
		scm_M -> scm_getRepository;
		scm_M -> scm_createRepository;
		scm_M -> scm_deleteRepository;
		scm_M -> scm_GetOrganization;
		scm_M -> scm_UpdateIssueComment;
		scm_M -> scm_RequestReviewers;
		scm_M -> scm_CreateIssue;
		scm_M -> scm_UpdateIssue;
		scm_M -> scm_GetIssue;
		scm_M -> scm_GetIssues;
		scm_M -> scm_CreateIssueComment;
		scm_M -> scm_TestErrorCheckSentinel;
		scm_M -> scm_TestErrorE;
		scm_E -> scm_GetRepositories;
		scm_E -> scm_CreateCourse;
		scm_E -> scm_UpdateEnrollment;
		scm_E -> scm_RejectEnrollment;
		scm_E -> scm_DemoteTeacherToStudent;
		scm_E -> scm_CreateGroup;
		scm_E -> scm_UpdateGroupMembers;
		scm_E -> scm_DeleteGroup;
		scm_E -> scm_getRepository;
		scm_E -> scm_createRepository;
		scm_E -> scm_deleteRepository;
		scm_E -> scm_GetOrganization;
		scm_E -> scm_UpdateIssueComment;
		scm_E -> scm_RequestReviewers;
		scm_E -> scm_CreateIssue;
		scm_E -> scm_UpdateIssue;
		scm_E -> scm_GetIssue;
		scm_E -> scm_GetIssues;
		scm_E -> scm_CreateIssueComment;
		scm_E -> scm_TestErrorCheckSentinel;
		scm_E -> scm_TestErrorE;
		subgraph cluster_scm_errors_test_go {
			label = "scm_errors_test.go";
			labelloc="t";
			rankdir=TB;
			scm_debugErrMsg [label = "debugErrMsg, Variable";shape = box;];
			scm_debugErrMsg -> scm_chkErrMsg;
			scm_IgnoreURLPort [label = "IgnoreURLPort, Function";shape = box;];
			scm_IgnoreURLPort -> scm_chkErrMsg;
			scm_TestErrorGetOrganization [label = "TestErrorGetOrganization, Function";shape = box;];
			scm_TestErrorCreateCourse [label = "TestErrorCreateCourse, Function";shape = box;];
			scm_TestErrorUpdateEnrollment [label = "TestErrorUpdateEnrollment, Function";shape = box;];
			scm_TestErrorRejectEnrollment [label = "TestErrorRejectEnrollment, Function";shape = box;];
			scm_TestErrorDemoteTeacherToStudent [label = "TestErrorDemoteTeacherToStudent, Function";shape = box;];
			scm_TestErrorCreateGroup [label = "TestErrorCreateGroup, Function";shape = box;];
			scm_TestErrorUpdateGroupMembers [label = "TestErrorUpdateGroupMembers, Function";shape = box;];
			scm_chkErrMsg [label = "chkErrMsg, Function";shape = box;];
			scm_chkErrMsg -> scm_TestErrorGetOrganization;
			scm_chkErrMsg -> scm_TestErrorCreateCourse;
			scm_chkErrMsg -> scm_TestErrorUpdateEnrollment;
			scm_chkErrMsg -> scm_TestErrorRejectEnrollment;
			scm_chkErrMsg -> scm_TestErrorDemoteTeacherToStudent;
			scm_chkErrMsg -> scm_TestErrorCreateGroup;
			scm_chkErrMsg -> scm_TestErrorUpdateGroupMembers;
			scm_TestErrorCheckSentinel [label = "TestErrorCheckSentinel, Function";shape = box;];
			scm_TestErrorE [label = "TestErrorE, Function";shape = box;];
		}
		subgraph cluster_scm_invite_go {
			label = "scm_invite.go";
			labelloc="t";
			rankdir=TB;
			scm_InvitationOptions [label = "InvitationOptions, Struct";shape = box;];
			scm_InvitationOptions -> scm_;
			scm_Login [label = "Login, Field";shape = box;];
			scm_Login -> scm_valid;
			scm_Owner [label = "Owner, Field";shape = box;];
			scm_Owner -> scm_valid;
			scm_RefreshToken [label = "RefreshToken, Field";shape = box;];
			scm_RefreshToken -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
		}
		scm_InvitationOptions -> scm_newGithubInviteClient;
		scm_InvitationOptions -> scm_Clone;
		scm_Login -> scm_AcceptInvitations;
		scm_Owner -> scm_AcceptInvitations;
		scm_RefreshToken -> scm_AcceptInvitations;
		scm_valid -> scm_AcceptInvitations;
		subgraph cluster_scm_options_go {
			label = "scm_options.go";
			labelloc="t";
			rankdir=TB;
			scm_CourseOptions [label = "CourseOptions, Struct";shape = box;];
			scm_CourseOptions -> scm_;
			scm_CourseCreator [label = "CourseCreator, Field";shape = box;];
			scm_CourseCreator -> scm_valid;
			scm_OrganizationID [label = "OrganizationID, Field";shape = box;];
			scm_OrganizationID -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_UpdateEnrollmentOptions [label = "UpdateEnrollmentOptions, Struct";shape = box;];
			scm_UpdateEnrollmentOptions -> scm_valid;
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_valid;
			scm_Status [label = "Status, Field";shape = box;];
			scm_User [label = "User, Field";shape = box;];
			scm_User -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_RejectEnrollmentOptions [label = "RejectEnrollmentOptions, Struct";shape = box;];
			scm_RejectEnrollmentOptions -> scm_valid;
			scm_OrganizationID [label = "OrganizationID, Field";shape = box;];
			scm_OrganizationID -> scm_valid;
			scm_RepositoryID [label = "RepositoryID, Field";shape = box;];
			scm_RepositoryID -> scm_valid;
			scm_User [label = "User, Field";shape = box;];
			scm_User -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_OrganizationOptions [label = "OrganizationOptions, Struct";shape = box;];
			scm_OrganizationOptions -> scm_valid;
			scm_ID [label = "ID, Field";shape = box;];
			scm_ID -> scm_valid;
			scm_Name [label = "Name, Field";shape = box;];
			scm_Name -> scm_valid;
			scm_NewCourse [label = "NewCourse, Field";shape = box;];
			scm_Username [label = "Username, Field";shape = box;];
			scm_valid [label = "valid, Method";shape = box;];
			scm_RepositoryOptions [label = "RepositoryOptions, Struct";shape = box;];
			scm_RepositoryOptions -> scm_valid;
			scm_ID [label = "ID, Field";shape = box;];
			scm_ID -> scm_valid;
			scm_Owner [label = "Owner, Field";shape = box;];
			scm_Owner -> scm_valid;
			scm_Repo [label = "Repo, Field";shape = box;];
			scm_Repo -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_CreateRepositoryOptions [label = "CreateRepositoryOptions, Struct";shape = box;];
			scm_CreateRepositoryOptions -> scm_valid;
			scm_Owner [label = "Owner, Field";shape = box;];
			scm_Owner -> scm_valid;
			scm_Private [label = "Private, Field";shape = box;];
			scm_Repo [label = "Repo, Field";shape = box;];
			scm_Repo -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_GroupOptions [label = "GroupOptions, Struct";shape = box;];
			scm_GroupOptions -> scm_valid;
			scm_GroupName [label = "GroupName, Field";shape = box;];
			scm_GroupName -> scm_valid;
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_valid;
			scm_Users [label = "Users, Field";shape = box;];
			scm_valid [label = "valid, Method";shape = box;];
			scm_IssueOptions [label = "IssueOptions, Struct";shape = box;];
			scm_IssueOptions -> scm_valid;
			scm_Assignee [label = "Assignee, Field";shape = box;];
			scm_Assignees [label = "Assignees, Field";shape = box;];
			scm_Body [label = "Body, Field";shape = box;];
			scm_Body -> scm_valid;
			scm_Labels [label = "Labels, Field";shape = box;];
			scm_Number [label = "Number, Field";shape = box;];
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_valid;
			scm_Repository [label = "Repository, Field";shape = box;];
			scm_Repository -> scm_valid;
			scm_State [label = "State, Field";shape = box;];
			scm_Title [label = "Title, Field";shape = box;];
			scm_Title -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_IssueCommentOptions [label = "IssueCommentOptions, Struct";shape = box;];
			scm_IssueCommentOptions -> scm_valid;
			scm_Body [label = "Body, Field";shape = box;];
			scm_Body -> scm_valid;
			scm_CommentID [label = "CommentID, Field";shape = box;];
			scm_Number [label = "Number, Field";shape = box;];
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_valid;
			scm_Repository [label = "Repository, Field";shape = box;];
			scm_Repository -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
			scm_RequestReviewersOptions [label = "RequestReviewersOptions, Struct";shape = box;];
			scm_RequestReviewersOptions -> scm_valid;
			scm_Number [label = "Number, Field";shape = box;];
			scm_Number -> scm_valid;
			scm_Organization [label = "Organization, Field";shape = box;];
			scm_Organization -> scm_valid;
			scm_Repository [label = "Repository, Field";shape = box;];
			scm_Repository -> scm_valid;
			scm_Reviewers [label = "Reviewers, Field";shape = box;];
			scm_Reviewers -> scm_valid;
			scm_valid [label = "valid, Method";shape = box;];
		}
		scm_CourseOptions -> scm_RepositoryIsEmpty;
		scm_CourseOptions -> scm_TestMockCreateCourse;
		scm_CourseOptions -> scm_TestErrorCreateCourse;
		scm_CourseCreator -> scm_CreateCourse;
		scm_CourseCreator -> scm_TestMockCreateCourse;
		scm_CourseCreator -> scm_TestErrorCreateCourse;
		scm_OrganizationID -> scm_CreateCourse;
		scm_OrganizationID -> scm_TestMockCreateCourse;
		scm_OrganizationID -> scm_TestErrorCreateCourse;
		scm_valid -> scm_CreateCourse;
		scm_UpdateEnrollmentOptions -> scm_CreateCourse;
		scm_UpdateEnrollmentOptions -> scm_RejectEnrollment;
		scm_UpdateEnrollmentOptions -> scm_TestMockUpdateEnrollment;
		scm_UpdateEnrollmentOptions -> scm_TestMockDemoteTeacherToStudent;
		scm_UpdateEnrollmentOptions -> scm_TestErrorUpdateEnrollment;
		scm_UpdateEnrollmentOptions -> scm_TestErrorDemoteTeacherToStudent;
		scm_Organization -> scm_UpdateEnrollment;
		scm_Organization -> scm_DemoteTeacherToStudent;
		scm_Organization -> scm_TestMockUpdateEnrollment;
		scm_Organization -> scm_TestMockDemoteTeacherToStudent;
		scm_Organization -> scm_TestErrorUpdateEnrollment;
		scm_Organization -> scm_TestErrorDemoteTeacherToStudent;
		scm_Status -> scm_UpdateEnrollment;
		scm_Status -> scm_TestMockUpdateEnrollment;
		scm_Status -> scm_TestErrorUpdateEnrollment;
		scm_User -> scm_UpdateEnrollment;
		scm_User -> scm_DemoteTeacherToStudent;
		scm_User -> scm_TestMockUpdateEnrollment;
		scm_User -> scm_TestMockDemoteTeacherToStudent;
		scm_User -> scm_TestErrorUpdateEnrollment;
		scm_User -> scm_TestErrorDemoteTeacherToStudent;
		scm_valid -> scm_UpdateEnrollment;
		scm_valid -> scm_DemoteTeacherToStudent;
		scm_RejectEnrollmentOptions -> scm_UpdateEnrollment;
		scm_RejectEnrollmentOptions -> scm_TestMockRejectEnrollment;
		scm_RejectEnrollmentOptions -> scm_TestErrorRejectEnrollment;
		scm_OrganizationID -> scm_RejectEnrollment;
		scm_OrganizationID -> scm_TestMockRejectEnrollment;
		scm_OrganizationID -> scm_TestErrorRejectEnrollment;
		scm_RepositoryID -> scm_RejectEnrollment;
		scm_RepositoryID -> scm_TestMockRejectEnrollment;
		scm_RepositoryID -> scm_TestErrorRejectEnrollment;
		scm_User -> scm_RejectEnrollment;
		scm_User -> scm_TestMockRejectEnrollment;
		scm_User -> scm_TestErrorRejectEnrollment;
		scm_valid -> scm_RejectEnrollment;
		scm_OrganizationOptions -> scm_CreateCourse;
		scm_OrganizationOptions -> scm_UpdateEnrollment;
		scm_OrganizationOptions -> scm_RejectEnrollment;
		scm_OrganizationOptions -> scm_CreateGroup;
		scm_OrganizationOptions -> scm_NewGithubSCMClient;
		scm_OrganizationOptions -> scm_TestMockGetOrganization;
		scm_OrganizationOptions -> scm_TestGetOrganization;
		scm_OrganizationOptions -> scm_;
		scm_OrganizationOptions -> scm_TestErrorGetOrganization;
		scm_ID -> scm_CreateCourse;
		scm_ID -> scm_RejectEnrollment;
		scm_ID -> scm_GetOrganization;
		scm_ID -> scm_TestMockGetOrganization;
		scm_ID -> scm_TestErrorGetOrganization;
		scm_Name -> scm_UpdateEnrollment;
		scm_Name -> scm_CreateGroup;
		scm_Name -> scm_GetOrganization;
		scm_Name -> scm_TestMockGetOrganization;
		scm_Name -> scm_TestGetOrganization;
		scm_Name -> scm_TestErrorGetOrganization;
		scm_NewCourse -> scm_CreateCourse;
		scm_NewCourse -> scm_GetOrganization;
		scm_NewCourse -> scm_TestMockGetOrganization;
		scm_NewCourse -> scm_TestErrorGetOrganization;
		scm_Username -> scm_CreateCourse;
		scm_Username -> scm_GetOrganization;
		scm_Username -> scm_TestMockGetOrganization;
		scm_Username -> scm_TestGetOrganization;
		scm_Username -> scm_TestErrorGetOrganization;
		scm_valid -> scm_GetOrganization;
		scm_RepositoryOptions -> scm_GetRepositories;
		scm_RepositoryOptions -> scm_CreateGroup;
		scm_RepositoryOptions -> scm_DeleteGroup;
		scm_RepositoryOptions -> scm_UpdateIssue;
		scm_RepositoryOptions -> scm_GetIssue;
		scm_RepositoryOptions -> scm_TestMockDeleteIssue;
		scm_RepositoryOptions -> scm_TestMockDeleteIssues;
		scm_RepositoryOptions -> scm_TestMockGetIssue;
		scm_RepositoryOptions -> scm_TestMockGetIssues;
		scm_RepositoryOptions -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_RepositoryOptions -> scm_TestMockRepositoryIsEmpty;
		scm_RepositoryOptions -> scm_TestMockDeleteGroup;
		scm_RepositoryOptions -> scm_TestDeleteAllIssues;
		scm_RepositoryOptions -> scm_TestEmptyRepo;
		scm_RepositoryOptions -> scm_createIssue;
		scm_RepositoryOptions -> scm_TestGetIssue;
		scm_RepositoryOptions -> scm_;
		scm_RepositoryOptions -> scm_DeleteIssue;
		scm_RepositoryOptions -> scm_GetIssues;
		scm_ID -> scm_RepositoryIsEmpty;
		scm_ID -> scm_getRepository;
		scm_ID -> scm_TestMockDeleteGroup;
		scm_ID -> scm_TestEmptyRepo;
		scm_Owner -> scm_RepositoryIsEmpty;
		scm_Owner -> scm_CreateGroup;
		scm_Owner -> scm_getRepository;
		scm_Owner -> scm_GetIssue;
		scm_Owner -> scm_GetIssues;
		scm_Owner -> scm_TestMockDeleteIssue;
		scm_Owner -> scm_TestMockDeleteIssues;
		scm_Owner -> scm_TestMockGetIssue;
		scm_Owner -> scm_TestMockGetIssues;
		scm_Owner -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Owner -> scm_TestMockRepositoryIsEmpty;
		scm_Owner -> scm_TestMockDeleteGroup;
		scm_Owner -> scm_TestDeleteAllIssues;
		scm_Owner -> scm_TestEmptyRepo;
		scm_Owner -> scm_createIssue;
		scm_Owner -> scm_TestGetIssue;
		scm_Owner -> scm_DeleteIssue;
		scm_Owner -> scm_DeleteIssues;
		scm_Repo -> scm_RepositoryIsEmpty;
		scm_Repo -> scm_CreateGroup;
		scm_Repo -> scm_getRepository;
		scm_Repo -> scm_GetIssue;
		scm_Repo -> scm_GetIssues;
		scm_Repo -> scm_TestMockDeleteIssue;
		scm_Repo -> scm_TestMockDeleteIssues;
		scm_Repo -> scm_TestMockGetIssue;
		scm_Repo -> scm_TestMockGetIssues;
		scm_Repo -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Repo -> scm_TestMockRepositoryIsEmpty;
		scm_Repo -> scm_TestMockDeleteGroup;
		scm_Repo -> scm_TestDeleteAllIssues;
		scm_Repo -> scm_TestEmptyRepo;
		scm_Repo -> scm_createIssue;
		scm_Repo -> scm_TestGetIssue;
		scm_Repo -> scm_DeleteIssue;
		scm_Repo -> scm_DeleteIssues;
		scm_valid -> scm_getRepository;
		scm_valid -> scm_GetIssue;
		scm_valid -> scm_GetIssues;
		scm_CreateRepositoryOptions -> scm_CreateCourse;
		scm_CreateRepositoryOptions -> scm_CreateGroup;
		scm_CreateRepositoryOptions -> scm_getRepository;
		scm_CreateRepositoryOptions -> scm_createStudentRepo;
		scm_Owner -> scm_CreateCourse;
		scm_Owner -> scm_createRepository;
		scm_Owner -> scm_createStudentRepo;
		scm_Private -> scm_CreateCourse;
		scm_Private -> scm_CreateGroup;
		scm_Private -> scm_createRepository;
		scm_Private -> scm_createStudentRepo;
		scm_Repo -> scm_CreateCourse;
		scm_Repo -> scm_createRepository;
		scm_Repo -> scm_createStudentRepo;
		scm_valid -> scm_createRepository;
		scm_GroupOptions -> scm_DemoteTeacherToStudent;
		scm_GroupOptions -> scm_CreateGroup;
		scm_GroupOptions -> scm_TestMockCreateGroup;
		scm_GroupOptions -> scm_TestMockUpdateGroupMembers;
		scm_GroupOptions -> scm_TestErrorCreateGroup;
		scm_GroupOptions -> scm_TestErrorUpdateGroupMembers;
		scm_GroupName -> scm_CreateGroup;
		scm_GroupName -> scm_UpdateGroupMembers;
		scm_GroupName -> scm_TestMockCreateGroup;
		scm_GroupName -> scm_TestMockUpdateGroupMembers;
		scm_GroupName -> scm_TestErrorCreateGroup;
		scm_GroupName -> scm_TestErrorUpdateGroupMembers;
		scm_Organization -> scm_CreateGroup;
		scm_Organization -> scm_UpdateGroupMembers;
		scm_Organization -> scm_TestMockCreateGroup;
		scm_Organization -> scm_TestMockUpdateGroupMembers;
		scm_Organization -> scm_TestErrorCreateGroup;
		scm_Organization -> scm_TestErrorUpdateGroupMembers;
		scm_Users -> scm_CreateGroup;
		scm_Users -> scm_UpdateGroupMembers;
		scm_Users -> scm_TestMockCreateGroup;
		scm_Users -> scm_TestMockUpdateGroupMembers;
		scm_Users -> scm_TestErrorCreateGroup;
		scm_Users -> scm_TestErrorUpdateGroupMembers;
		scm_valid -> scm_CreateGroup;
		scm_valid -> scm_UpdateGroupMembers;
		scm_IssueOptions -> scm_;
		scm_IssueOptions -> scm_CreateIssue;
		scm_IssueOptions -> scm_TestMockDeleteIssues;
		scm_IssueOptions -> scm_TestMockUpdateIssue;
		scm_IssueOptions -> scm_TestMockGetIssue;
		scm_IssueOptions -> scm_TestMockCreateIssue;
		scm_IssueOptions -> scm_TestMockGetIssues;
		scm_IssueOptions -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_IssueOptions -> scm_TestMockCreateIssueComment;
		scm_IssueOptions -> scm_TestMockUpdateIssueComment;
		scm_IssueOptions -> scm_TestMockDeleteIssue;
		scm_IssueOptions -> scm_createIssue;
		scm_IssueOptions -> scm_TestUpdateIssue;
		scm_IssueOptions -> scm_AcceptInvitations;
		scm_Assignee -> scm_CreateIssue;
		scm_Assignee -> scm_UpdateIssue;
		scm_Assignees -> scm_CreateIssue;
		scm_Assignees -> scm_UpdateIssue;
		scm_Body -> scm_CreateIssue;
		scm_Body -> scm_UpdateIssue;
		scm_Body -> scm_TestMockDeleteIssues;
		scm_Body -> scm_TestMockUpdateIssue;
		scm_Body -> scm_TestMockGetIssue;
		scm_Body -> scm_TestMockGetIssues;
		scm_Body -> scm_TestMockCreateIssue;
		scm_Body -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Body -> scm_TestMockCreateIssueComment;
		scm_Body -> scm_TestMockUpdateIssueComment;
		scm_Body -> scm_TestMockDeleteIssue;
		scm_Body -> scm_TestUpdateIssue;
		scm_Body -> scm_createIssue;
		scm_Number -> scm_UpdateIssue;
		scm_Number -> scm_TestMockUpdateIssue;
		scm_Number -> scm_TestMockCreateIssue;
		scm_Number -> scm_TestUpdateIssue;
		scm_Organization -> scm_CreateIssue;
		scm_Organization -> scm_UpdateIssue;
		scm_Organization -> scm_TestMockDeleteIssues;
		scm_Organization -> scm_TestMockUpdateIssue;
		scm_Organization -> scm_TestMockGetIssue;
		scm_Organization -> scm_TestMockGetIssues;
		scm_Organization -> scm_TestMockCreateIssue;
		scm_Organization -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Organization -> scm_TestMockCreateIssueComment;
		scm_Organization -> scm_TestMockUpdateIssueComment;
		scm_Organization -> scm_TestMockDeleteIssue;
		scm_Organization -> scm_createIssue;
		scm_Organization -> scm_TestUpdateIssue;
		scm_Repository -> scm_CreateIssue;
		scm_Repository -> scm_UpdateIssue;
		scm_Repository -> scm_TestMockDeleteIssues;
		scm_Repository -> scm_TestMockUpdateIssue;
		scm_Repository -> scm_TestMockGetIssue;
		scm_Repository -> scm_TestMockGetIssues;
		scm_Repository -> scm_TestMockCreateIssue;
		scm_Repository -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Repository -> scm_TestMockCreateIssueComment;
		scm_Repository -> scm_TestMockUpdateIssueComment;
		scm_Repository -> scm_TestMockDeleteIssue;
		scm_Repository -> scm_createIssue;
		scm_Repository -> scm_TestUpdateIssue;
		scm_State -> scm_UpdateIssue;
		scm_Title -> scm_CreateIssue;
		scm_Title -> scm_UpdateIssue;
		scm_Title -> scm_TestMockDeleteIssues;
		scm_Title -> scm_TestMockUpdateIssue;
		scm_Title -> scm_TestMockGetIssue;
		scm_Title -> scm_TestMockGetIssues;
		scm_Title -> scm_TestMockCreateIssue;
		scm_Title -> scm_TestMockGetIssues_CheckIssueNumbers;
		scm_Title -> scm_TestMockCreateIssueComment;
		scm_Title -> scm_TestMockUpdateIssueComment;
		scm_Title -> scm_TestMockDeleteIssue;
		scm_Title -> scm_TestUpdateIssue;
		scm_Title -> scm_createIssue;
		scm_valid -> scm_CreateIssue;
		scm_valid -> scm_UpdateIssue;
		scm_IssueCommentOptions -> scm_CreateIssueComment;
		scm_IssueCommentOptions -> scm_GetIssues;
		scm_IssueCommentOptions -> scm_TestMockCreateIssueComment;
		scm_IssueCommentOptions -> scm_TestMockUpdateIssueComment;
		scm_IssueCommentOptions -> scm_TestCreateIssueComment;
		scm_IssueCommentOptions -> scm_TestFeedbackCommentFormat;
		scm_IssueCommentOptions -> scm_DeleteIssues;
		scm_Body -> scm_UpdateIssueComment;
		scm_Body -> scm_CreateIssueComment;
		scm_Body -> scm_TestCreateIssueComment;
		scm_Body -> scm_TestFeedbackCommentFormat;
		scm_CommentID -> scm_UpdateIssueComment;
		scm_CommentID -> scm_TestMockUpdateIssueComment;
		scm_CommentID -> scm_TestFeedbackCommentFormat;
		scm_Number -> scm_UpdateIssueComment;
		scm_Number -> scm_CreateIssueComment;
		scm_Number -> scm_TestMockCreateIssueComment;
		scm_Number -> scm_TestMockUpdateIssueComment;
		scm_Number -> scm_TestCreateIssueComment;
		scm_Number -> scm_TestFeedbackCommentFormat;
		scm_Organization -> scm_UpdateIssueComment;
		scm_Organization -> scm_CreateIssueComment;
		scm_Organization -> scm_TestCreateIssueComment;
		scm_Organization -> scm_TestFeedbackCommentFormat;
		scm_Repository -> scm_UpdateIssueComment;
		scm_Repository -> scm_CreateIssueComment;
		scm_Repository -> scm_TestCreateIssueComment;
		scm_Repository -> scm_TestFeedbackCommentFormat;
		scm_valid -> scm_UpdateIssueComment;
		scm_valid -> scm_CreateIssueComment;
		scm_RequestReviewersOptions -> scm_UpdateIssueComment;
		scm_RequestReviewersOptions -> scm_TestMockRequestReviewers;
		scm_RequestReviewersOptions -> scm_TestRequestReviewers;
		scm_Number -> scm_RequestReviewers;
		scm_Number -> scm_TestMockRequestReviewers;
		scm_Number -> scm_TestRequestReviewers;
		scm_Organization -> scm_RequestReviewers;
		scm_Organization -> scm_TestMockRequestReviewers;
		scm_Organization -> scm_TestRequestReviewers;
		scm_Repository -> scm_RequestReviewers;
		scm_Repository -> scm_TestMockRequestReviewers;
		scm_Repository -> scm_TestRequestReviewers;
		scm_Reviewers -> scm_RequestReviewers;
		scm_Reviewers -> scm_TestMockRequestReviewers;
		scm_Reviewers -> scm_TestRequestReviewers;
		scm_valid -> scm_RequestReviewers;
	}
	subgraph cluster_web {
		label = "web (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_access_control_go {
			label = "access_control.go";
			labelloc="t";
			rankdir=TB;
			web_userID [label = "userID, Function";shape = box;];
			web_isTeacher [label = "isTeacher, Function";shape = box;];
			web_courseStatus [label = "courseStatus, Function";shape = box;];
			web_hasCourseAccess [label = "hasCourseAccess, Method";shape = box;];
			web_hasCourseAccess -> web_isTeacher;
			web_isTeacher [label = "isTeacher, Method";shape = box;];
			web_isCourseCreator [label = "isCourseCreator, Method";shape = box;];
		}
		web_userID -> web_UpdateCourseVisibility;
		web_userID -> web_UpdateEnrollments;
		web_userID -> web_GetSubmissions;
		web_userID -> web_GetUser;
		web_userID -> web_GetOrganization;
		web_userID -> web_GetRepositories;
		web_userID -> web_SubmissionStream;
		web_userID -> web_UpdateUser;
		web_isTeacher -> web_GetCourse;
		web_isTeacher -> web_GetEnrollments;
		web_courseStatus -> web_GetCourse;
		web_isTeacher -> web_GetSubmissions;
		web_isCourseCreator -> web_UpdateEnrollments;
		subgraph cluster_assignments_go {
			label = "assignments.go";
			labelloc="t";
			rankdir=TB;
			web_getAssignments [label = "getAssignments, Method";shape = box;];
			web_createBenchmark [label = "createBenchmark, Method";shape = box;];
			web_createReview [label = "createReview, Method";shape = box;];
			web_updateReview [label = "updateReview, Method";shape = box;];
			web_getAssignmentWithCourse [label = "getAssignmentWithCourse, Method";shape = box;];
		}
		web_getAssignments -> web_GetAssignments;
		web_createBenchmark -> web_CreateBenchmark;
		web_createReview -> web_CreateReview;
		web_updateReview -> web_UpdateReview;
		web_getAssignmentWithCourse -> web_rebuildSubmission;
		subgraph cluster_bh_go {
			label = "bh.go";
			labelloc="t";
			rankdir=TB;
			web_BaseHookOptions [label = "BaseHookOptions, Struct";shape = box;];
			web_BaseURL [label = "BaseURL, Field";shape = box;];
			web_Secret [label = "Secret, Field";shape = box;];
		}
		web_BaseHookOptions -> web_MockClient;
		web_BaseHookOptions -> web_MockClientWithOption;
		web_BaseHookOptions -> web_;
		web_BaseHookOptions -> web_TestRebuildSubmissions;
		web_BaseHookOptions -> web_TestRegisterRouter;
		web_Secret -> web_RegisterRouter;
		subgraph cluster_courses_go {
			label = "courses.go";
			labelloc="t";
			rankdir=TB;
			web_updateEnrollment [label = "updateEnrollment, Method";shape = box;];
			web_rejectEnrollment [label = "rejectEnrollment, Method";shape = box;];
			web_rejectEnrollment -> web_updateEnrollment;
			web_enrollStudent [label = "enrollStudent, Method";shape = box;];
			web_enrollStudent -> web_updateEnrollment;
			web_enrollTeacher [label = "enrollTeacher, Method";shape = box;];
			web_enrollTeacher -> web_updateEnrollment;
			web_revokeTeacherStatus [label = "revokeTeacherStatus, Method";shape = box;];
			web_revokeTeacherStatus -> web_updateEnrollment;
			web_getSubmissions [label = "getSubmissions, Method";shape = box;];
			web_getAllCourseSubmissions [label = "getAllCourseSubmissions, Method";shape = box;];
			web_getAllCourseSubmissions -> web_getEnrollmentsWithActivity;
			web_makeGroupResults [label = "makeGroupResults, Function";shape = box;];
			web_makeGroupResults -> web_getAllCourseSubmissions;
			web_makeUserResults [label = "makeUserResults, Function";shape = box;];
			web_makeUserResults -> web_getAllCourseSubmissions;
			web_makeAllResults [label = "makeAllResults, Function";shape = box;];
			web_makeAllResults -> web_getAllCourseSubmissions;
			web_choose [label = "choose, Function";shape = box;];
			web_choose -> web_makeGroupResults;
			web_choose -> web_makeUserResults;
			web_choose -> web_makeAllResults;
			web_updateSubmission [label = "updateSubmission, Method";shape = box;];
			web_updateSubmissions [label = "updateSubmissions, Method";shape = box;];
			web_updateCourse [label = "updateCourse, Method";shape = box;];
			web_getEnrollmentsWithActivity [label = "getEnrollmentsWithActivity, Method";shape = box;];
			web_acceptRepositoryInvites [label = "acceptRepositoryInvites, Method";shape = box;];
			web_acceptRepositoryInvites -> web_enrollStudent;
			web_orderMap [label = "orderMap, Class";shape = box;];
			web_orderMap -> web_makeAllResults;
			web_orderMap -> web_acceptRepositoryInvites;
			web_orderMap -> web_newOrderMap;
			web_newOrderMap [label = "newOrderMap, Function";shape = box;];
			web_newOrderMap -> web_makeGroupResults;
			web_newOrderMap -> web_makeUserResults;
			web_newOrderMap -> web_makeAllResults;
			web_Less [label = "Less, Method";shape = box;];
			web_Less -> web_choose;
		}
		web_updateEnrollment -> web_UpdateEnrollments;
		web_getSubmissions -> web_GetSubmissions;
		web_getAllCourseSubmissions -> web_GetSubmissionsByCourse;
		web_updateSubmission -> web_UpdateSubmission;
		web_updateSubmissions -> web_UpdateSubmissions;
		web_updateCourse -> web_UpdateCourse;
		web_getEnrollmentsWithActivity -> web_GetCourse;
		web_getEnrollmentsWithActivity -> web_GetEnrollments;
		web_newOrderMap -> web_TestOrderSubmissions;
		web_Less -> web_TestOrderSubmissions;
		subgraph cluster_courses_test_go {
			label = "courses_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestGetCourse [label = "TestGetCourse, Function";shape = box;];
			web_TestGetCourseWithoutDockerfileDigest [label = "TestGetCourseWithoutDockerfileDigest, Function";shape = box;];
			web_TestGetCourses [label = "TestGetCourses, Function";shape = box;];
			web_TestEnrollmentProcess [label = "TestEnrollmentProcess, Function";shape = box;];
			web_TestListCoursesWithEnrollment [label = "TestListCoursesWithEnrollment, Function";shape = box;];
			web_TestListCoursesWithEnrollmentStatuses [label = "TestListCoursesWithEnrollmentStatuses, Function";shape = box;];
			web_TestPromoteDemoteRejectTeacher [label = "TestPromoteDemoteRejectTeacher, Function";shape = box;];
			web_TestUpdateCourseVisibility [label = "TestUpdateCourseVisibility, Function";shape = box;];
		}
		subgraph cluster_groups_go {
			label = "groups.go";
			labelloc="t";
			rankdir=TB;
			web_maxGroupNameLength [label = "maxGroupNameLength, Constant";shape = box;];
			web_maxGroupNameLength -> web_checkGroupName;
			web_ErrGroupNameDuplicate [label = "ErrGroupNameDuplicate, Variable";shape = box;];
			web_ErrGroupNameDuplicate -> web_checkGroupName;
			web_ErrGroupNameTooLong [label = "ErrGroupNameTooLong, Variable";shape = box;];
			web_ErrGroupNameTooLong -> web_checkGroupName;
			web_ErrGroupNameInvalid [label = "ErrGroupNameInvalid, Variable";shape = box;];
			web_ErrGroupNameInvalid -> web_checkGroupName;
			web_ErrUserNotInGroup [label = "ErrUserNotInGroup, Variable";shape = box;];
			web_ErrUserNotInGroup -> web_getGroupByUserAndCourse;
			web_getGroupByUserAndCourse [label = "getGroupByUserAndCourse, Method";shape = box;];
			web_deleteGroup [label = "deleteGroup, Method";shape = box;];
			web_createGroup [label = "createGroup, Method";shape = box;];
			web_updateGroup [label = "updateGroup, Method";shape = box;];
			web_newGroup [label = "newGroup, Method";shape = box;];
			web_newGroup -> web_updateGroup;
			web_getGroupUsers [label = "getGroupUsers, Method";shape = box;];
			web_getGroupUsers -> web_updateGroup;
			web_getGroupUsers -> web_createGroup;
			web_regexpNonAuthorizedChars [label = "regexpNonAuthorizedChars, Variable";shape = box;];
			web_regexpNonAuthorizedChars -> web_checkGroupName;
			web_checkGroupName [label = "checkGroupName, Method";shape = box;];
			web_checkGroupName -> web_newGroup;
			web_checkGroupName -> web_createGroup;
			web_getCourseGroup [label = "getCourseGroup, Method";shape = box;];
			web_getCourseGroup -> web_deleteGroup;
			web_getCourseGroup -> web_updateGroup;
		}
		web_ErrGroupNameDuplicate -> web_TestBadGroupNames;
		web_ErrGroupNameTooLong -> web_TestBadGroupNames;
		web_ErrGroupNameInvalid -> web_TestBadGroupNames;
		web_getGroupByUserAndCourse -> web_GetGroup;
		web_deleteGroup -> web_DeleteGroup;
		web_createGroup -> web_CreateGroup;
		web_updateGroup -> web_UpdateGroup;
		subgraph cluster_groups_name_test_go {
			label = "groups_name_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestBadGroupNames [label = "TestBadGroupNames, Function";shape = box;];
		}
		subgraph cluster_groups_test_go {
			label = "groups_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestNewGroup [label = "TestNewGroup, Function";shape = box;];
			web_TestCreateGroupWithMissingFields [label = "TestCreateGroupWithMissingFields, Function";shape = box;];
			web_TestNewGroupTeacherCreator [label = "TestNewGroupTeacherCreator, Function";shape = box;];
			web_TestNewGroupStudentCreateGroupWithTeacher [label = "TestNewGroupStudentCreateGroupWithTeacher, Function";shape = box;];
			web_TestStudentCreateNewGroupTeacherUpdateGroup [label = "TestStudentCreateNewGroupTeacherUpdateGroup, Function";shape = box;];
			web_TestDeleteGroup [label = "TestDeleteGroup, Function";shape = box;];
			web_TestGetGroup [label = "TestGetGroup, Function";shape = box;];
			web_TestPatchGroupStatus [label = "TestPatchGroupStatus, Function";shape = box;];
			web_TestGetGroupByUserAndCourse [label = "TestGetGroupByUserAndCourse, Function";shape = box;];
			web_TestDeleteApprovedGroup [label = "TestDeleteApprovedGroup, Function";shape = box;];
			web_TestGetGroups [label = "TestGetGroups, Function";shape = box;];
		}
		subgraph cluster_quickfeed_helper_test_go {
			label = "quickfeed_helper_test.go";
			labelloc="t";
			rankdir=TB;
			web_Cookie [label = "Cookie, Function";shape = box;];
		}
		web_Cookie -> web_TestEnrollmentProcess;
		web_Cookie -> web_TestGetCourse;
		web_Cookie -> web_TestListCoursesWithEnrollment;
		web_Cookie -> web_TestListCoursesWithEnrollmentStatuses;
		web_Cookie -> web_TestPromoteDemoteRejectTeacher;
		web_Cookie -> web_TestGetCourseWithoutDockerfileDigest;
		web_Cookie -> web_TestUpdateCourseVisibility;
		web_Cookie -> web_TestGetCourses;
		web_Cookie -> web_TestNewGroupTeacherCreator;
		web_Cookie -> web_TestNewGroupStudentCreateGroupWithTeacher;
		web_Cookie -> web_TestStudentCreateNewGroupTeacherUpdateGroup;
		web_Cookie -> web_TestDeleteGroup;
		web_Cookie -> web_TestNewGroup;
		web_Cookie -> web_TestGetGroup;
		web_Cookie -> web_TestPatchGroupStatus;
		web_Cookie -> web_TestGetGroupByUserAndCourse;
		web_Cookie -> web_TestDeleteApprovedGroup;
		web_Cookie -> web_TestGetGroups;
		web_Cookie -> web_TestCreateGroupWithMissingFields;
		web_Cookie -> web_TestGetRepositories;
		web_Cookie -> web_TestGetSubmissionsByCourse;
		web_Cookie -> web_TestGetCourseLabSubmissions;
		web_Cookie -> web_TestApproveSubmission;
		web_Cookie -> web_TestCreateApproveList;
		web_Cookie -> web_TestReleaseApproveAll;
		web_Cookie -> web_TestUpdateUserFailures;
		subgraph cluster_quickfeed_mock_client_go {
			label = "quickfeed_mock_client.go";
			labelloc="t";
			rankdir=TB;
			web_MockClient [label = "MockClient, Function";shape = box;];
			web_MockClientWithOption [label = "MockClientWithOption, Function";shape = box;];
		}
		web_MockClient -> web_TestBadGroupNames;
		web_MockClient -> web_TestQuickFeedService_IsEmptyRepo;
		web_MockClient -> web_TestUpdateUser;
		web_MockClient -> web_TestGetUsers;
		web_MockClient -> web_TestGetEnrollmentsByCourse;
		web_MockClientWithOption -> web_TestEnrollmentProcess;
		web_MockClientWithOption -> web_TestGetCourse;
		web_MockClientWithOption -> web_TestListCoursesWithEnrollment;
		web_MockClientWithOption -> web_TestListCoursesWithEnrollmentStatuses;
		web_MockClientWithOption -> web_TestPromoteDemoteRejectTeacher;
		web_MockClientWithOption -> web_TestGetCourseWithoutDockerfileDigest;
		web_MockClientWithOption -> web_TestUpdateCourseVisibility;
		web_MockClientWithOption -> web_TestGetCourses;
		web_MockClientWithOption -> web_TestNewGroupStudentCreateGroupWithTeacher;
		web_MockClientWithOption -> web_TestStudentCreateNewGroupTeacherUpdateGroup;
		web_MockClientWithOption -> web_TestNewGroup;
		web_MockClientWithOption -> web_TestDeleteGroup;
		web_MockClientWithOption -> web_TestGetGroup;
		web_MockClientWithOption -> web_TestPatchGroupStatus;
		web_MockClientWithOption -> web_TestGetGroupByUserAndCourse;
		web_MockClientWithOption -> web_TestCreateGroupWithMissingFields;
		web_MockClientWithOption -> web_TestDeleteApprovedGroup;
		web_MockClientWithOption -> web_TestGetGroups;
		web_MockClientWithOption -> web_TestNewGroupTeacherCreator;
		web_MockClientWithOption -> web_TestGetRepositories;
		web_MockClientWithOption -> web_TestApproveSubmission;
		web_MockClientWithOption -> web_TestGetCourseLabSubmissions;
		web_MockClientWithOption -> web_TestCreateApproveList;
		web_MockClientWithOption -> web_TestReleaseApproveAll;
		web_MockClientWithOption -> web_TestGetSubmissionsByCourse;
		web_MockClientWithOption -> web_TestThirdPartyAppAuth;
		web_MockClientWithOption -> web_TestUpdateUserFailures;
		subgraph cluster_quickfeed_service_go {
			label = "quickfeed_service.go";
			labelloc="t";
			rankdir=TB;
			web_QuickFeedService [label = "QuickFeedService, Struct";shape = box;];
			web_QuickFeedService -> web_UpdateCourse;
			web_QuickFeedService -> web_GetCourse;
			web_QuickFeedService -> web_GetCourses;
			web_QuickFeedService -> web_UpdateCourseVisibility;
			web_QuickFeedService -> web_CreateEnrollment;
			web_QuickFeedService -> web_UpdateEnrollments;
			web_QuickFeedService -> web_GetEnrollments;
			web_QuickFeedService -> web_GetGroup;
			web_QuickFeedService -> web_GetGroupsByCourse;
			web_QuickFeedService -> web_CreateGroup;
			web_QuickFeedService -> web_UpdateGroup;
			web_QuickFeedService -> web_DeleteGroup;
			web_QuickFeedService -> web_GetSubmission;
			web_QuickFeedService -> web_;
			web_QuickFeedService -> web_NewQuickFeedService;
			web_QuickFeedService -> web_GetSubmissions;
			web_QuickFeedService -> web_GetSubmissionsByCourse;
			web_QuickFeedService -> web_UpdateSubmission;
			web_QuickFeedService -> web_RebuildSubmissions;
			web_QuickFeedService -> web_CreateBenchmark;
			web_QuickFeedService -> web_UpdateBenchmark;
			web_QuickFeedService -> web_DeleteBenchmark;
			web_QuickFeedService -> web_CreateCriterion;
			web_QuickFeedService -> web_UpdateCriterion;
			web_QuickFeedService -> web_DeleteCriterion;
			web_QuickFeedService -> web_CreateReview;
			web_QuickFeedService -> web_UpdateReview;
			web_QuickFeedService -> web_UpdateSubmissions;
			web_QuickFeedService -> web_GetAssignments;
			web_QuickFeedService -> web_UpdateAssignments;
			web_QuickFeedService -> web_GetOrganization;
			web_QuickFeedService -> web_GetUser;
			web_QuickFeedService -> web_GetRepositories;
			web_QuickFeedService -> web_IsEmptyRepo;
			web_QuickFeedService -> web_GetUsers;
			web_QuickFeedService -> web_UpdateUser;
			web_UnimplementedQuickFeedServiceHandler [label = "UnimplementedQuickFeedServiceHandler, Field";shape = box;];
			web_bh [label = "bh, Field";shape = box;];
			web_bh -> web_NewQuickFeedService;
			web_db [label = "db, Field";shape = box;];
			web_db -> web_GetCourse;
			web_db -> web_GetCourses;
			web_db -> web_UpdateCourseVisibility;
			web_db -> web_CreateEnrollment;
			web_db -> web_UpdateEnrollments;
			web_db -> web_GetEnrollments;
			web_db -> web_GetGroup;
			web_db -> web_GetGroupsByCourse;
			web_db -> web_UpdateGroup;
			web_db -> web_GetSubmission;
			web_db -> web_NewQuickFeedService;
			web_db -> web_UpdateBenchmark;
			web_db -> web_DeleteBenchmark;
			web_db -> web_CreateCriterion;
			web_db -> web_UpdateCriterion;
			web_db -> web_DeleteCriterion;
			web_db -> web_GetUser;
			web_db -> web_UpdateAssignments;
			web_db -> web_GetOrganization;
			web_db -> web_GetRepositories;
			web_db -> web_IsEmptyRepo;
			web_db -> web_GetUsers;
			web_db -> web_UpdateUser;
			web_logger [label = "logger, Field";shape = box;];
			web_logger -> web_GetCourse;
			web_logger -> web_GetCourses;
			web_logger -> web_UpdateCourseVisibility;
			web_logger -> web_CreateEnrollment;
			web_logger -> web_UpdateEnrollments;
			web_logger -> web_GetEnrollments;
			web_logger -> web_GetGroup;
			web_logger -> web_GetGroupsByCourse;
			web_logger -> web_CreateGroup;
			web_logger -> web_UpdateGroup;
			web_logger -> web_DeleteGroup;
			web_logger -> web_GetSubmission;
			web_logger -> web_GetSubmissions;
			web_logger -> web_GetSubmissionsByCourse;
			web_logger -> web_NewQuickFeedService;
			web_logger -> web_UpdateSubmission;
			web_logger -> web_RebuildSubmissions;
			web_logger -> web_CreateBenchmark;
			web_logger -> web_UpdateBenchmark;
			web_logger -> web_DeleteBenchmark;
			web_logger -> web_CreateCriterion;
			web_logger -> web_UpdateCriterion;
			web_logger -> web_DeleteCriterion;
			web_logger -> web_CreateReview;
			web_logger -> web_UpdateReview;
			web_logger -> web_UpdateSubmissions;
			web_logger -> web_GetAssignments;
			web_logger -> web_UpdateAssignments;
			web_logger -> web_GetUser;
			web_logger -> web_GetOrganization;
			web_logger -> web_GetRepositories;
			web_logger -> web_IsEmptyRepo;
			web_logger -> web_GetUsers;
			web_logger -> web_UpdateUser;
			web_logger -> web_UpdateCourse;
			web_runner [label = "runner, Field";shape = box;];
			web_runner -> web_NewQuickFeedService;
			web_runner -> web_UpdateAssignments;
			web_scmMgr [label = "scmMgr, Field";shape = box;];
			web_scmMgr -> web_NewQuickFeedService;
			web_streams [label = "streams, Field";shape = box;];
			web_streams -> web_NewQuickFeedService;
			web_streams -> web_SubmissionStream;
			web_NewQuickFeedService [label = "NewQuickFeedService, Function";shape = box;];
			web_GetUser [label = "GetUser, Method";shape = box;];
			web_GetUsers [label = "GetUsers, Method";shape = box;];
			web_UpdateUser [label = "UpdateUser, Method";shape = box;];
			web_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			web_GetCourse [label = "GetCourse, Method";shape = box;];
			web_GetCourses [label = "GetCourses, Method";shape = box;];
			web_UpdateCourseVisibility [label = "UpdateCourseVisibility, Method";shape = box;];
			web_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			web_UpdateEnrollments [label = "UpdateEnrollments, Method";shape = box;];
			web_GetEnrollments [label = "GetEnrollments, Method";shape = box;];
			web_GetGroup [label = "GetGroup, Method";shape = box;];
			web_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			web_CreateGroup [label = "CreateGroup, Method";shape = box;];
			web_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			web_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			web_GetSubmission [label = "GetSubmission, Method";shape = box;];
			web_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			web_GetSubmissionsByCourse [label = "GetSubmissionsByCourse, Method";shape = box;];
			web_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			web_RebuildSubmissions [label = "RebuildSubmissions, Method";shape = box;];
			web_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			web_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			web_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			web_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			web_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			web_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			web_CreateReview [label = "CreateReview, Method";shape = box;];
			web_UpdateReview [label = "UpdateReview, Method";shape = box;];
			web_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			web_GetAssignments [label = "GetAssignments, Method";shape = box;];
			web_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			web_GetOrganization [label = "GetOrganization, Method";shape = box;];
			web_GetRepositories [label = "GetRepositories, Method";shape = box;];
			web_IsEmptyRepo [label = "IsEmptyRepo, Method";shape = box;];
			web_SubmissionStream [label = "SubmissionStream, Method";shape = box;];
		}
		web_QuickFeedService -> web_courseStatus;
		web_QuickFeedService -> web_hasCourseAccess;
		web_QuickFeedService -> web_isTeacher;
		web_QuickFeedService -> web_updateReview;
		web_QuickFeedService -> web_;
		web_QuickFeedService -> web_getAssignments;
		web_QuickFeedService -> web_createBenchmark;
		web_QuickFeedService -> web_createReview;
		web_QuickFeedService -> web_enrollStudent;
		web_QuickFeedService -> web_enrollTeacher;
		web_QuickFeedService -> web_revokeTeacherStatus;
		web_QuickFeedService -> web_getSubmissions;
		web_QuickFeedService -> web_choose;
		web_QuickFeedService -> web_updateSubmission;
		web_QuickFeedService -> web_updateSubmissions;
		web_QuickFeedService -> web_updateCourse;
		web_QuickFeedService -> web_getEnrollmentsWithActivity;
		web_QuickFeedService -> web_updateEnrollment;
		web_QuickFeedService -> web_rejectEnrollment;
		web_QuickFeedService -> web_updateGroup;
		web_QuickFeedService -> web_newGroup;
		web_QuickFeedService -> web_getGroupUsers;
		web_QuickFeedService -> web_checkGroupName;
		web_QuickFeedService -> web_getGroupByUserAndCourse;
		web_QuickFeedService -> web_deleteGroup;
		web_QuickFeedService -> web_createGroup;
		web_QuickFeedService -> web_rebuildSubmissions;
		web_QuickFeedService -> web_rebuildSubmission;
		web_QuickFeedService -> web_getSCM;
		web_QuickFeedService -> web_NewQuickFeedHandler;
		web_bh -> web_RegisterRouter;
		web_db -> web_hasCourseAccess;
		web_db -> web_isCourseCreator;
		web_db -> web_getAssignmentWithCourse;
		web_db -> web_getAssignments;
		web_db -> web_createBenchmark;
		web_db -> web_createReview;
		web_db -> web_updateReview;
		web_db -> web_enrollStudent;
		web_db -> web_enrollTeacher;
		web_db -> web_revokeTeacherStatus;
		web_db -> web_getSubmissions;
		web_db -> web_getAllCourseSubmissions;
		web_db -> web_updateEnrollment;
		web_db -> web_updateSubmission;
		web_db -> web_updateSubmissions;
		web_db -> web_updateCourse;
		web_db -> web_getEnrollmentsWithActivity;
		web_db -> web_acceptRepositoryInvites;
		web_db -> web_rejectEnrollment;
		web_db -> web_updateGroup;
		web_db -> web_getGroupUsers;
		web_db -> web_checkGroupName;
		web_db -> web_getCourseGroup;
		web_db -> web_getGroupByUserAndCourse;
		web_db -> web_deleteGroup;
		web_db -> web_createGroup;
		web_db -> web_lookupName;
		web_db -> web_rebuildSubmission;
		web_db -> web_rebuildSubmissions;
		web_db -> web_getRepo;
		web_db -> web_getSCMForCourse;
		web_db -> web_updateUser;
		web_db -> web_NewQuickFeedHandler;
		web_db -> web_RegisterRouter;
		web_logger -> web_hasCourseAccess;
		web_logger -> web_enrollStudent;
		web_logger -> web_revokeTeacherStatus;
		web_logger -> web_updateEnrollment;
		web_logger -> web_rejectEnrollment;
		web_logger -> web_updateGroup;
		web_logger -> web_deleteGroup;
		web_logger -> web_createGroup;
		web_logger -> web_rebuildSubmissions;
		web_logger -> web_rebuildSubmission;
		web_logger -> web_getSCM;
		web_logger -> web_updateUser;
		web_logger -> web_NewQuickFeedHandler;
		web_logger -> web_RegisterRouter;
		web_runner -> web_rebuildSubmission;
		web_runner -> web_RegisterRouter;
		web_scmMgr -> web_getSCM;
		web_scmMgr -> web_RegisterRouter;
		web_streams -> web_rebuildSubmission;
		web_streams -> web_RegisterRouter;
		web_NewQuickFeedService -> web_MockClient;
		web_NewQuickFeedService -> web_MockClientWithOption;
		web_NewQuickFeedService -> web_TestRebuildSubmissions;
		web_NewQuickFeedService -> web_TestRegisterRouter;
		web_RebuildSubmissions -> web_TestRebuildSubmissions;
		subgraph cluster_rebuild_go {
			label = "rebuild.go";
			labelloc="t";
			rankdir=TB;
			web_maxContainers [label = "maxContainers, Constant";shape = box;];
			web_maxContainers -> web_rebuildSubmissions;
			web_rebuildSubmission [label = "rebuildSubmission, Method";shape = box;];
			web_rebuildSubmission -> web_rebuildSubmissions;
			web_rebuildSubmissions [label = "rebuildSubmissions, Method";shape = box;];
			web_lookupName [label = "lookupName, Method";shape = box;];
			web_lookupName -> web_rebuildSubmission;
		}
		web_rebuildSubmission -> web_RebuildSubmissions;
		web_rebuildSubmissions -> web_RebuildSubmissions;
		subgraph cluster_rebuild_test_go {
			label = "rebuild_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestSimulatedRebuildWorkPoolWithErrCount [label = "TestSimulatedRebuildWorkPoolWithErrCount, Function";shape = box;];
			web_prepareGitRepo [label = "prepareGitRepo, Function";shape = box;];
			web_prepareGitRepo -> web_TestRebuildSubmissions;
			web_TestRebuildSubmissions [label = "TestRebuildSubmissions, Function";shape = box;];
		}
		subgraph cluster_repositories_go {
			label = "repositories.go";
			labelloc="t";
			rankdir=TB;
			web_getRepo [label = "getRepo, Method";shape = box;];
			web_repoTypes [label = "repoTypes, Function";shape = box;];
		}
		web_getRepo -> web_rejectEnrollment;
		web_getRepo -> web_enrollStudent;
		web_getRepo -> web_updateGroup;
		web_getRepo -> web_deleteGroup;
		web_getRepo -> web_GetRepositories;
		web_getRepo -> web_rebuildSubmission;
		web_repoTypes -> web_GetRepositories;
		subgraph cluster_repositories_test_go {
			label = "repositories_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestGetRepositories [label = "TestGetRepositories, Function";shape = box;];
			web_TestQuickFeedService_IsEmptyRepo [label = "TestQuickFeedService_IsEmptyRepo, Function";shape = box;];
		}
		subgraph cluster_scm_helpers_go {
			label = "scm_helpers.go";
			labelloc="t";
			rankdir=TB;
			web_ErrContextCanceled [label = "ErrContextCanceled, Variable";shape = box;];
			web_getSCM [label = "getSCM, Method";shape = box;];
			web_getSCM -> web_getSCMForCourse;
			web_getSCMForCourse [label = "getSCMForCourse, Method";shape = box;];
			web_createRepo [label = "createRepo, Function";shape = box;];
			web_updateGroupMembers [label = "updateGroupMembers, Function";shape = box;];
			web_isEmpty [label = "isEmpty, Function";shape = box;];
			web_ctxErr [label = "ctxErr, Function";shape = box;];
			web_parseSCMError [label = "parseSCMError, Function";shape = box;];
		}
		web_getSCM -> web_UpdateAssignments;
		web_getSCM -> web_GetOrganization;
		web_getSCM -> web_IsEmptyRepo;
		web_getSCM -> web_UpdateCourse;
		web_getSCM -> web_rebuildSubmission;
		web_getSCMForCourse -> web_UpdateEnrollments;
		web_getSCMForCourse -> web_UpdateGroup;
		web_getSCMForCourse -> web_DeleteGroup;
		web_createRepo -> web_updateGroup;
		web_updateGroupMembers -> web_updateGroup;
		web_isEmpty -> web_IsEmptyRepo;
		web_ctxErr -> web_UpdateEnrollments;
		web_ctxErr -> web_UpdateGroup;
		web_ctxErr -> web_DeleteGroup;
		web_ctxErr -> web_GetOrganization;
		web_ctxErr -> web_IsEmptyRepo;
		web_ctxErr -> web_UpdateCourse;
		web_parseSCMError -> web_UpdateEnrollments;
		web_parseSCMError -> web_UpdateGroup;
		web_parseSCMError -> web_DeleteGroup;
		web_parseSCMError -> web_GetOrganization;
		web_parseSCMError -> web_UpdateCourse;
		subgraph cluster_server_go {
			label = "server.go";
			labelloc="t";
			rankdir=TB;
			web_metricsServerAddr [label = "metricsServerAddr, Constant";shape = box;];
			web_metricsServerAddr -> web_metricsServer;
			web_Server [label = "Server, Struct";shape = box;];
			web_Server -> web_NewDevelopmentServer;
			web_Server -> web_metricsServer;
			web_Server -> web_Serve;
			web_Server -> web_;
			web_Server -> web_ServerType;
			web_Server -> web_NewProductionServer;
			web_certFile [label = "certFile, Field";shape = box;];
			web_certFile -> web_NewDevelopmentServer;
			web_certFile -> web_Serve;
			web_httpServer [label = "httpServer, Field";shape = box;];
			web_httpServer -> web_NewDevelopmentServer;
			web_httpServer -> web_Serve;
			web_httpServer -> web_Shutdown;
			web_httpServer -> web_NewProductionServer;
			web_keyFile [label = "keyFile, Field";shape = box;];
			web_keyFile -> web_NewDevelopmentServer;
			web_keyFile -> web_Serve;
			web_metricsServer [label = "metricsServer, Field";shape = box;];
			web_metricsServer -> web_NewDevelopmentServer;
			web_metricsServer -> web_Serve;
			web_metricsServer -> web_Shutdown;
			web_metricsServer -> web_NewProductionServer;
			web_redirectServer [label = "redirectServer, Field";shape = box;];
			web_redirectServer -> web_Serve;
			web_redirectServer -> web_Shutdown;
			web_redirectServer -> web_NewProductionServer;
			web_ServerType [label = "ServerType, Function";shape = box;];
			web_NewProductionServer [label = "NewProductionServer, Function";shape = box;];
			web_NewDevelopmentServer [label = "NewDevelopmentServer, Function";shape = box;];
			web_metricsServer [label = "metricsServer, Function";shape = box;];
			web_metricsServer -> web_NewDevelopmentServer;
			web_metricsServer -> web_NewProductionServer;
			web_Serve [label = "Serve, Method";shape = box;];
			web_Shutdown [label = "Shutdown, Method";shape = box;];
		}
		subgraph cluster_submissions_internal_test_go {
			label = "submissions_internal_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestOrderSubmissions [label = "TestOrderSubmissions, Function";shape = box;];
		}
		subgraph cluster_submissions_test_go {
			label = "submissions_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestApproveSubmission [label = "TestApproveSubmission, Function";shape = box;];
			web_TestGetSubmissionsByCourse [label = "TestGetSubmissionsByCourse, Function";shape = box;];
			web_TestGetCourseLabSubmissions [label = "TestGetCourseLabSubmissions, Function";shape = box;];
			web_TestCreateApproveList [label = "TestCreateApproveList, Function";shape = box;];
			web_TestReleaseApproveAll [label = "TestReleaseApproveAll, Function";shape = box;];
			web_isApproved [label = "isApproved, Function";shape = box;];
			web_isApproved -> web_TestCreateApproveList;
		}
		subgraph cluster_thirdparty_auth_test_go {
			label = "thirdparty_auth_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestThirdPartyAppAuth [label = "TestThirdPartyAppAuth, Function";shape = box;];
			web_fillDatabase [label = "fillDatabase, Function";shape = box;];
			web_fillDatabase -> web_TestThirdPartyAppAuth;
			web_check [label = "check, Function";shape = box;];
			web_check -> web_TestThirdPartyAppAuth;
		}
		subgraph cluster_users_go {
			label = "users.go";
			labelloc="t";
			rankdir=TB;
			web_updateUser [label = "updateUser, Method";shape = box;];
		}
		web_updateUser -> web_UpdateUser;
		subgraph cluster_users_test_go {
			label = "users_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestGetUsers [label = "TestGetUsers, Function";shape = box;];
			web_TestGetEnrollmentsByCourse [label = "TestGetEnrollmentsByCourse, Function";shape = box;];
			web_TestUpdateUser [label = "TestUpdateUser, Function";shape = box;];
			web_TestUpdateUserFailures [label = "TestUpdateUserFailures, Function";shape = box;];
		}
		subgraph cluster_webserver_go {
			label = "webserver.go";
			labelloc="t";
			rankdir=TB;
			web_streamTimeout [label = "streamTimeout, Constant";shape = box;];
			web_streamTimeout -> web_RegisterRouter;
			web_NewQuickFeedHandler [label = "NewQuickFeedHandler, Method";shape = box;];
			web_NewQuickFeedHandler -> web_RegisterRouter;
			web_RegisterRouter [label = "RegisterRouter, Method";shape = box;];
			web_controller [label = "controller, Function";shape = box;];
			web_controller -> web_RegisterRouter;
		}
		web_RegisterRouter -> web_TestRegisterRouter;
		subgraph cluster_webserver_test_go {
			label = "webserver_test.go";
			labelloc="t";
			rankdir=TB;
			web_TestRegisterRouter [label = "TestRegisterRouter, Function";shape = box;];
			web_createTempPublicDir [label = "createTempPublicDir, Function";shape = box;];
			web_createTempPublicDir -> web_TestRegisterRouter;
		}
	}
	subgraph cluster_interceptor {
		label = "interceptor (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_access_control_go {
			label = "access_control.go";
			labelloc="t";
			rankdir=TB;
			interceptor_role [label = "role, Class";shape = box;];
			interceptor_role -> interceptor_;
			interceptor_role -> interceptor_IDFor;
			interceptor_roles [label = "roles, Class";shape = box;];
			interceptor_roles -> interceptor_IDFor;
			interceptor_requestID [label = "requestID, Interface";shape = box;];
			interceptor_requestID -> interceptor_WrapUnary;
			interceptor_IDFor [label = "IDFor, Method";shape = box;];
			interceptor_IDFor -> interceptor_WrapUnary;
			interceptor_none [label = "none, Constant";shape = box;];
			interceptor_none -> interceptor_WrapUnary;
			interceptor_none -> interceptor_IDFor;
			interceptor_user [label = "user, Constant";shape = box;];
			interceptor_user -> interceptor_WrapUnary;
			interceptor_user -> interceptor_IDFor;
			interceptor_group [label = "group, Constant";shape = box;];
			interceptor_group -> interceptor_WrapUnary;
			interceptor_group -> interceptor_IDFor;
			interceptor_student [label = "student, Constant";shape = box;];
			interceptor_student -> interceptor_WrapUnary;
			interceptor_student -> interceptor_IDFor;
			interceptor_teacher [label = "teacher, Constant";shape = box;];
			interceptor_teacher -> interceptor_WrapUnary;
			interceptor_teacher -> interceptor_IDFor;
			interceptor_admin [label = "admin, Constant";shape = box;];
			interceptor_admin -> interceptor_WrapUnary;
			interceptor_admin -> interceptor_IDFor;
			interceptor_accessRolesFor [label = "accessRolesFor, Variable";shape = box;];
			interceptor_accessRolesFor -> interceptor_WrapUnary;
			interceptor_AccessControlInterceptor [label = "AccessControlInterceptor, Struct";shape = box;];
			interceptor_AccessControlInterceptor -> interceptor_IDFor;
			interceptor_AccessControlInterceptor -> interceptor_NewAccessControlInterceptor;
			interceptor_AccessControlInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_AccessControlInterceptor -> interceptor_WrapStreamingClient;
			interceptor_tokenManager [label = "tokenManager, Field";shape = box;];
			interceptor_tokenManager -> interceptor_WrapUnary;
			interceptor_tokenManager -> interceptor_NewAccessControlInterceptor;
			interceptor_NewAccessControlInterceptor [label = "NewAccessControlInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
		}
		interceptor_requestID -> interceptor_;
		interceptor_IDFor -> interceptor_isValidSubmission;
		interceptor_accessRolesFor -> interceptor_checkAccessControlMethods;
		interceptor_accessRolesFor -> interceptor_has;
		interceptor_NewAccessControlInterceptor -> interceptor_TestAccessControl;
		subgraph cluster_access_control_methods_test_go {
			label = "access_control_methods_test.go";
			labelloc="t";
			rankdir=TB;
			interceptor_TestAccessControlQuickFeedServiceMethods [label = "TestAccessControlQuickFeedServiceMethods, Function";shape = box;];
			interceptor_TestAccessControlMethodsChecker [label = "TestAccessControlMethodsChecker, Function";shape = box;];
			interceptor_has [label = "has, Function";shape = box;];
			interceptor_has -> interceptor_checkAccessControlMethods;
			interceptor_checkAccessControlMethods [label = "checkAccessControlMethods, Function";shape = box;];
			interceptor_checkAccessControlMethods -> interceptor_TestAccessControlQuickFeedServiceMethods;
			interceptor_checkAccessControlMethods -> interceptor_TestAccessControlMethodsChecker;
		}
		subgraph cluster_access_control_test_go {
			label = "access_control_test.go";
			labelloc="t";
			rankdir=TB;
			interceptor_accessTest [label = "accessTest, Struct";shape = box;];
			interceptor_accessTest -> interceptor_TestAccessControl;
			interceptor_cookie [label = "cookie, Field";shape = box;];
			interceptor_cookie -> interceptor_TestAccessControl;
			interceptor_courseID [label = "courseID, Field";shape = box;];
			interceptor_courseID -> interceptor_TestAccessControl;
			interceptor_groupID [label = "groupID, Field";shape = box;];
			interceptor_groupID -> interceptor_TestAccessControl;
			interceptor_userID [label = "userID, Field";shape = box;];
			interceptor_userID -> interceptor_TestAccessControl;
			interceptor_wantAccess [label = "wantAccess, Field";shape = box;];
			interceptor_wantAccess -> interceptor_TestAccessControl;
			interceptor_wantCode [label = "wantCode, Field";shape = box;];
			interceptor_wantCode -> interceptor_TestAccessControl;
			interceptor_TestAccessControl [label = "TestAccessControl, Function";shape = box;];
			interceptor_checkAccess [label = "checkAccess, Function";shape = box;];
			interceptor_checkAccess -> interceptor_TestAccessControl;
		}
		subgraph cluster_metrics_go {
			label = "metrics.go";
			labelloc="t";
			rankdir=TB;
			interceptor_RPCMetricsCollectors [label = "RPCMetricsCollectors, Function";shape = box;];
			interceptor_responseTimeGauge [label = "responseTimeGauge, Variable";shape = box;];
			interceptor_responseTimeGauge -> interceptor_RPCMetricsCollectors;
			interceptor_responseTimeGauge -> interceptor_metricsTimer;
			interceptor_accessedMethodsCounter [label = "accessedMethodsCounter, Variable";shape = box;];
			interceptor_accessedMethodsCounter -> interceptor_RPCMetricsCollectors;
			interceptor_accessedMethodsCounter -> interceptor_WrapStreamingHandler;
			interceptor_accessedMethodsCounter -> interceptor_WrapUnary;
			interceptor_respondedMethodsCounter [label = "respondedMethodsCounter, Variable";shape = box;];
			interceptor_respondedMethodsCounter -> interceptor_RPCMetricsCollectors;
			interceptor_respondedMethodsCounter -> interceptor_WrapUnary;
			interceptor_failedMethodsCounter [label = "failedMethodsCounter, Variable";shape = box;];
			interceptor_failedMethodsCounter -> interceptor_RPCMetricsCollectors;
			interceptor_failedMethodsCounter -> interceptor_WrapStreamingHandler;
			interceptor_failedMethodsCounter -> interceptor_WrapUnary;
			interceptor_loginCounter [label = "loginCounter, Variable";shape = box;];
			interceptor_loginCounter -> interceptor_RPCMetricsCollectors;
			interceptor_loginCounter -> interceptor_WrapUnary;
			interceptor_MetricsInterceptor [label = "MetricsInterceptor, Struct";shape = box;];
			interceptor_MetricsInterceptor -> interceptor_RPCMetricsCollectors;
			interceptor_MetricsInterceptor -> interceptor_NewMetricsInterceptor;
			interceptor_MetricsInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_MetricsInterceptor -> interceptor_WrapStreamingClient;
			interceptor_NewMetricsInterceptor [label = "NewMetricsInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
			interceptor_metricsTimer [label = "metricsTimer, Function";shape = box;];
			interceptor_metricsTimer -> interceptor_WrapStreamingHandler;
			interceptor_metricsTimer -> interceptor_WrapUnary;
		}
		subgraph cluster_req_validation_go {
			label = "req_validation.go";
			labelloc="t";
			rankdir=TB;
			interceptor_MaxWait [label = "MaxWait, Constant";shape = box;];
			interceptor_validator [label = "validator, Interface";shape = box;];
			interceptor_validator -> interceptor_validate;
			interceptor_IsValid [label = "IsValid, Method";shape = box;];
			interceptor_IsValid -> interceptor_validate;
			interceptor_idCleaner [label = "idCleaner, Interface";shape = box;];
			interceptor_idCleaner -> interceptor_clean;
			interceptor_RemoveRemoteID [label = "RemoveRemoteID, Method";shape = box;];
			interceptor_RemoveRemoteID -> interceptor_clean;
			interceptor_ValidationInterceptor [label = "ValidationInterceptor, Struct";shape = box;];
			interceptor_ValidationInterceptor -> interceptor_RemoveRemoteID;
			interceptor_ValidationInterceptor -> interceptor_NewValidationInterceptor;
			interceptor_ValidationInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_ValidationInterceptor -> interceptor_WrapStreamingClient;
			interceptor_logger [label = "logger, Field";shape = box;];
			interceptor_logger -> interceptor_NewValidationInterceptor;
			interceptor_logger -> interceptor_WrapUnary;
			interceptor_NewValidationInterceptor [label = "NewValidationInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
			interceptor_validate [label = "validate, Function";shape = box;];
			interceptor_validate -> interceptor_WrapUnary;
			interceptor_clean [label = "clean, Function";shape = box;];
			interceptor_clean -> interceptor_WrapUnary;
		}
		interceptor_validator -> interceptor_TestImplementsValidation;
		interceptor_idCleaner -> interceptor_TestImplementsValidation;
		subgraph cluster_token_auth_go {
			label = "token_auth.go";
			labelloc="t";
			rankdir=TB;
			interceptor_tokenHeader [label = "tokenHeader, Constant";shape = box;];
			interceptor_tokenHeader -> interceptor_WrapStreamingHandler;
			interceptor_tokenHeader -> interceptor_WrapUnary;
			interceptor_TokenAuthInterceptor [label = "TokenAuthInterceptor, Struct";shape = box;];
			interceptor_TokenAuthInterceptor -> interceptor_update;
			interceptor_TokenAuthInterceptor -> interceptor_;
			interceptor_TokenAuthInterceptor -> interceptor_NewTokenAuthInterceptor;
			interceptor_TokenAuthInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_TokenAuthInterceptor -> interceptor_WrapStreamingClient;
			interceptor_TokenAuthInterceptor -> interceptor_WrapUnary;
			interceptor_TokenAuthInterceptor -> interceptor_lookup;
			interceptor_db [label = "db, Field";shape = box;];
			interceptor_db -> interceptor_lookupToken;
			interceptor_db -> interceptor_NewTokenAuthInterceptor;
			interceptor_logger [label = "logger, Field";shape = box;];
			interceptor_logger -> interceptor_lookupToken;
			interceptor_logger -> interceptor_NewTokenAuthInterceptor;
			interceptor_mu [label = "mu, Field";shape = box;];
			interceptor_mu -> interceptor_lookup;
			interceptor_mu -> interceptor_update;
			interceptor_tm [label = "tm, Field";shape = box;];
			interceptor_tm -> interceptor_lookupToken;
			interceptor_tm -> interceptor_NewTokenAuthInterceptor;
			interceptor_tokenMap [label = "tokenMap, Field";shape = box;];
			interceptor_tokenMap -> interceptor_NewTokenAuthInterceptor;
			interceptor_tokenMap -> interceptor_lookup;
			interceptor_tokenMap -> interceptor_update;
			interceptor_NewTokenAuthInterceptor [label = "NewTokenAuthInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
			interceptor_lookup [label = "lookup, Method";shape = box;];
			interceptor_lookup -> interceptor_lookupToken;
			interceptor_update [label = "update, Method";shape = box;];
			interceptor_update -> interceptor_lookupToken;
			interceptor_update -> interceptor_WrapStreamingHandler;
			interceptor_update -> interceptor_WrapUnary;
			interceptor_lookupToken [label = "lookupToken, Method";shape = box;];
			interceptor_lookupToken -> interceptor_WrapStreamingHandler;
			interceptor_lookupToken -> interceptor_WrapUnary;
		}
		interceptor_tokenHeader -> interceptor_NewTokenAuthClientInterceptor;
		subgraph cluster_token_auth_client_interceptor_go {
			label = "token_auth_client_interceptor.go";
			labelloc="t";
			rankdir=TB;
			interceptor_NewTokenAuthClientInterceptor [label = "NewTokenAuthClientInterceptor, Function";shape = box;];
		}
		subgraph cluster_tokens_go {
			label = "tokens.go";
			labelloc="t";
			rankdir=TB;
			interceptor_userIDs [label = "userIDs, Interface";shape = box;];
			interceptor_userIDs -> interceptor_GetGroupID;
			interceptor_userIDs -> interceptor_WrapUnary;
			interceptor_UserIDs [label = "UserIDs, Method";shape = box;];
			interceptor_UserIDs -> interceptor_GetGroupID;
			interceptor_isGroup [label = "isGroup, Interface";shape = box;];
			interceptor_isGroup -> interceptor_GetGroupID;
			interceptor_GetGroupID [label = "GetGroupID, Method";shape = box;];
			interceptor_GetGroupID -> interceptor_GetGroupID;
			interceptor_defaultTokenUpdater [label = "defaultTokenUpdater, Variable";shape = box;];
			interceptor_defaultTokenUpdater -> interceptor_GetGroupID;
			interceptor_tokenUpdateMethods [label = "tokenUpdateMethods, Variable";shape = box;];
			interceptor_tokenUpdateMethods -> interceptor_WrapUnary;
			interceptor_TokenInterceptor [label = "TokenInterceptor, Struct";shape = box;];
			interceptor_TokenInterceptor -> interceptor_GetGroupID;
			interceptor_TokenInterceptor -> interceptor_NewTokenInterceptor;
			interceptor_TokenInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_TokenInterceptor -> interceptor_WrapStreamingClient;
			interceptor_tokenManager [label = "tokenManager, Field";shape = box;];
			interceptor_tokenManager -> interceptor_NewTokenInterceptor;
			interceptor_tokenManager -> interceptor_WrapUnary;
			interceptor_NewTokenInterceptor [label = "NewTokenInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
		}
		interceptor_NewTokenInterceptor -> interceptor_TestRefreshTokens;
		subgraph cluster_tokens_test_go {
			label = "tokens_test.go";
			labelloc="t";
			rankdir=TB;
			interceptor_TestRefreshTokens [label = "TestRefreshTokens, Function";shape = box;];
			interceptor_updateRequired [label = "updateRequired, Function";shape = box;];
			interceptor_updateRequired -> interceptor_TestRefreshTokens;
		}
		subgraph cluster_user_auth_go {
			label = "user_auth.go";
			labelloc="t";
			rankdir=TB;
			interceptor_UserInterceptor [label = "UserInterceptor, Struct";shape = box;];
			interceptor_UserInterceptor -> interceptor_;
			interceptor_UserInterceptor -> interceptor_NewUserInterceptor;
			interceptor_UserInterceptor -> interceptor_WrapStreamingHandler;
			interceptor_UserInterceptor -> interceptor_WrapStreamingClient;
			interceptor_UserInterceptor -> interceptor_WrapUnary;
			interceptor_logger [label = "logger, Field";shape = box;];
			interceptor_logger -> interceptor_NewUserInterceptor;
			interceptor_tm [label = "tm, Field";shape = box;];
			interceptor_tm -> interceptor_NewUserInterceptor;
			interceptor_tm -> interceptor_processHeader;
			interceptor_NewUserInterceptor [label = "NewUserInterceptor, Function";shape = box;];
			interceptor_WrapStreamingHandler [label = "WrapStreamingHandler, Method";shape = box;];
			interceptor_WrapStreamingClient [label = "WrapStreamingClient, Method";shape = box;];
			interceptor_WrapUnary [label = "WrapUnary, Method";shape = box;];
			interceptor_processHeader [label = "processHeader, Method";shape = box;];
			interceptor_processHeader -> interceptor_WrapStreamingHandler;
			interceptor_processHeader -> interceptor_WrapUnary;
		}
		interceptor_NewUserInterceptor -> interceptor_TestAccessControl;
		interceptor_NewUserInterceptor -> interceptor_TestRefreshTokens;
		interceptor_NewUserInterceptor -> interceptor_TestUserVerifier;
		subgraph cluster_user_auth_test_go {
			label = "user_auth_test.go";
			labelloc="t";
			rankdir=TB;
			interceptor_TestUserVerifier [label = "TestUserVerifier, Function";shape = box;];
		}
		subgraph cluster_util_go {
			label = "util.go";
			labelloc="t";
			rankdir=TB;
			interceptor_isValidSubmission [label = "isValidSubmission, Function";shape = box;];
		}
		interceptor_isValidSubmission -> interceptor_WrapUnary;
		subgraph cluster_validation_test_go {
			label = "validation_test.go";
			labelloc="t";
			rankdir=TB;
			interceptor_TestImplementsValidation [label = "TestImplementsValidation, Function";shape = box;];
		}
	}
	subgraph cluster_manifest {
		label = "manifest (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_manifest_go {
			label = "manifest.go";
			labelloc="t";
			rankdir=TB;
			manifest_appID [label = "appID, Constant";shape = box;];
			manifest_appID -> manifest_conversion;
			manifest_appKey [label = "appKey, Constant";shape = box;];
			manifest_appKey -> manifest_conversion;
			manifest_clientID [label = "clientID, Constant";shape = box;];
			manifest_clientID -> manifest_conversion;
			manifest_clientSecret [label = "clientSecret, Constant";shape = box;];
			manifest_clientSecret -> manifest_conversion;
			manifest_webhookSecret [label = "webhookSecret, Constant";shape = box;];
			manifest_webhookSecret -> manifest_conversion;
			manifest_ReadyForAppCreation [label = "ReadyForAppCreation, Function";shape = box;];
			manifest_CreateNewQuickFeedApp [label = "CreateNewQuickFeedApp, Function";shape = box;];
			manifest_Manifest [label = "Manifest, Struct";shape = box;];
			manifest_Manifest -> manifest_StartAppCreationFlow;
			manifest_Manifest -> manifest_conversion;
			manifest_Manifest -> manifest_createApp;
			manifest_Manifest -> manifest_CreateNewQuickFeedApp;
			manifest_Manifest -> manifest_New;
			manifest_Manifest -> manifest_Handler;
			manifest_client [label = "client, Field";shape = box;];
			manifest_client -> manifest_conversion;
			manifest_client -> manifest_New;
			manifest_domain [label = "domain, Field";shape = box;];
			manifest_domain -> manifest_createApp;
			manifest_domain -> manifest_New;
			manifest_done [label = "done, Field";shape = box;];
			manifest_done -> manifest_StartAppCreationFlow;
			manifest_done -> manifest_conversion;
			manifest_done -> manifest_createApp;
			manifest_done -> manifest_New;
			manifest_envFile [label = "envFile, Field";shape = box;];
			manifest_envFile -> manifest_StartAppCreationFlow;
			manifest_envFile -> manifest_conversion;
			manifest_envFile -> manifest_success;
			manifest_envFile -> manifest_New;
			manifest_handler [label = "handler, Field";shape = box;];
			manifest_handler -> manifest_New;
			manifest_handler -> manifest_Handler;
			manifest_runWebpack [label = "runWebpack, Field";shape = box;];
			manifest_runWebpack -> manifest_success;
			manifest_runWebpack -> manifest_New;
			manifest_New [label = "New, Function";shape = box;];
			manifest_New -> manifest_CreateNewQuickFeedApp;
			manifest_Handler [label = "Handler, Method";shape = box;];
			manifest_Handler -> manifest_CreateNewQuickFeedApp;
			manifest_StartAppCreationFlow [label = "StartAppCreationFlow, Method";shape = box;];
			manifest_StartAppCreationFlow -> manifest_CreateNewQuickFeedApp;
			manifest_conversion [label = "conversion, Method";shape = box;];
			manifest_conversion -> manifest_New;
			manifest_createApp [label = "createApp, Method";shape = box;];
			manifest_createApp -> manifest_New;
			manifest_success [label = "success, Method";shape = box;];
			manifest_success -> manifest_conversion;
			manifest_runWebpack [label = "runWebpack, Function";shape = box;];
			manifest_runWebpack -> manifest_success;
			manifest_runNpmCi [label = "runNpmCi, Function";shape = box;];
			manifest_runNpmCi -> manifest_runWebpack;
			manifest_form [label = "form, Function";shape = box;];
			manifest_form -> manifest_createApp;
		}
		manifest_ReadyForAppCreation -> manifest_TestCreateQuickFeedApp;
		manifest_CreateNewQuickFeedApp -> manifest_TestCreateQuickFeedApp;
		manifest_Manifest -> manifest_TestConversion;
		manifest_client -> manifest_TestConversion;
		manifest_domain -> manifest_TestConversion;
		manifest_done -> manifest_TestConversion;
		manifest_envFile -> manifest_TestConversion;
		manifest_runWebpack -> manifest_TestConversion;
		manifest_conversion -> manifest_TestConversion;
		manifest_form -> manifest_TestForm;
		subgraph cluster_manifest_internal_test_go {
			label = "manifest_internal_test.go";
			labelloc="t";
			rankdir=TB;
			manifest_TestForm [label = "TestForm, Function";shape = box;];
			manifest_TestConversion [label = "TestConversion, Function";shape = box;];
		}
		subgraph cluster_manifest_test_go {
			label = "manifest_test.go";
			labelloc="t";
			rankdir=TB;
			manifest_TestCreateQuickFeedApp [label = "TestCreateQuickFeedApp, Function";shape = box;];
		}
	}
	subgraph cluster_stream {
		label = "stream (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_service_go {
			label = "service.go";
			labelloc="t";
			rankdir=TB;
			stream_StreamServices [label = "StreamServices, Struct";shape = box;];
			stream_StreamServices -> stream_;
			stream_StreamServices -> stream_NewStreamServices;
			stream_Submission [label = "Submission, Field";shape = box;];
			stream_Submission -> stream_NewStreamServices;
			stream_NewStreamServices [label = "NewStreamServices, Function";shape = box;];
			stream_ID [label = "ID, Interface";shape = box;];
			stream_ID -> stream_NewStreamServices;
			stream_Service [label = "Service, Struct";shape = box;];
			stream_Service -> stream_;
			stream_Service -> stream_NewStreamServices;
			stream_Service -> stream_NewService;
			stream_mu [label = "mu, Field";shape = box;];
			stream_mu -> stream_NewService;
			stream_streams [label = "streams, Field";shape = box;];
			stream_streams -> stream_NewService;
			stream_NewService [label = "NewService, Function";shape = box;];
			stream_NewService -> stream_NewStreamServices;
		}
		stream_NewService -> stream_TestStream;
		stream_NewService -> stream_TestStreamClose;
		subgraph cluster_stream_go {
			label = "stream.go";
			labelloc="t";
			rankdir=TB;
			stream_StreamInterface [label = "StreamInterface, Interface";shape = box;];
			stream_Close [label = "Close, Method";shape = box;];
			stream_Close -> stream_Run;
			stream_Run [label = "Run, Method";shape = box;];
			stream_Send [label = "Send, Method";shape = box;];
			stream_Stream [label = "Stream, Struct";shape = box;];
			stream_Stream -> stream_Close;
			stream_Stream -> stream_NewStream;
			stream_Stream -> stream_Run;
			stream_ch [label = "ch, Field";shape = box;];
			stream_ch -> stream_NewStream;
			stream_ch -> stream_Close;
			stream_ch -> stream_Run;
			stream_ch -> stream_Send;
			stream_closed [label = "closed, Field";shape = box;];
			stream_closed -> stream_Close;
			stream_closed -> stream_Send;
			stream_ctx [label = "ctx, Field";shape = box;];
			stream_ctx -> stream_NewStream;
			stream_ctx -> stream_Run;
			stream_mu [label = "mu, Field";shape = box;];
			stream_mu -> stream_Close;
			stream_mu -> stream_Send;
			stream_stream [label = "stream, Field";shape = box;];
			stream_stream -> stream_NewStream;
			stream_stream -> stream_Run;
			stream_NewStream [label = "NewStream, Function";shape = box;];
			stream_Close [label = "Close, Method";shape = box;];
			stream_Close -> stream_Run;
			stream_Run [label = "Run, Method";shape = box;];
			stream_Send [label = "Send, Method";shape = box;];
		}
		stream_StreamInterface -> stream_NewStreamServices;
		stream_StreamInterface -> stream_NewService;
		stream_Close -> stream_NewService;
		stream_Close -> stream_TestStreamClose;
		stream_Run -> stream_TestStream;
		stream_Run -> stream_TestStreamClose;
		stream_Send -> stream_NewService;
		stream_Send -> stream_TestStreamClose;
		subgraph cluster_stream_test_go {
			label = "stream_test.go";
			labelloc="t";
			rankdir=TB;
			stream_Data [label = "Data, Struct";shape = box;];
			stream_Data -> stream_;
			stream_Data -> stream_TestStream;
			stream_Data -> stream_TestStreamClose;
			stream_Msg [label = "Msg, Field";shape = box;];
			stream_Msg -> stream_;
			stream_Msg -> stream_TestStream;
			stream_messages [label = "messages, Variable";shape = box;];
			stream_messages -> stream_TestStream;
			stream_messages -> stream_TestStreamClose;
			stream_TestStream [label = "TestStream, Function";shape = box;];
			stream_TestStreamClose [label = "TestStreamClose, Function";shape = box;];
		}
	}
	subgraph cluster_auth {
		label = "auth (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_auth_go {
			label = "auth.go";
			labelloc="t";
			rankdir=TB;
			auth_httpClient [label = "httpClient, Variable";shape = box;];
			auth_httpClient -> auth_FetchExternalUser;
			auth_authenticationError [label = "authenticationError, Function";shape = box;];
			auth_authenticationError -> auth_OAuth2Login;
			auth_authenticationError -> auth_OAuth2Callback;
			auth_OAuth2Logout [label = "OAuth2Logout, Function";shape = box;];
			auth_OAuth2Login [label = "OAuth2Login, Function";shape = box;];
			auth_OAuth2Callback [label = "OAuth2Callback, Function";shape = box;];
			auth_extractAccessToken [label = "extractAccessToken, Function";shape = box;];
			auth_extractAccessToken -> auth_OAuth2Callback;
			auth_FetchExternalUser [label = "FetchExternalUser, Function";shape = box;];
			auth_FetchExternalUser -> auth_OAuth2Callback;
			auth_fetchUser [label = "fetchUser, Function";shape = box;];
			auth_fetchUser -> auth_OAuth2Callback;
		}
		auth_OAuth2Logout -> auth_TestOAuth2Logout;
		auth_OAuth2Login -> auth_TestOAuth2Login;
		auth_OAuth2Login -> auth_TestOAuth2LoginRedirect;
		auth_OAuth2Callback -> auth_TestOAuth2CallbackUserExchange;
		auth_OAuth2Callback -> auth_TestOAuth2CallbackTokenExchange;
		auth_OAuth2Callback -> auth_TestOAuth2CallbackBadRequest;
		auth_OAuth2Callback -> auth_TestOAuth2Callback;
		subgraph cluster_auth_test_go {
			label = "auth_test.go";
			labelloc="t";
			rankdir=TB;
			auth_testSecret [label = "testSecret, Constant";shape = box;];
			auth_testSecret -> auth_TestOAuth2CallbackUserExchange;
			auth_testSecret -> auth_TestOAuth2CallbackTokenExchange;
			auth_testSecret -> auth_TestOAuth2CallbackBadRequest;
			auth_testSecret -> auth_TestOAuth2Callback;
			auth_user [label = "user, Constant";shape = box;];
			auth_user -> auth_TestOAuth2CallbackUserExchange;
			auth_user -> auth_TestOAuth2Callback;
			auth_authGithub [label = "authGithub, Constant";shape = box;];
			auth_authGithub -> auth_TestOAuth2LoginRedirect;
			auth_callbackGithub [label = "callbackGithub, Constant";shape = box;];
			auth_callbackGithub -> auth_TestOAuth2CallbackUserExchange;
			auth_callbackGithub -> auth_TestOAuth2CallbackTokenExchange;
			auth_callbackGithub -> auth_TestOAuth2CallbackBadRequest;
			auth_callbackGithub -> auth_TestOAuth2Callback;
			auth_loginToken [label = "loginToken, Constant";shape = box;];
			auth_loginToken -> auth_TestOAuth2CallbackUserExchange;
			auth_loginToken -> auth_TestOAuth2CallbackTokenExchange;
			auth_loginToken -> auth_TestOAuth2Callback;
			auth_TestOAuth2Login [label = "TestOAuth2Login, Function";shape = box;];
			auth_TestOAuth2LoginRedirect [label = "TestOAuth2LoginRedirect, Function";shape = box;];
			auth_TestOAuth2Callback [label = "TestOAuth2Callback, Function";shape = box;];
			auth_TestOAuth2CallbackUserExchange [label = "TestOAuth2CallbackUserExchange, Function";shape = box;];
			auth_TestOAuth2CallbackTokenExchange [label = "TestOAuth2CallbackTokenExchange, Function";shape = box;];
			auth_TestOAuth2CallbackBadRequest [label = "TestOAuth2CallbackBadRequest, Function";shape = box;];
			auth_TestOAuth2Logout [label = "TestOAuth2Logout, Function";shape = box;];
			auth_checkNoUsersInDB [label = "checkNoUsersInDB, Function";shape = box;];
			auth_checkNoUsersInDB -> auth_TestOAuth2CallbackUserExchange;
			auth_checkNoUsersInDB -> auth_TestOAuth2CallbackTokenExchange;
			auth_checkNoUsersInDB -> auth_TestOAuth2CallbackBadRequest;
		}
		subgraph cluster_consts_go {
			label = "consts.go";
			labelloc="t";
			rankdir=TB;
			auth_contextKey [label = "contextKey, Class";shape = box;];
			auth_contextKey -> auth_;
			auth_contextNone [label = "contextNone, Constant";shape = box;];
			auth_ContextKeyClaims [label = "ContextKeyClaims, Constant";shape = box;];
			auth_Cookie [label = "Cookie, Constant";shape = box;];
			auth_CookieName [label = "CookieName, Constant";shape = box;];
			auth_SetCookie [label = "SetCookie, Constant";shape = box;];
			auth_tokenExpirationTime [label = "tokenExpirationTime, Constant";shape = box;];
			auth_cookieExpirationTime [label = "cookieExpirationTime, Constant";shape = box;];
			auth_alg [label = "alg, Constant";shape = box;];
			auth_githubUserAPI [label = "githubUserAPI, Constant";shape = box;];
			auth_Auth [label = "Auth, Constant";shape = box;];
			auth_Teacher [label = "Teacher, Constant";shape = box;];
			auth_Callback [label = "Callback, Constant";shape = box;];
			auth_Logout [label = "Logout, Constant";shape = box;];
			auth_Hook [label = "Hook, Constant";shape = box;];
			auth_Assets [label = "Assets, Constant";shape = box;];
			auth_Static [label = "Static, Constant";shape = box;];
		}
		auth_ContextKeyClaims -> auth_Context;
		auth_ContextKeyClaims -> auth_ClaimsFromContext;
		auth_CookieName -> auth_OAuth2Logout;
		auth_CookieName -> auth_TestOAuth2Logout;
		auth_CookieName -> auth_TestOAuth2Login;
		auth_CookieName -> auth_extractToken;
		auth_CookieName -> auth_NewAuthCookie;
		auth_CookieName -> auth_TestNewCookie;
		auth_SetCookie -> auth_TestOAuth2Callback;
		auth_SetCookie -> auth_TestOAuth2CallbackUserExchange;
		auth_SetCookie -> auth_TestOAuth2CallbackTokenExchange;
		auth_tokenExpirationTime -> auth_newClaims;
		auth_cookieExpirationTime -> auth_NewAuthCookie;
		auth_alg -> auth_GetClaims;
		auth_githubUserAPI -> auth_FetchExternalUser;
		auth_Auth -> auth_TestOAuth2Login;
		auth_Callback -> auth_GetCallbackURL;
		auth_Logout -> auth_TestOAuth2Logout;
		auth_Hook -> auth_GetEventsURL;
		subgraph cluster_github_go {
			label = "github.go";
			labelloc="t";
			rankdir=TB;
			auth_NewGitHubConfig [label = "NewGitHubConfig, Function";shape = box;];
		}
		auth_NewGitHubConfig -> auth_TestOAuth2CallbackUserExchange;
		auth_NewGitHubConfig -> auth_TestOAuth2CallbackTokenExchange;
		auth_NewGitHubConfig -> auth_TestOAuth2CallbackBadRequest;
		auth_NewGitHubConfig -> auth_TestOAuth2Login;
		auth_NewGitHubConfig -> auth_TestOAuth2LoginRedirect;
		auth_NewGitHubConfig -> auth_TestOAuth2Callback;
		subgraph cluster_jwt_go {
			label = "jwt.go";
			labelloc="t";
			rankdir=TB;
			auth_requestID [label = "requestID, Interface";shape = box;];
			auth_requestID -> auth_ClaimsFromContext;
			auth_requestID -> auth_HasCourseStatus;
			auth_IDFor [label = "IDFor, Method";shape = box;];
			auth_IDFor -> auth_HasCourseStatus;
			auth_IDFor -> auth_SameUser;
			auth_Claims [label = "Claims, Struct";shape = box;];
			auth_Claims -> auth_Database;
			auth_Claims -> auth_newClaims;
			auth_Claims -> auth_extractToken;
			auth_Claims -> auth_Context;
			auth_Claims -> auth_ClaimsFromContext;
			auth_Claims -> auth_HasCourseStatus;
			auth_Claims -> auth_SameUser;
			auth_Claims -> auth_NewAuthCookie;
			auth_Claims -> auth_GetClaims;
			auth_Admin [label = "Admin, Field";shape = box;];
			auth_Admin -> auth_newClaims;
			auth_Admin -> auth_String;
			auth_Courses [label = "Courses, Field";shape = box;];
			auth_Courses -> auth_newClaims;
			auth_Courses -> auth_HasCourseStatus;
			auth_Courses -> auth_String;
			auth_Groups [label = "Groups, Field";shape = box;];
			auth_Groups -> auth_newClaims;
			auth_Groups -> auth_String;
			auth_StandardClaims [label = "StandardClaims, Field";shape = box;];
			auth_StandardClaims -> auth_newClaims;
			auth_UserID [label = "UserID, Field";shape = box;];
			auth_UserID -> auth_newClaims;
			auth_UserID -> auth_SameUser;
			auth_UserID -> auth_String;
			auth_TokenManager [label = "TokenManager, Struct";shape = box;];
			auth_TokenManager -> auth_GetClaims;
			auth_TokenManager -> auth_Database;
			auth_TokenManager -> auth_tokenExpired;
			auth_TokenManager -> auth_IDFor;
			auth_TokenManager -> auth_NewTokenManager;
			auth_TokenManager -> auth_NewAuthCookie;
			auth_db [label = "db, Field";shape = box;];
			auth_db -> auth_Database;
			auth_db -> auth_newClaims;
			auth_db -> auth_NewTokenManager;
			auth_secret [label = "secret, Field";shape = box;];
			auth_secret -> auth_validateSignature;
			auth_secret -> auth_NewTokenManager;
			auth_secret -> auth_NewAuthCookie;
			auth_secret -> auth_GetClaims;
			auth_tokensToUpdate [label = "tokensToUpdate, Field";shape = box;];
			auth_NewTokenManager [label = "NewTokenManager, Function";shape = box;];
			auth_NewAuthCookie [label = "NewAuthCookie, Method";shape = box;];
			auth_GetClaims [label = "GetClaims, Method";shape = box;];
			auth_Database [label = "Database, Method";shape = box;];
			auth_newClaims [label = "newClaims, Method";shape = box;];
			auth_newClaims -> auth_NewAuthCookie;
			auth_tokenExpired [label = "tokenExpired, Function";shape = box;];
			auth_tokenExpired -> auth_GetClaims;
			auth_validateSignature [label = "validateSignature, Method";shape = box;];
			auth_validateSignature -> auth_GetClaims;
			auth_extractToken [label = "extractToken, Function";shape = box;];
			auth_extractToken -> auth_GetClaims;
			auth_Context [label = "Context, Method";shape = box;];
			auth_ClaimsFromContext [label = "ClaimsFromContext, Function";shape = box;];
			auth_HasCourseStatus [label = "HasCourseStatus, Method";shape = box;];
			auth_SameUser [label = "SameUser, Method";shape = box;];
			auth_String [label = "String, Method";shape = box;];
		}
		auth_Claims -> auth_TestUpdateTokenList;
		auth_Claims -> auth_TestUpdateCookie;
		auth_Claims -> auth_TestNewManager;
		auth_Claims -> auth_Add;
		auth_Claims -> auth_;
		auth_Admin -> auth_TestUserClaims;
		auth_Admin -> auth_TestUpdateTokenList;
		auth_Admin -> auth_TestUpdateCookie;
		auth_Admin -> auth_TestNewManager;
		auth_Courses -> auth_TestUserClaims;
		auth_Courses -> auth_TestNewManager;
		auth_StandardClaims -> auth_TestUpdateTokenList;
		auth_StandardClaims -> auth_TestUpdateCookie;
		auth_StandardClaims -> auth_TestNewManager;
		auth_UserID -> auth_TestUserClaims;
		auth_UserID -> auth_TestUpdateTokenList;
		auth_UserID -> auth_TestUpdateCookie;
		auth_UserID -> auth_TestNewManager;
		auth_UserID -> auth_UpdateCookie;
		auth_UserID -> auth_updateRequired;
		auth_TokenManager -> auth_OAuth2Login;
		auth_TokenManager -> auth_UpdateCookie;
		auth_TokenManager -> auth_Remove;
		auth_TokenManager -> auth_Add;
		auth_TokenManager -> auth_updateRequired;
		auth_TokenManager -> auth_updateTokenList;
		auth_TokenManager -> auth_update;
		auth_TokenManager -> auth_;
		auth_db -> auth_updateTokenList;
		auth_db -> auth_update;
		auth_tokensToUpdate -> auth_Remove;
		auth_tokensToUpdate -> auth_Add;
		auth_tokensToUpdate -> auth_updateRequired;
		auth_tokensToUpdate -> auth_updateTokenList;
		auth_tokensToUpdate -> auth_exists;
		auth_NewTokenManager -> auth_TestOAuth2CallbackUserExchange;
		auth_NewTokenManager -> auth_TestOAuth2CallbackTokenExchange;
		auth_NewTokenManager -> auth_TestOAuth2CallbackBadRequest;
		auth_NewTokenManager -> auth_TestOAuth2Callback;
		auth_NewTokenManager -> auth_TestUserClaims;
		auth_NewTokenManager -> auth_TestUpdateTokenList;
		auth_NewTokenManager -> auth_TestUpdateCookie;
		auth_NewTokenManager -> auth_TestNewManager;
		auth_NewTokenManager -> auth_TestNewCookie;
		auth_NewAuthCookie -> auth_OAuth2Callback;
		auth_NewAuthCookie -> auth_TestUserClaims;
		auth_NewAuthCookie -> auth_TestNewCookie;
		auth_NewAuthCookie -> auth_UpdateCookie;
		auth_GetClaims -> auth_TestUserClaims;
		auth_GetClaims -> auth_TestUpdateCookie;
		subgraph cluster_jwt_test_go {
			label = "jwt_test.go";
			labelloc="t";
			rankdir=TB;
			auth_TestNewManager [label = "TestNewManager, Function";shape = box;];
			auth_TestNewCookie [label = "TestNewCookie, Function";shape = box;];
			auth_TestUserClaims [label = "TestUserClaims, Function";shape = box;];
			auth_TestUpdateTokenList [label = "TestUpdateTokenList, Function";shape = box;];
			auth_TestUpdateCookie [label = "TestUpdateCookie, Function";shape = box;];
		}
		subgraph cluster_jwt_update_go {
			label = "jwt_update.go";
			labelloc="t";
			rankdir=TB;
			auth_UpdateCookie [label = "UpdateCookie, Method";shape = box;];
			auth_Remove [label = "Remove, Method";shape = box;];
			auth_Remove -> auth_UpdateCookie;
			auth_Add [label = "Add, Method";shape = box;];
			auth_updateRequired [label = "updateRequired, Method";shape = box;];
			auth_updateRequired -> auth_UpdateCookie;
			auth_updateTokenList [label = "updateTokenList, Method";shape = box;];
			auth_update [label = "update, Method";shape = box;];
			auth_update -> auth_Remove;
			auth_update -> auth_Add;
			auth_exists [label = "exists, Method";shape = box;];
			auth_exists -> auth_Remove;
			auth_exists -> auth_Add;
		}
		auth_UpdateCookie -> auth_TestUpdateTokenList;
		auth_UpdateCookie -> auth_TestUpdateCookie;
		auth_UpdateCookie -> auth_TestNewManager;
		auth_Remove -> auth_TestUpdateTokenList;
		auth_Add -> auth_TestUpdateTokenList;
		auth_Add -> auth_TestUpdateCookie;
		auth_updateTokenList -> auth_NewTokenManager;
		subgraph cluster_util_go {
			label = "util.go";
			labelloc="t";
			rankdir=TB;
			auth_GetCallbackURL [label = "GetCallbackURL, Function";shape = box;];
			auth_GetEventsURL [label = "GetEventsURL, Function";shape = box;];
			auth_GetBaseURL [label = "GetBaseURL, Function";shape = box;];
			auth_getURL [label = "getURL, Function";shape = box;];
			auth_getURL -> auth_GetEventsURL;
			auth_getURL -> auth_GetBaseURL;
			auth_getURL -> auth_GetCallbackURL;
			auth_externalUser [label = "externalUser, Struct";shape = box;];
			auth_AvatarURL [label = "AvatarURL, Field";shape = box;];
			auth_Email [label = "Email, Field";shape = box;];
			auth_ID [label = "ID, Field";shape = box;];
			auth_Login [label = "Login, Field";shape = box;];
			auth_Name [label = "Name, Field";shape = box;];
		}
		auth_GetCallbackURL -> auth_NewGitHubConfig;
		auth_externalUser -> auth_extractAccessToken;
		auth_externalUser -> auth_FetchExternalUser;
		auth_AvatarURL -> auth_fetchUser;
		auth_Email -> auth_fetchUser;
		auth_ID -> auth_fetchUser;
		auth_Login -> auth_fetchUser;
		auth_Login -> auth_OAuth2Callback;
		auth_Name -> auth_fetchUser;
	}
	subgraph cluster_hooks {
		label = "hooks (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_courses_new_go {
			label = "courses_new.go";
			labelloc="t";
			rankdir=TB;
			hooks_createCourse [label = "createCourse, Function";shape = box;];
		}
		hooks_createCourse -> hooks_handleInstallationCreated;
		subgraph cluster_duplicate_map_go {
			label = "duplicate_map.go";
			labelloc="t";
			rankdir=TB;
			hooks_Duplicates [label = "Duplicates, Struct";shape = box;];
			hooks_Duplicates -> hooks_;
			hooks_Duplicates -> hooks_NewDuplicateMap;
			hooks_Duplicates -> hooks_Duplicate;
			hooks_dup [label = "dup, Field";shape = box;];
			hooks_dup -> hooks_NewDuplicateMap;
			hooks_dup -> hooks_Duplicate;
			hooks_dup -> hooks_Remove;
			hooks_mu [label = "mu, Field";shape = box;];
			hooks_mu -> hooks_Duplicate;
			hooks_mu -> hooks_Remove;
			hooks_NewDuplicateMap [label = "NewDuplicateMap, Function";shape = box;];
			hooks_Duplicate [label = "Duplicate, Method";shape = box;];
			hooks_Remove [label = "Remove, Method";shape = box;];
		}
		hooks_Duplicates -> hooks_;
		hooks_NewDuplicateMap -> hooks_NewGitHubWebHook;
		hooks_NewDuplicateMap -> hooks_NewMockWebHook;
		hooks_Duplicate -> hooks_Handle;
		hooks_Duplicate -> hooks_TestFilterDuplicatePushEvents;
		hooks_Remove -> hooks_Handle;
		subgraph cluster_extract_changes_go {
			label = "extract_changes.go";
			labelloc="t";
			rankdir=TB;
			hooks_extractChanges [label = "extractChanges, Function";shape = box;];
		}
		hooks_extractChanges -> hooks_TestExtractChanges;
		hooks_extractChanges -> hooks_extractAssignments;
		subgraph cluster_extract_changes_test_go {
			label = "extract_changes_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_TestExtractChanges [label = "TestExtractChanges, Function";shape = box;];
		}
		subgraph cluster_github_go {
			label = "github.go";
			labelloc="t";
			rankdir=TB;
			hooks_maxConcurrentTestRuns [label = "maxConcurrentTestRuns, Constant";shape = box;];
			hooks_maxConcurrentTestRuns -> hooks_NewGitHubWebHook;
			hooks_GitHubWebHook [label = "GitHubWebHook, Struct";shape = box;];
			hooks_GitHubWebHook -> hooks_;
			hooks_GitHubWebHook -> hooks_NewGitHubWebHook;
			hooks_db [label = "db, Field";shape = box;];
			hooks_db -> hooks_NewGitHubWebHook;
			hooks_dup [label = "dup, Field";shape = box;];
			hooks_dup -> hooks_NewGitHubWebHook;
			hooks_dup -> hooks_Handle;
			hooks_logger [label = "logger, Field";shape = box;];
			hooks_logger -> hooks_Handle;
			hooks_logger -> hooks_NewGitHubWebHook;
			hooks_runner [label = "runner, Field";shape = box;];
			hooks_runner -> hooks_NewGitHubWebHook;
			hooks_scmMgr [label = "scmMgr, Field";shape = box;];
			hooks_scmMgr -> hooks_NewGitHubWebHook;
			hooks_secret [label = "secret, Field";shape = box;];
			hooks_secret -> hooks_NewGitHubWebHook;
			hooks_secret -> hooks_Handle;
			hooks_sem [label = "sem, Field";shape = box;];
			hooks_sem -> hooks_NewGitHubWebHook;
			hooks_sem -> hooks_Handle;
			hooks_streams [label = "streams, Field";shape = box;];
			hooks_streams -> hooks_NewGitHubWebHook;
			hooks_tm [label = "tm, Field";shape = box;];
			hooks_tm -> hooks_NewGitHubWebHook;
			hooks_NewGitHubWebHook [label = "NewGitHubWebHook, Function";shape = box;];
			hooks_Handle [label = "Handle, Method";shape = box;];
		}
		hooks_GitHubWebHook -> hooks_;
		hooks_GitHubWebHook -> hooks_TestCheckUserClaims;
		hooks_GitHubWebHook -> hooks_handlePullRequestReview;
		hooks_GitHubWebHook -> hooks_handlePullRequestOpened;
		hooks_GitHubWebHook -> hooks_handlePullRequestClosed;
		hooks_GitHubWebHook -> hooks_handlePullRequestPush;
		hooks_GitHubWebHook -> hooks_getPullRequest;
		hooks_GitHubWebHook -> hooks_ignorePush;
		hooks_GitHubWebHook -> hooks_extractAssignments;
		hooks_GitHubWebHook -> hooks_runAssignmentTests;
		hooks_GitHubWebHook -> hooks_handlePush;
		hooks_GitHubWebHook -> hooks_getRepository;
		hooks_GitHubWebHook -> hooks_getRepositoryWithIssues;
		hooks_db -> hooks_handleInstallationCreated;
		hooks_db -> hooks_TestAlreadyExistingCourse;
		hooks_db -> hooks_TestNonAdminUser;
		hooks_db -> hooks_TestNonExistingUser;
		hooks_db -> hooks_TestNonExistingOrganization;
		hooks_db -> hooks_TestInvalidAction;
		hooks_db -> hooks_TestCheckUserClaims;
		hooks_db -> hooks_TestReceiveInstallationEvent;
		hooks_db -> hooks_handlePullRequestReview;
		hooks_db -> hooks_handlePullRequestClosed;
		hooks_db -> hooks_createPullRequest;
		hooks_db -> hooks_handlePullRequestPush;
		hooks_db -> hooks_getPullRequest;
		hooks_db -> hooks_extractAssignments;
		hooks_db -> hooks_runAssignmentTests;
		hooks_db -> hooks_updateLastActivityDate;
		hooks_db -> hooks_handlePush;
		hooks_db -> hooks_ignorePush;
		hooks_db -> hooks_getRepository;
		hooks_db -> hooks_getRepositoryWithIssues;
		hooks_db -> hooks_getTask;
		hooks_logger -> hooks_handleInstallationCreated;
		hooks_logger -> hooks_handlePullRequestReview;
		hooks_logger -> hooks_handlePullRequestOpened;
		hooks_logger -> hooks_handlePullRequestClosed;
		hooks_logger -> hooks_createPullRequest;
		hooks_logger -> hooks_handlePullRequestPush;
		hooks_logger -> hooks_extractAssignments;
		hooks_logger -> hooks_runAssignmentTests;
		hooks_logger -> hooks_updateLastActivityDate;
		hooks_logger -> hooks_handlePush;
		hooks_logger -> hooks_ignorePush;
		hooks_runner -> hooks_runAssignmentTests;
		hooks_runner -> hooks_handlePush;
		hooks_scmMgr -> hooks_handleInstallationCreated;
		hooks_scmMgr -> hooks_handlePush;
		hooks_streams -> hooks_runAssignmentTests;
		hooks_tm -> hooks_handleInstallationCreated;
		hooks_tm -> hooks_TestCheckUserClaims;
		hooks_NewGitHubWebHook -> hooks_setupWebhook;
		hooks_NewGitHubWebHook -> hooks_TestLastActivityDate;
		hooks_NewGitHubWebHook -> hooks_TestExtractAssignments;
		hooks_NewGitHubWebHook -> hooks_TestIgnorePush;
		hooks_Handle -> hooks_setupWebhook;
		subgraph cluster_github_mock_test_go {
			label = "github_mock_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_maxConcurrentTestRuns [label = "maxConcurrentTestRuns, Constant";shape = box;];
			hooks_maxConcurrentTestRuns -> hooks_NewMockWebHook;
			hooks_MockWebHook [label = "MockWebHook, Struct";shape = box;];
			hooks_MockWebHook -> hooks_;
			hooks_MockWebHook -> hooks_NewMockWebHook;
			hooks_MockWebHook -> hooks_Handle;
			hooks_currentConcurrencyCnt [label = "currentConcurrencyCnt, Field";shape = box;];
			hooks_currentConcurrencyCnt -> hooks_Handle;
			hooks_dup [label = "dup, Field";shape = box;];
			hooks_dup -> hooks_NewMockWebHook;
			hooks_dup -> hooks_Handle;
			hooks_logger [label = "logger, Field";shape = box;];
			hooks_logger -> hooks_NewMockWebHook;
			hooks_logger -> hooks_Handle;
			hooks_logger -> hooks_handlePush;
			hooks_secret [label = "secret, Field";shape = box;];
			hooks_secret -> hooks_NewMockWebHook;
			hooks_secret -> hooks_Handle;
			hooks_sem [label = "sem, Field";shape = box;];
			hooks_sem -> hooks_NewMockWebHook;
			hooks_sem -> hooks_Handle;
			hooks_totalCnt [label = "totalCnt, Field";shape = box;];
			hooks_totalCnt -> hooks_handlePush;
			hooks_wg [label = "wg, Field";shape = box;];
			hooks_wg -> hooks_NewMockWebHook;
			hooks_wg -> hooks_Handle;
			hooks_NewMockWebHook [label = "NewMockWebHook, Function";shape = box;];
			hooks_Handle [label = "Handle, Method";shape = box;];
			hooks_handlePush [label = "handlePush, Method";shape = box;];
			hooks_handlePush -> hooks_Handle;
		}
		hooks_currentConcurrencyCnt -> hooks_TestConcurrentHandlePush;
		hooks_dup -> hooks_TestFilterDuplicatePushEvents;
		hooks_totalCnt -> hooks_TestConcurrentHandlePush;
		hooks_wg -> hooks_TestConcurrentHandlePush;
		hooks_wg -> hooks_TestFilterDuplicatePushEvents;
		hooks_NewMockWebHook -> hooks_TestFilterDuplicatePushEvents;
		hooks_NewMockWebHook -> hooks_TestHandlePush;
		hooks_NewMockWebHook -> hooks_TestConcurrentHandlePush;
		hooks_Handle -> hooks_TestFilterDuplicatePushEvents;
		hooks_Handle -> hooks_TestHandlePush;
		hooks_Handle -> hooks_TestConcurrentHandlePush;
		subgraph cluster_github_test_go {
			label = "github_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_secret [label = "secret, Constant";shape = box;];
			hooks_secret -> hooks_TestFilterDuplicatePushEvents;
			hooks_secret -> hooks_TestHandlePush;
			hooks_secret -> hooks_TestConcurrentHandlePush;
			hooks_TestHandlePush [label = "TestHandlePush, Function";shape = box;];
			hooks_TestConcurrentHandlePush [label = "TestConcurrentHandlePush, Function";shape = box;];
			hooks_TestFilterDuplicatePushEvents [label = "TestFilterDuplicatePushEvents, Function";shape = box;];
			hooks_pushEvent [label = "pushEvent, Variable";shape = box;];
			hooks_pushEvent -> hooks_TestHandlePush;
			hooks_hMAC [label = "hMAC, Function";shape = box;];
			hooks_hMAC -> hooks_TestFilterDuplicatePushEvents;
			hooks_hMAC -> hooks_TestHandlePush;
			hooks_hMAC -> hooks_TestConcurrentHandlePush;
		}
		subgraph cluster_installation_go {
			label = "installation.go";
			labelloc="t";
			rankdir=TB;
			hooks_handleInstallationCreated [label = "handleInstallationCreated, Method";shape = box;];
			hooks_defaultYear [label = "defaultYear, Function";shape = box;];
			hooks_defaultYear -> hooks_handleInstallationCreated;
			hooks_defaultTag [label = "defaultTag, Function";shape = box;];
			hooks_defaultTag -> hooks_handleInstallationCreated;
		}
		hooks_handleInstallationCreated -> hooks_Handle;
		hooks_defaultYear -> hooks_Test_defaultYearAndTag;
		hooks_defaultTag -> hooks_Test_defaultYearAndTag;
		subgraph cluster_installation_test_go {
			label = "installation_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_TestReceiveInstallationEvent [label = "TestReceiveInstallationEvent, Function";shape = box;];
			hooks_TestAlreadyExistingCourse [label = "TestAlreadyExistingCourse, Function";shape = box;];
			hooks_TestNonAdminUser [label = "TestNonAdminUser, Function";shape = box;];
			hooks_TestNonExistingUser [label = "TestNonExistingUser, Function";shape = box;];
			hooks_TestNonExistingOrganization [label = "TestNonExistingOrganization, Function";shape = box;];
			hooks_TestInvalidAction [label = "TestInvalidAction, Function";shape = box;];
			hooks_TestCheckUserClaims [label = "TestCheckUserClaims, Function";shape = box;];
			hooks_setupWebhook [label = "setupWebhook, Function";shape = box;];
			hooks_setupWebhook -> hooks_TestNonAdminUser;
			hooks_setupWebhook -> hooks_TestNonExistingUser;
			hooks_setupWebhook -> hooks_TestNonExistingOrganization;
			hooks_setupWebhook -> hooks_TestInvalidAction;
			hooks_setupWebhook -> hooks_TestReceiveInstallationEvent;
			hooks_setupWebhook -> hooks_TestCheckUserClaims;
			hooks_setupWebhook -> hooks_TestAlreadyExistingCourse;
			hooks_event [label = "event, Struct";shape = box;];
			hooks_event -> hooks_TestAlreadyExistingCourse;
			hooks_event -> hooks_TestNonAdminUser;
			hooks_event -> hooks_TestNonExistingUser;
			hooks_event -> hooks_TestNonExistingOrganization;
			hooks_event -> hooks_TestInvalidAction;
			hooks_event -> hooks_TestCheckUserClaims;
			hooks_event -> hooks_TestReceiveInstallationEvent;
			hooks_event -> hooks_setupWebhook;
			hooks_Action [label = "Action, Field";shape = box;];
			hooks_Action -> hooks_TestInvalidAction;
			hooks_Action -> hooks_sendEvent;
			hooks_OrganizationLogin [label = "OrganizationLogin, Field";shape = box;];
			hooks_OrganizationLogin -> hooks_TestAlreadyExistingCourse;
			hooks_OrganizationLogin -> hooks_TestNonAdminUser;
			hooks_OrganizationLogin -> hooks_TestNonExistingUser;
			hooks_OrganizationLogin -> hooks_TestNonExistingOrganization;
			hooks_OrganizationLogin -> hooks_TestInvalidAction;
			hooks_OrganizationLogin -> hooks_TestCheckUserClaims;
			hooks_OrganizationLogin -> hooks_TestReceiveInstallationEvent;
			hooks_OrganizationScmID [label = "OrganizationScmID, Field";shape = box;];
			hooks_OrganizationScmID -> hooks_TestAlreadyExistingCourse;
			hooks_OrganizationScmID -> hooks_TestNonAdminUser;
			hooks_OrganizationScmID -> hooks_TestNonExistingUser;
			hooks_OrganizationScmID -> hooks_TestNonExistingOrganization;
			hooks_OrganizationScmID -> hooks_TestInvalidAction;
			hooks_OrganizationScmID -> hooks_TestCheckUserClaims;
			hooks_OrganizationScmID -> hooks_TestReceiveInstallationEvent;
			hooks_UserLogin [label = "UserLogin, Field";shape = box;];
			hooks_UserLogin -> hooks_TestAlreadyExistingCourse;
			hooks_UserLogin -> hooks_TestNonAdminUser;
			hooks_UserLogin -> hooks_TestNonExistingUser;
			hooks_UserLogin -> hooks_TestNonExistingOrganization;
			hooks_UserLogin -> hooks_TestInvalidAction;
			hooks_UserLogin -> hooks_TestCheckUserClaims;
			hooks_UserLogin -> hooks_TestReceiveInstallationEvent;
			hooks_UserScmID [label = "UserScmID, Field";shape = box;];
			hooks_UserScmID -> hooks_TestAlreadyExistingCourse;
			hooks_UserScmID -> hooks_TestNonAdminUser;
			hooks_UserScmID -> hooks_TestNonExistingUser;
			hooks_UserScmID -> hooks_TestNonExistingOrganization;
			hooks_UserScmID -> hooks_TestInvalidAction;
			hooks_UserScmID -> hooks_TestCheckUserClaims;
			hooks_UserScmID -> hooks_TestReceiveInstallationEvent;
			hooks_eventTemplate [label = "eventTemplate, Constant";shape = box;];
			hooks_eventTemplate -> hooks_sendEvent;
			hooks_sendEvent [label = "sendEvent, Function";shape = box;];
			hooks_sendEvent -> hooks_TestAlreadyExistingCourse;
			hooks_sendEvent -> hooks_TestNonAdminUser;
			hooks_sendEvent -> hooks_TestNonExistingUser;
			hooks_sendEvent -> hooks_TestNonExistingOrganization;
			hooks_sendEvent -> hooks_TestInvalidAction;
			hooks_sendEvent -> hooks_TestCheckUserClaims;
			hooks_sendEvent -> hooks_TestReceiveInstallationEvent;
			hooks_Test_defaultYearAndTag [label = "Test_defaultYearAndTag, Function";shape = box;];
		}
		subgraph cluster_pull_request_go {
			label = "pull_request.go";
			labelloc="t";
			rankdir=TB;
			hooks_handlePullRequestPush [label = "handlePullRequestPush, Method";shape = box;];
			hooks_getPullRequest [label = "getPullRequest, Method";shape = box;];
			hooks_getPullRequest -> hooks_handlePullRequestPush;
			hooks_handlePullRequestReview [label = "handlePullRequestReview, Method";shape = box;];
			hooks_handlePullRequestOpened [label = "handlePullRequestOpened, Method";shape = box;];
			hooks_handlePullRequestClosed [label = "handlePullRequestClosed, Method";shape = box;];
			hooks_createPullRequest [label = "createPullRequest, Method";shape = box;];
			hooks_createPullRequest -> hooks_handlePullRequestOpened;
			hooks_issueRegExp [label = "issueRegExp, Variable";shape = box;];
			hooks_issueRegExp -> hooks_findIssue;
			hooks_findIssue [label = "findIssue, Function";shape = box;];
			hooks_findIssue -> hooks_handlePullRequestOpened;
		}
		hooks_handlePullRequestPush -> hooks_runAssignmentTests;
		hooks_handlePullRequestReview -> hooks_Handle;
		hooks_handlePullRequestOpened -> hooks_Handle;
		hooks_handlePullRequestClosed -> hooks_Handle;
		hooks_findIssue -> hooks_TestFindIssue;
		subgraph cluster_pull_request_test_go {
			label = "pull_request_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_moreThanOneHash [label = "moreThanOneHash, Constant";shape = box;];
			hooks_moreThanOneHash -> hooks_TestFindIssue;
			hooks_noIssueFound [label = "noIssueFound, Constant";shape = box;];
			hooks_noIssueFound -> hooks_TestFindIssue;
			hooks_TestFindIssue [label = "TestFindIssue, Function";shape = box;];
		}
		subgraph cluster_push_go {
			label = "push.go";
			labelloc="t";
			rankdir=TB;
			hooks_handlePush [label = "handlePush, Method";shape = box;];
			hooks_ignorePush [label = "ignorePush, Method";shape = box;];
			hooks_ignorePush -> hooks_handlePush;
			hooks_extractAssignments [label = "extractAssignments, Method";shape = box;];
			hooks_extractAssignments -> hooks_handlePush;
			hooks_runAssignmentTests [label = "runAssignmentTests, Method";shape = box;];
			hooks_runAssignmentTests -> hooks_handlePush;
			hooks_updateLastActivityDate [label = "updateLastActivityDate, Method";shape = box;];
			hooks_updateLastActivityDate -> hooks_handlePush;
			hooks_branchName [label = "branchName, Function";shape = box;];
			hooks_branchName -> hooks_runAssignmentTests;
			hooks_branchName -> hooks_ignorePush;
			hooks_isDefaultBranch [label = "isDefaultBranch, Function";shape = box;];
			hooks_isDefaultBranch -> hooks_ignorePush;
			hooks_isDefaultBranch -> hooks_runAssignmentTests;
		}
		hooks_handlePush -> hooks_Handle;
		hooks_ignorePush -> hooks_TestIgnorePush;
		hooks_extractAssignments -> hooks_TestExtractAssignments;
		hooks_updateLastActivityDate -> hooks_TestLastActivityDate;
		hooks_branchName -> hooks_getPullRequest;
		hooks_branchName -> hooks_TestBranchName;
		hooks_branchName -> hooks_TestIgnorePush;
		hooks_isDefaultBranch -> hooks_TestDefaultBranch;
		subgraph cluster_push_test_go {
			label = "push_test.go";
			labelloc="t";
			rankdir=TB;
			hooks_TestExtractAssignments [label = "TestExtractAssignments, Function";shape = box;];
			hooks_TestLastActivityDate [label = "TestLastActivityDate, Function";shape = box;];
			hooks_inOneSecondRange [label = "inOneSecondRange, Function";shape = box;];
			hooks_inOneSecondRange -> hooks_TestLastActivityDate;
			hooks_TestBranchName [label = "TestBranchName, Function";shape = box;];
			hooks_TestDefaultBranch [label = "TestDefaultBranch, Function";shape = box;];
			hooks_TestIgnorePush [label = "TestIgnorePush, Function";shape = box;];
		}
		subgraph cluster_queries_go {
			label = "queries.go";
			labelloc="t";
			rankdir=TB;
			hooks_getRepository [label = "getRepository, Method";shape = box;];
			hooks_getRepositoryWithIssues [label = "getRepositoryWithIssues, Method";shape = box;];
			hooks_getTask [label = "getTask, Method";shape = box;];
		}
		hooks_getRepository -> hooks_handlePush;
		hooks_getRepositoryWithIssues -> hooks_handlePullRequestOpened;
		hooks_getTask -> hooks_createPullRequest;
		hooks_getTask -> hooks_handlePullRequestPush;
	}
	subgraph cluster_database {
		label = "database (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_database_go {
			label = "database.go";
			labelloc="t";
			rankdir=TB;
			database_Database [label = "Database, Interface";shape = box;];
			database_CreateAssignment [label = "CreateAssignment, Method";shape = box;];
			database_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			database_CreateCourse [label = "CreateCourse, Method";shape = box;];
			database_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			database_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			database_CreateGroup [label = "CreateGroup, Method";shape = box;];
			database_CreateIssues [label = "CreateIssues, Method";shape = box;];
			database_CreatePullRequest [label = "CreatePullRequest, Method";shape = box;];
			database_CreateRepository [label = "CreateRepository, Method";shape = box;];
			database_CreateReview [label = "CreateReview, Method";shape = box;];
			database_CreateSubmission [label = "CreateSubmission, Method";shape = box;];
			database_CreateUser [label = "CreateUser, Method";shape = box;];
			database_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			database_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			database_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			database_DeleteRepository [label = "DeleteRepository, Method";shape = box;];
			database_DeleteReview [label = "DeleteReview, Method";shape = box;];
			database_GetAssignment [label = "GetAssignment, Method";shape = box;];
			database_GetAssignmentsByCourse [label = "GetAssignmentsByCourse, Method";shape = box;];
			database_GetBenchmarks [label = "GetBenchmarks, Method";shape = box;];
			database_GetCourse [label = "GetCourse, Method";shape = box;];
			database_GetCourseByOrganizationID [label = "GetCourseByOrganizationID, Method";shape = box;];
			database_GetCourseByStatus [label = "GetCourseByStatus, Method";shape = box;];
			database_GetCourseSubmissions [label = "GetCourseSubmissions, Method";shape = box;];
			database_GetCourseTeachers [label = "GetCourseTeachers, Method";shape = box;];
			database_GetCourses [label = "GetCourses, Method";shape = box;];
			database_GetCoursesByUser [label = "GetCoursesByUser, Method";shape = box;];
			database_GetEnrollmentByCourseAndUser [label = "GetEnrollmentByCourseAndUser, Method";shape = box;];
			database_GetEnrollmentsByCourse [label = "GetEnrollmentsByCourse, Method";shape = box;];
			database_GetEnrollmentsByUser [label = "GetEnrollmentsByUser, Method";shape = box;];
			database_GetGroup [label = "GetGroup, Method";shape = box;];
			database_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
			database_GetLastSubmission [label = "GetLastSubmission, Method";shape = box;];
			database_GetLastSubmissions [label = "GetLastSubmissions, Method";shape = box;];
			database_GetPullRequest [label = "GetPullRequest, Method";shape = box;];
			database_GetRepositories [label = "GetRepositories, Method";shape = box;];
			database_GetRepositoriesWithIssues [label = "GetRepositoriesWithIssues, Method";shape = box;];
			database_GetReview [label = "GetReview, Method";shape = box;];
			database_GetSubmission [label = "GetSubmission, Method";shape = box;];
			database_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			database_GetTasks [label = "GetTasks, Method";shape = box;];
			database_GetUser [label = "GetUser, Method";shape = box;];
			database_GetUserByCourse [label = "GetUserByCourse, Method";shape = box;];
			database_GetUserByRemoteIdentity [label = "GetUserByRemoteIdentity, Method";shape = box;];
			database_GetUserWithEnrollments [label = "GetUserWithEnrollments, Method";shape = box;];
			database_GetUsers [label = "GetUsers, Method";shape = box;];
			database_HandleMergingPR [label = "HandleMergingPR, Method";shape = box;];
			database_RejectEnrollment [label = "RejectEnrollment, Method";shape = box;];
			database_SynchronizeAssignmentTasks [label = "SynchronizeAssignmentTasks, Method";shape = box;];
			database_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			database_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			database_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
			database_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			database_UpdateEnrollment [label = "UpdateEnrollment, Method";shape = box;];
			database_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			database_UpdateGroupStatus [label = "UpdateGroupStatus, Method";shape = box;];
			database_UpdatePullRequest [label = "UpdatePullRequest, Method";shape = box;];
			database_UpdateReview [label = "UpdateReview, Method";shape = box;];
			database_UpdateSlipDays [label = "UpdateSlipDays, Method";shape = box;];
			database_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			database_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			database_UpdateUser [label = "UpdateUser, Method";shape = box;];
		}
		database_Database -> database_TestCreateUpdateReview;
		database_Database -> database_TestGormDBGetSubmissionForUser;
		database_CreateAssignment -> database_TestUpdateBenchmarks;
		database_CreateAssignment -> database_TestGormDBCreateAssignmentNoRecord;
		database_CreateAssignment -> database_TestGormDBCreateAssignment;
		database_CreateAssignment -> database_TestUpdateAssignment;
		database_CreateAssignment -> database_TestGormDBGetInsertSubmissions;
		database_CreateAssignment -> database_setupCourseAssignment;
		database_CreateAssignment -> database_TestGormDBGetLastSubmissions;
		database_CreateAssignment -> database_TestGormDBSynchronizeAssignmentTasks;
		database_CreateAssignment -> database_TestGormDBNonExistingTasksForAssignment;
		database_CreateAssignment -> database_TestDBGetInsertGroupSubmissions;
		database_CreateBenchmark -> database_TestUpdateBenchmarks;
		database_CreateCourse -> database_TestGormDBCreateCourseNonAdmin;
		database_CreateCourse -> database_TestGormDBCourseUniqueConstraint;
		database_CreateEnrollment -> database_TestGormDBGetCoursesByUser;
		database_CreateEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_CreateEnrollment -> database_TestGormDBCreateGroupTwice;
		database_CreateEnrollment -> database_TestGetGroupsByCourse;
		database_CreateEnrollment -> database_TestDBCreateEnrollmentNoRecord;
		database_CreateEnrollment -> database_TestDBCreateEnrollment;
		database_CreateEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_CreateEnrollment -> database_TestDBGetInsertGroupSubmissions;
		database_CreateEnrollment -> database_TestDeleteGroup;
		database_CreateGroup -> database_TestGormDBCreateAndGetGroup;
		database_CreateGroup -> database_TestGormDBCreateGroupTwice;
		database_CreateGroup -> database_TestGetGroupsByCourse;
		database_CreateGroup -> database_TestDBGetInsertGroupSubmissions;
		database_CreateGroup -> database_TestDeleteGroup;
		database_CreateRepository -> database_TestGetRepositoriesByOrganization;
		database_CreateRepository -> database_TestGetRepoByCourseIdUserIdAndType;
		database_CreateRepository -> database_TestGetRepositoryByCourseUser;
		database_CreateRepository -> database_TestGetRepositoriesByCourseIdAndType;
		database_CreateRepository -> database_TestGormDBGetSingleRepoWithUser;
		database_CreateRepository -> database_TestGormDBCreateSingleRepoWithMissingUser;
		database_CreateRepository -> database_TestGormDBGetCourseRepoType;
		database_CreateRepository -> database_TestGormDeleteRepo;
		database_CreateSubmission -> database_TestGetCourseSubmissions;
		database_CreateSubmission -> database_TestCreateUpdateReview;
		database_CreateSubmission -> database_TestGormDBUpdateSubmission;
		database_CreateSubmission -> database_TestGormDBInsertSubmissions;
		database_CreateSubmission -> database_TestGormDBInsertBadSubmissions;
		database_CreateSubmission -> database_TestGormDBGetInsertSubmissions;
		database_CreateSubmission -> database_TestGormDBCreateUpdateWithBuildInfoAndScores;
		database_CreateSubmission -> database_TestGormDBSubmissionWithBuildDate;
		database_CreateSubmission -> database_TestGormDBUpdateSubmissionZeroScore;
		database_CreateSubmission -> database_TestGormDBGetLastSubmissions;
		database_CreateSubmission -> database_TestGormDBRemoveTest;
		database_CreateSubmission -> database_TestDBGetInsertGroupSubmissions;
		database_CreateUser -> database_TestDBUpdateUserAccessToken;
		database_CreateUser -> database_TestGetCourseTeachers;
		database_CreateUser -> database_TestDBUpdateUser;
		database_CreateUser -> database_TestDBDuplicateIdentity;
		database_CreateUser -> database_TestDBSetAdmin;
		database_CreateUser -> database_TestGetUserByCourse;
		database_DeleteGroup -> database_TestDeleteGroup;
		database_DeleteRepository -> database_TestGormDeleteRepo;
		database_GetAssignment -> database_TestGormDBGetAssignment;
		database_GetAssignment -> database_TestGormDBCreateAssignment;
		database_GetAssignmentsByCourse -> database_TestUpdateAssignment;
		database_GetAssignmentsByCourse -> database_TestGormDBGetAssignment;
		database_GetAssignmentsByCourse -> database_TestUpdateBenchmarks;
		database_GetAssignmentsByCourse -> database_TestGormDBCreateAssignment;
		database_GetAssignmentsByCourse -> database_SynchronizeAssignmentTasks;
		database_GetAssignmentsByCourse -> database_TestGormDBNonExistingTasksForAssignment;
		database_GetBenchmarks -> database_updateGradingCriteria;
		database_GetBenchmarks -> database_GetAssignmentsByCourse;
		database_GetCourse -> database_TestGormDBGetCourse;
		database_GetCourse -> database_TestGormDBGetCourseNoRecord;
		database_GetCourse -> database_TestGormDBUpdateCourse;
		database_GetCourse -> database_TestGormDBCourseUniqueConstraint;
		database_GetCourseByOrganizationID -> database_TestGormDBGetCourseByOrganization;
		database_GetCourseByStatus -> database_TestGetCourseByStatus;
		database_GetCourseSubmissions -> database_TestGetCourseSubmissions;
		database_GetCourseTeachers -> database_TestGetCourseTeachers;
		database_GetCourses -> database_GetCoursesByUser;
		database_GetCourses -> database_TestGormDBGetCourses;
		database_GetCoursesByUser -> database_TestGormDBGetCoursesByUser;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBGetCoursesByUser;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateCourse;
		database_GetEnrollmentByCourseAndUser -> database_RejectEnrollment;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateAndGetGroup;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateGroupTwice;
		database_GetEnrollmentByCourseAndUser -> database_TestGetGroupsByCourse;
		database_GetEnrollmentsByCourse -> database_TestGormDBCreateCourse;
		database_GetEnrollmentsByCourse -> database_TestGormDBCreateAndGetGroup;
		database_GetEnrollmentsByCourse -> database_TestDBAcceptRejectEnrollment;
		database_GetGroup -> database_DeleteGroup;
		database_GetGroup -> database_TestGormDBCreateAndGetGroup;
		database_GetGroup -> database_TestDeleteGroup;
		database_GetGroupsByCourse -> database_TestGetGroupsByCourse;
		database_GetLastSubmission -> database_TestGormDBGetLastSubmissions;
		database_GetLastSubmissions -> database_TestCreateUpdateReview;
		database_GetLastSubmissions -> database_TestGormDBUpdateSubmission;
		database_GetLastSubmissions -> database_TestGormDBGetNonExistingSubmissions;
		database_GetLastSubmissions -> database_TestGormDBInsertSubmissions;
		database_GetLastSubmissions -> database_TestGormDBGetInsertSubmissions;
		database_GetLastSubmissions -> database_TestGormDBCreateUpdateWithBuildInfoAndScores;
		database_GetLastSubmissions -> database_TestGormDBSubmissionWithBuildDate;
		database_GetLastSubmissions -> database_TestGormDBUpdateSubmissionZeroScore;
		database_GetLastSubmissions -> database_TestGormDBRemoveTest;
		database_GetLastSubmissions -> database_TestDBGetGroupSubmissions;
		database_GetLastSubmissions -> database_TestDBGetInsertGroupSubmissions;
		database_GetRepositories -> database_TestGetRepositoriesByOrganization;
		database_GetRepositories -> database_TestGormDBGetEmptyRepo;
		database_GetRepositories -> database_TestGetRepoByCourseIdUserIdAndType;
		database_GetRepositories -> database_TestGetRepositoryByCourseUser;
		database_GetRepositories -> database_TestGetRepositoriesByCourseIdAndType;
		database_GetRepositories -> database_TestGormDBGetSingleRepoWithUser;
		database_GetRepositories -> database_TestGormDBGetCourseRepoType;
		database_GetRepositories -> database_TestGormDeleteRepo;
		database_GetSubmission -> database_updateSubmission;
		database_GetSubmission -> database_GetLastSubmission;
		database_GetSubmission -> database_GetLastSubmissions;
		database_GetSubmission -> database_TestGormDBGetSubmissionForUser;
		database_GetSubmission -> database_TestGormDBSubmissionWithBuildDate;
		database_GetTasks -> database_TestGormDBSynchronizeAssignmentTasks;
		database_GetTasks -> database_TestGormDBNonExistingTasksForAssignment;
		database_GetUser -> database_TestDBUpdateAccessTokenUserGetAccessToken;
		database_GetUser -> database_TestDBUpdateUserAccessToken;
		database_GetUser -> database_CreateCourse;
		database_GetUser -> database_GetCourseTeachers;
		database_GetUser -> database_TestDBUpdateUser;
		database_GetUser -> database_TestDBGetUser;
		database_GetUser -> database_TestDBSetAdmin;
		database_GetUserByCourse -> database_TestGetUserByCourse;
		database_GetUserWithEnrollments -> database_TestDBGetUserWithEnrollments;
		database_GetUsers -> database_TestGormDBCreateAndGetGroup;
		database_GetUsers -> database_TestDBGetUsers;
		database_RejectEnrollment -> database_TestGormDBGetCoursesByUser;
		database_RejectEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_RejectEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_SynchronizeAssignmentTasks -> database_TestGormDBSynchronizeAssignmentTasks;
		database_UpdateAssignments -> database_TestUpdateAssignment;
		database_UpdateBenchmark -> database_TestUpdateBenchmarks;
		database_UpdateCourse -> database_TestGormDBUpdateCourse;
		database_UpdateCriterion -> database_TestUpdateBenchmarks;
		database_UpdateEnrollment -> database_TestGormDBGetCoursesByUser;
		database_UpdateEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_UpdateEnrollment -> database_TestGormDBCreateGroupTwice;
		database_UpdateEnrollment -> database_TestGetGroupsByCourse;
		database_UpdateEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_UpdateEnrollment -> database_TestDBGetInsertGroupSubmissions;
		database_UpdateEnrollment -> database_TestDeleteGroup;
		database_UpdateGroupStatus -> database_TestGetGroupsByCourse;
		database_UpdateReview -> database_updateSubmission;
		database_UpdateSubmission -> database_TestGormDBUpdateSubmission;
		database_UpdateUser -> database_TestDBUpdateAccessTokenUserGetAccessToken;
		database_UpdateUser -> database_TestDBUpdateUserAccessToken;
		database_UpdateUser -> database_TestDBUpdateUser;
		database_UpdateUser -> database_TestDBSetAdminNoRecord;
		database_UpdateUser -> database_TestDBSetAdmin;
		database_UpdateUser -> database_CreateUser;
		subgraph cluster_db_user_test_go {
			label = "db_user_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestDBUpdateUserAccessToken [label = "TestDBUpdateUserAccessToken, Function";shape = box;];
			database_TestDBUpdateAccessTokenUserGetAccessToken [label = "TestDBUpdateAccessTokenUserGetAccessToken, Function";shape = box;];
		}
		subgraph cluster_gormdb_go {
			label = "gormdb.go";
			labelloc="t";
			rankdir=TB;
			database_ErrDuplicateIdentity [label = "ErrDuplicateIdentity, Variable";shape = box;];
			database_ErrEmptyGroup [label = "ErrEmptyGroup, Variable";shape = box;];
			database_ErrDuplicateGroup [label = "ErrDuplicateGroup, Variable";shape = box;];
			database_ErrUpdateGroup [label = "ErrUpdateGroup, Variable";shape = box;];
			database_ErrCourseExists [label = "ErrCourseExists, Variable";shape = box;];
			database_ErrInsufficientAccess [label = "ErrInsufficientAccess, Variable";shape = box;];
			database_ErrCreateRepo [label = "ErrCreateRepo, Variable";shape = box;];
			database_ErrNotEnrolled [label = "ErrNotEnrolled, Variable";shape = box;];
			database_GormDB [label = "GormDB, Struct";shape = box;];
			database_GormDB -> database_;
			database_GormDB -> database_NewGormDB;
			database_conn [label = "conn, Field";shape = box;];
			database_conn -> database_Close;
			database_NewGormDB [label = "NewGormDB, Function";shape = box;];
			database_Close [label = "Close, Method";shape = box;];
		}
		database_ErrEmptyGroup -> database_CreateGroup;
		database_ErrEmptyGroup -> database_;
		database_ErrDuplicateGroup -> database_CreateGroup;
		database_ErrDuplicateGroup -> database_UpdateGroup;
		database_ErrDuplicateGroup -> database_TestGormDBCreateGroupTwice;
		database_ErrUpdateGroup -> database_UpdateGroup;
		database_ErrUpdateGroup -> database_CreateGroup;
		database_ErrUpdateGroup -> database_;
		database_ErrCourseExists -> database_CreateCourse;
		database_ErrCourseExists -> database_TestGormDBCourseUniqueConstraint;
		database_ErrInsufficientAccess -> database_CreateCourse;
		database_ErrCreateRepo -> database_CreateRepository;
		database_ErrNotEnrolled -> database_GetUserByCourse;
		database_GormDB -> database_check;
		database_GormDB -> database_;
		database_GormDB -> database_updateGradingCriteria;
		database_GormDB -> database_GetCourseSubmissions;
		database_GormDB -> database_CreateBenchmark;
		database_GormDB -> database_UpdateBenchmark;
		database_GormDB -> database_DeleteBenchmark;
		database_GormDB -> database_CreateCriterion;
		database_GormDB -> database_UpdateCriterion;
		database_GormDB -> database_DeleteCriterion;
		database_GormDB -> database_CreateAssignment;
		database_GormDB -> database_GetAssignment;
		database_GormDB -> database_GetAssignmentsByCourse;
		database_GormDB -> database_GetCourseByStatus;
		database_GormDB -> database_GetCourseByOrganizationID;
		database_GormDB -> database_GetCourses;
		database_GormDB -> database_GetCoursesByUser;
		database_GormDB -> database_GetCourseTeachers;
		database_GormDB -> database_CreateCourse;
		database_GormDB -> database_GetCourse;
		database_GormDB -> database_getEnrollments;
		database_GormDB -> database_UpdateSlipDays;
		database_GormDB -> database_CreateEnrollment;
		database_GormDB -> database_RejectEnrollment;
		database_GormDB -> database_UpdateEnrollment;
		database_GormDB -> database_GetEnrollmentByCourseAndUser;
		database_GormDB -> database_GetEnrollmentsByCourse;
		database_GormDB -> database_GetEnrollmentsByUser;
		database_GormDB -> database_UpdateGroup;
		database_GormDB -> database_UpdateGroupStatus;
		database_GormDB -> database_DeleteGroup;
		database_GormDB -> database_GetGroup;
		database_GormDB -> database_CreateGroup;
		database_GormDB -> database_CreateRepository;
		database_GormDB -> database_GetRepositories;
		database_GormDB -> database_DeleteRepository;
		database_GormDB -> database_GetSubmission;
		database_GormDB -> database_GetLastSubmission;
		database_GormDB -> database_GetLastSubmissions;
		database_GormDB -> database_GetSubmissions;
		database_GormDB -> database_UpdateSubmission;
		database_GormDB -> database_UpdateSubmissions;
		database_GormDB -> database_GetReview;
		database_GormDB -> database_CreateReview;
		database_GormDB -> database_UpdateReview;
		database_GormDB -> database_CreateSubmission;
		database_GormDB -> database_SynchronizeAssignmentTasks;
		database_GormDB -> database_CreatePullRequest;
		database_GormDB -> database_GetPullRequest;
		database_GormDB -> database_HandleMergingPR;
		database_GormDB -> database_GetTasks;
		database_GormDB -> database_CreateIssues;
		database_GormDB -> database_CreateUser;
		database_GormDB -> database_GetUser;
		database_GormDB -> database_GetUserByRemoteIdentity;
		database_GormDB -> database_GetUserByCourse;
		database_GormDB -> database_GetUserWithEnrollments;
		database_GormDB -> database_GetUsers;
		database_conn -> database_GetCourseSubmissions;
		database_conn -> database_CreateBenchmark;
		database_conn -> database_UpdateBenchmark;
		database_conn -> database_DeleteBenchmark;
		database_conn -> database_CreateAssignment;
		database_conn -> database_CreateCriterion;
		database_conn -> database_UpdateCriterion;
		database_conn -> database_DeleteCriterion;
		database_conn -> database_GetBenchmarks;
		database_conn -> database_GetAssignment;
		database_conn -> database_GetAssignmentsByCourse;
		database_conn -> database_UpdateAssignments;
		database_conn -> database_GetCourseByOrganizationID;
		database_conn -> database_GetCourses;
		database_conn -> database_GetCourseTeachers;
		database_conn -> database_UpdateCourse;
		database_conn -> database_CreateCourse;
		database_conn -> database_GetCourse;
		database_conn -> database_GetCourseByStatus;
		database_conn -> database_internalUpdateSlipDays;
		database_conn -> database_CreateEnrollment;
		database_conn -> database_RejectEnrollment;
		database_conn -> database_UpdateEnrollment;
		database_conn -> database_GetEnrollmentByCourseAndUser;
		database_conn -> database_getEnrollments;
		database_conn -> database_UpdateGroupStatus;
		database_conn -> database_DeleteGroup;
		database_conn -> database_GetGroup;
		database_conn -> database_GetGroupsByCourse;
		database_conn -> database_CreateGroup;
		database_conn -> database_UpdateGroup;
		database_conn -> database_CreateRepository;
		database_conn -> database_GetRepositories;
		database_conn -> database_DeleteRepository;
		database_conn -> database_GetRepositoriesWithIssues;
		database_conn -> database_check;
		database_conn -> database_GetSubmission;
		database_conn -> database_GetLastSubmission;
		database_conn -> database_GetLastSubmissions;
		database_conn -> database_GetSubmissions;
		database_conn -> database_UpdateSubmission;
		database_conn -> database_UpdateSubmissions;
		database_conn -> database_GetReview;
		database_conn -> database_CreateReview;
		database_conn -> database_UpdateReview;
		database_conn -> database_DeleteReview;
		database_conn -> database_CreateSubmission;
		database_conn -> database_CreatePullRequest;
		database_conn -> database_GetPullRequest;
		database_conn -> database_HandleMergingPR;
		database_conn -> database_UpdatePullRequest;
		database_conn -> database_GetTasks;
		database_conn -> database_CreateIssues;
		database_conn -> database_SynchronizeAssignmentTasks;
		database_conn -> database_GetUser;
		database_conn -> database_GetUserByRemoteIdentity;
		database_conn -> database_GetUserByCourse;
		database_conn -> database_GetUserWithEnrollments;
		database_conn -> database_CreateUser;
		database_conn -> database_GetUsers;
		database_conn -> database_UpdateUser;
		subgraph cluster_gormdb_assignment_go {
			label = "gormdb_assignment.go";
			labelloc="t";
			rankdir=TB;
			database_CreateAssignment [label = "CreateAssignment, Method";shape = box;];
			database_GetAssignment [label = "GetAssignment, Method";shape = box;];
			database_GetAssignmentsByCourse [label = "GetAssignmentsByCourse, Method";shape = box;];
			database_UpdateAssignments [label = "UpdateAssignments, Method";shape = box;];
			database_check [label = "check, Function";shape = box;];
			database_check -> database_UpdateAssignments;
			database_updateGradingCriteria [label = "updateGradingCriteria, Method";shape = box;];
			database_updateGradingCriteria -> database_UpdateAssignments;
			database_GetCourseSubmissions [label = "GetCourseSubmissions, Method";shape = box;];
			database_CreateBenchmark [label = "CreateBenchmark, Method";shape = box;];
			database_UpdateBenchmark [label = "UpdateBenchmark, Method";shape = box;];
			database_DeleteBenchmark [label = "DeleteBenchmark, Method";shape = box;];
			database_CreateCriterion [label = "CreateCriterion, Method";shape = box;];
			database_UpdateCriterion [label = "UpdateCriterion, Method";shape = box;];
			database_DeleteCriterion [label = "DeleteCriterion, Method";shape = box;];
			database_GetBenchmarks [label = "GetBenchmarks, Method";shape = box;];
			database_GetBenchmarks -> database_updateGradingCriteria;
			database_GetBenchmarks -> database_GetAssignmentsByCourse;
		}
		database_CreateAssignment -> database_TestUpdateBenchmarks;
		database_CreateAssignment -> database_TestGormDBCreateAssignmentNoRecord;
		database_CreateAssignment -> database_TestGormDBCreateAssignment;
		database_CreateAssignment -> database_TestUpdateAssignment;
		database_CreateAssignment -> database_TestGormDBGetInsertSubmissions;
		database_CreateAssignment -> database_setupCourseAssignment;
		database_CreateAssignment -> database_TestGormDBGetLastSubmissions;
		database_CreateAssignment -> database_TestGormDBSynchronizeAssignmentTasks;
		database_CreateAssignment -> database_TestGormDBNonExistingTasksForAssignment;
		database_CreateAssignment -> database_TestDBGetInsertGroupSubmissions;
		database_GetAssignment -> database_TestGormDBGetAssignment;
		database_GetAssignment -> database_TestGormDBCreateAssignment;
		database_GetAssignmentsByCourse -> database_TestUpdateAssignment;
		database_GetAssignmentsByCourse -> database_TestGormDBGetAssignment;
		database_GetAssignmentsByCourse -> database_TestUpdateBenchmarks;
		database_GetAssignmentsByCourse -> database_TestGormDBCreateAssignment;
		database_GetAssignmentsByCourse -> database_SynchronizeAssignmentTasks;
		database_GetAssignmentsByCourse -> database_TestGormDBNonExistingTasksForAssignment;
		database_UpdateAssignments -> database_TestUpdateAssignment;
		database_GetCourseSubmissions -> database_TestGetCourseSubmissions;
		database_CreateBenchmark -> database_TestUpdateBenchmarks;
		database_UpdateBenchmark -> database_TestUpdateBenchmarks;
		database_UpdateCriterion -> database_TestUpdateBenchmarks;
		subgraph cluster_gormdb_assignment_test_go {
			label = "gormdb_assignment_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBGetAssignment [label = "TestGormDBGetAssignment, Function";shape = box;];
			database_TestGormDBCreateAssignmentNoRecord [label = "TestGormDBCreateAssignmentNoRecord, Function";shape = box;];
			database_TestGormDBCreateAssignment [label = "TestGormDBCreateAssignment, Function";shape = box;];
			database_TestUpdateAssignment [label = "TestUpdateAssignment, Function";shape = box;];
			database_TestGetCourseSubmissions [label = "TestGetCourseSubmissions, Function";shape = box;];
			database_TestUpdateBenchmarks [label = "TestUpdateBenchmarks, Function";shape = box;];
		}
		subgraph cluster_gormdb_course_go {
			label = "gormdb_course.go";
			labelloc="t";
			rankdir=TB;
			database_CreateCourse [label = "CreateCourse, Method";shape = box;];
			database_GetCourse [label = "GetCourse, Method";shape = box;];
			database_GetCourseByStatus [label = "GetCourseByStatus, Method";shape = box;];
			database_GetCourseByOrganizationID [label = "GetCourseByOrganizationID, Method";shape = box;];
			database_GetCourses [label = "GetCourses, Method";shape = box;];
			database_GetCourses -> database_GetCoursesByUser;
			database_GetCoursesByUser [label = "GetCoursesByUser, Method";shape = box;];
			database_GetCourseTeachers [label = "GetCourseTeachers, Method";shape = box;];
			database_UpdateCourse [label = "UpdateCourse, Method";shape = box;];
		}
		database_CreateCourse -> database_TestGormDBCreateCourseNonAdmin;
		database_CreateCourse -> database_TestGormDBCourseUniqueConstraint;
		database_GetCourse -> database_TestGormDBGetCourse;
		database_GetCourse -> database_TestGormDBGetCourseNoRecord;
		database_GetCourse -> database_TestGormDBUpdateCourse;
		database_GetCourse -> database_TestGormDBCourseUniqueConstraint;
		database_GetCourseByStatus -> database_TestGetCourseByStatus;
		database_GetCourseByOrganizationID -> database_TestGormDBGetCourseByOrganization;
		database_GetCourses -> database_TestGormDBGetCourses;
		database_GetCoursesByUser -> database_TestGormDBGetCoursesByUser;
		database_GetCourseTeachers -> database_TestGetCourseTeachers;
		database_UpdateCourse -> database_TestGormDBUpdateCourse;
		subgraph cluster_gormdb_course_test_go {
			label = "gormdb_course_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBCreateCourse [label = "TestGormDBCreateCourse, Function";shape = box;];
			database_TestGormDBGetCoursesByUser [label = "TestGormDBGetCoursesByUser, Function";shape = box;];
			database_TestGormDBCreateCourseNonAdmin [label = "TestGormDBCreateCourseNonAdmin, Function";shape = box;];
			database_TestGormDBGetCourses [label = "TestGormDBGetCourses, Function";shape = box;];
			database_TestGormDBGetCourse [label = "TestGormDBGetCourse, Function";shape = box;];
			database_TestGormDBGetCourseNoRecord [label = "TestGormDBGetCourseNoRecord, Function";shape = box;];
			database_TestGormDBUpdateCourse [label = "TestGormDBUpdateCourse, Function";shape = box;];
			database_TestGormDBGetCourseByOrganization [label = "TestGormDBGetCourseByOrganization, Function";shape = box;];
			database_TestGormDBCourseUniqueConstraint [label = "TestGormDBCourseUniqueConstraint, Function";shape = box;];
			database_TestGetCourseTeachers [label = "TestGetCourseTeachers, Function";shape = box;];
			database_TestGetCourseByStatus [label = "TestGetCourseByStatus, Function";shape = box;];
		}
		subgraph cluster_gormdb_enrollment_go {
			label = "gormdb_enrollment.go";
			labelloc="t";
			rankdir=TB;
			database_CreateEnrollment [label = "CreateEnrollment, Method";shape = box;];
			database_RejectEnrollment [label = "RejectEnrollment, Method";shape = box;];
			database_UpdateEnrollment [label = "UpdateEnrollment, Method";shape = box;];
			database_GetEnrollmentByCourseAndUser [label = "GetEnrollmentByCourseAndUser, Method";shape = box;];
			database_GetEnrollmentByCourseAndUser -> database_RejectEnrollment;
			database_GetEnrollmentsByCourse [label = "GetEnrollmentsByCourse, Method";shape = box;];
			database_GetEnrollmentsByUser [label = "GetEnrollmentsByUser, Method";shape = box;];
			database_getEnrollments [label = "getEnrollments, Method";shape = box;];
			database_getEnrollments -> database_GetEnrollmentsByCourse;
			database_getEnrollments -> database_GetEnrollmentsByUser;
			database_UpdateSlipDays [label = "UpdateSlipDays, Method";shape = box;];
			database_internalUpdateSlipDays [label = "internalUpdateSlipDays, Method";shape = box;];
			database_internalUpdateSlipDays -> database_UpdateSlipDays;
		}
		database_CreateEnrollment -> database_TestGormDBGetCoursesByUser;
		database_CreateEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_CreateEnrollment -> database_TestGormDBCreateGroupTwice;
		database_CreateEnrollment -> database_TestGetGroupsByCourse;
		database_CreateEnrollment -> database_TestDBCreateEnrollmentNoRecord;
		database_CreateEnrollment -> database_TestDBCreateEnrollment;
		database_CreateEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_CreateEnrollment -> database_TestDBGetInsertGroupSubmissions;
		database_CreateEnrollment -> database_TestDeleteGroup;
		database_RejectEnrollment -> database_TestGormDBGetCoursesByUser;
		database_RejectEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_RejectEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_UpdateEnrollment -> database_TestGormDBGetCoursesByUser;
		database_UpdateEnrollment -> database_TestGormDBCreateAndGetGroup;
		database_UpdateEnrollment -> database_TestGormDBCreateGroupTwice;
		database_UpdateEnrollment -> database_TestGetGroupsByCourse;
		database_UpdateEnrollment -> database_TestDBAcceptRejectEnrollment;
		database_UpdateEnrollment -> database_TestDBGetInsertGroupSubmissions;
		database_UpdateEnrollment -> database_TestDeleteGroup;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBGetCoursesByUser;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateCourse;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateAndGetGroup;
		database_GetEnrollmentByCourseAndUser -> database_TestGormDBCreateGroupTwice;
		database_GetEnrollmentByCourseAndUser -> database_TestGetGroupsByCourse;
		database_GetEnrollmentsByCourse -> database_TestGormDBCreateCourse;
		database_GetEnrollmentsByCourse -> database_TestGormDBCreateAndGetGroup;
		database_GetEnrollmentsByCourse -> database_TestDBAcceptRejectEnrollment;
		database_getEnrollments -> database_GetCoursesByUser;
		subgraph cluster_gormdb_group_go {
			label = "gormdb_group.go";
			labelloc="t";
			rankdir=TB;
			database_CreateGroup [label = "CreateGroup, Method";shape = box;];
			database_UpdateGroup [label = "UpdateGroup, Method";shape = box;];
			database_UpdateGroupStatus [label = "UpdateGroupStatus, Method";shape = box;];
			database_DeleteGroup [label = "DeleteGroup, Method";shape = box;];
			database_GetGroup [label = "GetGroup, Method";shape = box;];
			database_GetGroup -> database_DeleteGroup;
			database_GetGroupsByCourse [label = "GetGroupsByCourse, Method";shape = box;];
		}
		database_CreateGroup -> database_TestGormDBCreateAndGetGroup;
		database_CreateGroup -> database_TestGormDBCreateGroupTwice;
		database_CreateGroup -> database_TestGetGroupsByCourse;
		database_CreateGroup -> database_TestDBGetInsertGroupSubmissions;
		database_CreateGroup -> database_TestDeleteGroup;
		database_UpdateGroupStatus -> database_TestGetGroupsByCourse;
		database_DeleteGroup -> database_TestDeleteGroup;
		database_GetGroup -> database_TestGormDBCreateAndGetGroup;
		database_GetGroup -> database_TestDeleteGroup;
		database_GetGroupsByCourse -> database_TestGetGroupsByCourse;
		subgraph cluster_gormdb_group_test_go {
			label = "gormdb_group_test.go";
			labelloc="t";
			rankdir=TB;
			database_createGroupTests [label = "createGroupTests, Variable";shape = box;];
			database_createGroupTests -> database_TestGormDBCreateAndGetGroup;
			database_groupWithUsers [label = "groupWithUsers, Variable";shape = box;];
			database_groupWithUsers -> database_;
			database_TestGormDBCreateAndGetGroup [label = "TestGormDBCreateAndGetGroup, Function";shape = box;];
			database_TestGormDBCreateGroupTwice [label = "TestGormDBCreateGroupTwice, Function";shape = box;];
			database_TestGetGroupsByCourse [label = "TestGetGroupsByCourse, Function";shape = box;];
		}
		subgraph cluster_gormdb_repository_go {
			label = "gormdb_repository.go";
			labelloc="t";
			rankdir=TB;
			database_CreateRepository [label = "CreateRepository, Method";shape = box;];
			database_GetRepositories [label = "GetRepositories, Method";shape = box;];
			database_DeleteRepository [label = "DeleteRepository, Method";shape = box;];
			database_GetRepositoriesWithIssues [label = "GetRepositoriesWithIssues, Method";shape = box;];
		}
		database_CreateRepository -> database_TestGetRepositoriesByOrganization;
		database_CreateRepository -> database_TestGetRepoByCourseIdUserIdAndType;
		database_CreateRepository -> database_TestGetRepositoryByCourseUser;
		database_CreateRepository -> database_TestGetRepositoriesByCourseIdAndType;
		database_CreateRepository -> database_TestGormDBGetSingleRepoWithUser;
		database_CreateRepository -> database_TestGormDBCreateSingleRepoWithMissingUser;
		database_CreateRepository -> database_TestGormDBGetCourseRepoType;
		database_CreateRepository -> database_TestGormDeleteRepo;
		database_GetRepositories -> database_TestGetRepositoriesByOrganization;
		database_GetRepositories -> database_TestGormDBGetEmptyRepo;
		database_GetRepositories -> database_TestGetRepoByCourseIdUserIdAndType;
		database_GetRepositories -> database_TestGetRepositoryByCourseUser;
		database_GetRepositories -> database_TestGetRepositoriesByCourseIdAndType;
		database_GetRepositories -> database_TestGormDBGetSingleRepoWithUser;
		database_GetRepositories -> database_TestGormDBGetCourseRepoType;
		database_GetRepositories -> database_TestGormDeleteRepo;
		database_DeleteRepository -> database_TestGormDeleteRepo;
		subgraph cluster_gormdb_repository_test_go {
			label = "gormdb_repository_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBGetEmptyRepo [label = "TestGormDBGetEmptyRepo, Function";shape = box;];
			database_TestGormDBGetSingleRepoWithUser [label = "TestGormDBGetSingleRepoWithUser, Function";shape = box;];
			database_TestGormDBCreateSingleRepoWithMissingUser [label = "TestGormDBCreateSingleRepoWithMissingUser, Function";shape = box;];
			database_TestGormDBGetCourseRepoType [label = "TestGormDBGetCourseRepoType, Function";shape = box;];
			database_TestGormDeleteRepo [label = "TestGormDeleteRepo, Function";shape = box;];
			database_TestGetRepositoriesByOrganization [label = "TestGetRepositoriesByOrganization, Function";shape = box;];
			database_TestGetRepoByCourseIdUserIdAndType [label = "TestGetRepoByCourseIdUserIdAndType, Function";shape = box;];
			database_TestGetRepositoryByCourseUser [label = "TestGetRepositoryByCourseUser, Function";shape = box;];
			database_TestGetRepositoriesByCourseIdAndType [label = "TestGetRepositoriesByCourseIdAndType, Function";shape = box;];
		}
		subgraph cluster_gormdb_review_test_go {
			label = "gormdb_review_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestCreateUpdateReview [label = "TestCreateUpdateReview, Function";shape = box;];
			database_updateSubmission [label = "updateSubmission, Function";shape = box;];
			database_updateSubmission -> database_TestCreateUpdateReview;
		}
		subgraph cluster_gormdb_submission_go {
			label = "gormdb_submission.go";
			labelloc="t";
			rankdir=TB;
			database_ErrInvalidSubmission [label = "ErrInvalidSubmission, Variable";shape = box;];
			database_ErrInvalidSubmission -> database_check;
			database_ErrInvalidAssignmentID [label = "ErrInvalidAssignmentID, Variable";shape = box;];
			database_ErrInvalidAssignmentID -> database_check;
			database_CreateSubmission [label = "CreateSubmission, Method";shape = box;];
			database_check [label = "check, Method";shape = box;];
			database_check -> database_CreateSubmission;
			database_GetSubmission [label = "GetSubmission, Method";shape = box;];
			database_GetSubmission -> database_GetLastSubmission;
			database_GetSubmission -> database_GetLastSubmissions;
			database_GetLastSubmission [label = "GetLastSubmission, Method";shape = box;];
			database_GetLastSubmissions [label = "GetLastSubmissions, Method";shape = box;];
			database_GetSubmissions [label = "GetSubmissions, Method";shape = box;];
			database_UpdateSubmission [label = "UpdateSubmission, Method";shape = box;];
			database_UpdateSubmissions [label = "UpdateSubmissions, Method";shape = box;];
			database_GetReview [label = "GetReview, Method";shape = box;];
			database_CreateReview [label = "CreateReview, Method";shape = box;];
			database_UpdateReview [label = "UpdateReview, Method";shape = box;];
			database_DeleteReview [label = "DeleteReview, Method";shape = box;];
		}
		database_ErrInvalidSubmission -> database_TestGormDBInsertBadSubmissions;
		database_ErrInvalidAssignmentID -> database_TestGormDBInsertBadSubmissions;
		database_CreateSubmission -> database_TestGetCourseSubmissions;
		database_CreateSubmission -> database_TestCreateUpdateReview;
		database_CreateSubmission -> database_TestGormDBUpdateSubmission;
		database_CreateSubmission -> database_TestGormDBInsertSubmissions;
		database_CreateSubmission -> database_TestGormDBInsertBadSubmissions;
		database_CreateSubmission -> database_TestGormDBGetInsertSubmissions;
		database_CreateSubmission -> database_TestGormDBCreateUpdateWithBuildInfoAndScores;
		database_CreateSubmission -> database_TestGormDBSubmissionWithBuildDate;
		database_CreateSubmission -> database_TestGormDBUpdateSubmissionZeroScore;
		database_CreateSubmission -> database_TestGormDBGetLastSubmissions;
		database_CreateSubmission -> database_TestGormDBRemoveTest;
		database_CreateSubmission -> database_TestDBGetInsertGroupSubmissions;
		database_GetSubmission -> database_updateSubmission;
		database_GetSubmission -> database_TestGormDBGetSubmissionForUser;
		database_GetSubmission -> database_TestGormDBSubmissionWithBuildDate;
		database_GetLastSubmission -> database_TestGormDBGetLastSubmissions;
		database_GetLastSubmissions -> database_TestCreateUpdateReview;
		database_GetLastSubmissions -> database_TestGormDBUpdateSubmission;
		database_GetLastSubmissions -> database_TestGormDBGetNonExistingSubmissions;
		database_GetLastSubmissions -> database_TestGormDBInsertSubmissions;
		database_GetLastSubmissions -> database_TestGormDBGetInsertSubmissions;
		database_GetLastSubmissions -> database_TestGormDBCreateUpdateWithBuildInfoAndScores;
		database_GetLastSubmissions -> database_TestGormDBSubmissionWithBuildDate;
		database_GetLastSubmissions -> database_TestGormDBUpdateSubmissionZeroScore;
		database_GetLastSubmissions -> database_TestGormDBRemoveTest;
		database_GetLastSubmissions -> database_TestDBGetGroupSubmissions;
		database_GetLastSubmissions -> database_TestDBGetInsertGroupSubmissions;
		database_UpdateSubmission -> database_TestGormDBUpdateSubmission;
		database_UpdateReview -> database_updateSubmission;
		subgraph cluster_gormdb_submission_test_go {
			label = "gormdb_submission_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBGetSubmissionForUser [label = "TestGormDBGetSubmissionForUser, Function";shape = box;];
			database_setupCourseAssignment [label = "setupCourseAssignment, Function";shape = box;];
			database_setupCourseAssignment -> database_TestGormDBUpdateSubmission;
			database_setupCourseAssignment -> database_TestGormDBInsertSubmissions;
			database_setupCourseAssignment -> database_TestGormDBInsertBadSubmissions;
			database_setupCourseAssignment -> database_TestGormDBCreateUpdateWithBuildInfoAndScores;
			database_setupCourseAssignment -> database_TestGormDBSubmissionWithBuildDate;
			database_setupCourseAssignment -> database_TestGormDBUpdateSubmissionZeroScore;
			database_TestGormDBUpdateSubmissionZeroScore [label = "TestGormDBUpdateSubmissionZeroScore, Function";shape = box;];
			database_TestGormDBUpdateSubmission [label = "TestGormDBUpdateSubmission, Function";shape = box;];
			database_TestGormDBGetNonExistingSubmissions [label = "TestGormDBGetNonExistingSubmissions, Function";shape = box;];
			database_TestGormDBInsertSubmissions [label = "TestGormDBInsertSubmissions, Function";shape = box;];
			database_TestGormDBInsertBadSubmissions [label = "TestGormDBInsertBadSubmissions, Function";shape = box;];
			database_TestGormDBGetInsertSubmissions [label = "TestGormDBGetInsertSubmissions, Function";shape = box;];
			database_TestGormDBCreateUpdateWithBuildInfoAndScores [label = "TestGormDBCreateUpdateWithBuildInfoAndScores, Function";shape = box;];
			database_TestGormDBSubmissionWithBuildDate [label = "TestGormDBSubmissionWithBuildDate, Function";shape = box;];
			database_TestGormDBGetLastSubmissions [label = "TestGormDBGetLastSubmissions, Function";shape = box;];
		}
		database_setupCourseAssignment -> database_TestGetCourseSubmissions;
		database_setupCourseAssignment -> database_TestCreateUpdateReview;
		database_setupCourseAssignment -> database_TestGormDBRemoveTest;
		subgraph cluster_gormdb_submission_testremove_test_go {
			label = "gormdb_submission_testremove_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBRemoveTest [label = "TestGormDBRemoveTest, Function";shape = box;];
		}
		subgraph cluster_gormdb_tasks_go {
			label = "gormdb_tasks.go";
			labelloc="t";
			rankdir=TB;
			database_GetTasks [label = "GetTasks, Method";shape = box;];
			database_CreateIssues [label = "CreateIssues, Method";shape = box;];
			database_SynchronizeAssignmentTasks [label = "SynchronizeAssignmentTasks, Method";shape = box;];
			database_CreatePullRequest [label = "CreatePullRequest, Method";shape = box;];
			database_GetPullRequest [label = "GetPullRequest, Method";shape = box;];
			database_HandleMergingPR [label = "HandleMergingPR, Method";shape = box;];
			database_UpdatePullRequest [label = "UpdatePullRequest, Method";shape = box;];
		}
		database_GetTasks -> database_TestGormDBSynchronizeAssignmentTasks;
		database_GetTasks -> database_TestGormDBNonExistingTasksForAssignment;
		database_SynchronizeAssignmentTasks -> database_TestGormDBSynchronizeAssignmentTasks;
		subgraph cluster_gormdb_tasks_test_go {
			label = "gormdb_tasks_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGormDBNonExistingTasksForAssignment [label = "TestGormDBNonExistingTasksForAssignment, Function";shape = box;];
			database_TestGormDBSynchronizeAssignmentTasks [label = "TestGormDBSynchronizeAssignmentTasks, Function";shape = box;];
		}
		subgraph cluster_gormdb_test_go {
			label = "gormdb_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestDBGetUser [label = "TestDBGetUser, Function";shape = box;];
			database_TestDBGetUsers [label = "TestDBGetUsers, Function";shape = box;];
			database_TestDBGetUserWithEnrollments [label = "TestDBGetUserWithEnrollments, Function";shape = box;];
			database_TestDBUpdateUser [label = "TestDBUpdateUser, Function";shape = box;];
			database_TestDBCreateEnrollmentNoRecord [label = "TestDBCreateEnrollmentNoRecord, Function";shape = box;];
			database_TestDBCreateEnrollment [label = "TestDBCreateEnrollment, Function";shape = box;];
			database_TestDBAcceptRejectEnrollment [label = "TestDBAcceptRejectEnrollment, Function";shape = box;];
			database_TestDBDuplicateIdentity [label = "TestDBDuplicateIdentity, Function";shape = box;];
			database_TestDBSetAdminNoRecord [label = "TestDBSetAdminNoRecord, Function";shape = box;];
			database_TestDBSetAdmin [label = "TestDBSetAdmin, Function";shape = box;];
			database_TestDBGetGroupSubmissions [label = "TestDBGetGroupSubmissions, Function";shape = box;];
			database_TestDBGetInsertGroupSubmissions [label = "TestDBGetInsertGroupSubmissions, Function";shape = box;];
			database_TestDeleteGroup [label = "TestDeleteGroup, Function";shape = box;];
		}
		subgraph cluster_gormdb_user_go {
			label = "gormdb_user.go";
			labelloc="t";
			rankdir=TB;
			database_CreateUser [label = "CreateUser, Method";shape = box;];
			database_GetUser [label = "GetUser, Method";shape = box;];
			database_GetUserByRemoteIdentity [label = "GetUserByRemoteIdentity, Method";shape = box;];
			database_GetUserByCourse [label = "GetUserByCourse, Method";shape = box;];
			database_GetUserWithEnrollments [label = "GetUserWithEnrollments, Method";shape = box;];
			database_GetUsers [label = "GetUsers, Method";shape = box;];
			database_UpdateUser [label = "UpdateUser, Method";shape = box;];
			database_UpdateUser -> database_CreateUser;
		}
		database_CreateUser -> database_TestDBUpdateUserAccessToken;
		database_CreateUser -> database_TestGetCourseTeachers;
		database_CreateUser -> database_TestDBUpdateUser;
		database_CreateUser -> database_TestDBDuplicateIdentity;
		database_CreateUser -> database_TestDBSetAdmin;
		database_CreateUser -> database_TestGetUserByCourse;
		database_GetUser -> database_TestDBUpdateAccessTokenUserGetAccessToken;
		database_GetUser -> database_TestDBUpdateUserAccessToken;
		database_GetUser -> database_CreateCourse;
		database_GetUser -> database_GetCourseTeachers;
		database_GetUser -> database_TestDBUpdateUser;
		database_GetUser -> database_TestDBGetUser;
		database_GetUser -> database_TestDBSetAdmin;
		database_GetUserByCourse -> database_TestGetUserByCourse;
		database_GetUserWithEnrollments -> database_TestDBGetUserWithEnrollments;
		database_GetUsers -> database_TestGormDBCreateAndGetGroup;
		database_GetUsers -> database_TestDBGetUsers;
		database_UpdateUser -> database_TestDBUpdateAccessTokenUserGetAccessToken;
		database_UpdateUser -> database_TestDBUpdateUserAccessToken;
		database_UpdateUser -> database_TestDBUpdateUser;
		database_UpdateUser -> database_TestDBSetAdminNoRecord;
		database_UpdateUser -> database_TestDBSetAdmin;
		subgraph cluster_gormdb_user_test_go {
			label = "gormdb_user_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestGetUserByCourse [label = "TestGetUserByCourse, Function";shape = box;];
		}
		subgraph cluster_logger_go {
			label = "logger.go";
			labelloc="t";
			rankdir=TB;
			database_NewGORMLogger [label = "NewGORMLogger, Function";shape = box;];
			database_Logger [label = "Logger, Struct";shape = box;];
			database_Logger -> database_Trace;
			database_Logger -> database_NewGORMLogger;
			database_Logger -> database_LogMode;
			database_Logger -> database_Info;
			database_Logger -> database_Warn;
			database_Logger -> database_Error;
			database_IgnoreRecordNotFoundError [label = "IgnoreRecordNotFoundError, Field";shape = box;];
			database_IgnoreRecordNotFoundError -> database_NewGORMLogger;
			database_IgnoreRecordNotFoundError -> database_LogMode;
			database_IgnoreRecordNotFoundError -> database_Trace;
			database_LogLevel [label = "LogLevel, Field";shape = box;];
			database_LogLevel -> database_NewGORMLogger;
			database_LogLevel -> database_LogMode;
			database_LogLevel -> database_Info;
			database_LogLevel -> database_Warn;
			database_LogLevel -> database_Error;
			database_LogLevel -> database_Trace;
			database_SlowThreshold [label = "SlowThreshold, Field";shape = box;];
			database_SlowThreshold -> database_NewGORMLogger;
			database_SlowThreshold -> database_LogMode;
			database_SlowThreshold -> database_Trace;
			database_ZapLogger [label = "ZapLogger, Field";shape = box;];
			database_ZapLogger -> database_logger;
			database_ZapLogger -> database_NewGORMLogger;
			database_ZapLogger -> database_LogMode;
			database_LogMode [label = "LogMode, Method";shape = box;];
			database_Info [label = "Info, Method";shape = box;];
			database_Warn [label = "Warn, Method";shape = box;];
			database_Error [label = "Error, Method";shape = box;];
			database_Trace [label = "Trace, Method";shape = box;];
			database_gormPackage [label = "gormPackage, Variable";shape = box;];
			database_gormPackage -> database_logger;
			database_quickfeedPackage [label = "quickfeedPackage, Variable";shape = box;];
			database_quickfeedPackage -> database_logger;
			database_logger [label = "logger, Method";shape = box;];
			database_logger -> database_Info;
			database_logger -> database_Warn;
			database_logger -> database_Error;
			database_logger -> database_Trace;
		}
		database_NewGORMLogger -> database_NewGormDB;
		subgraph cluster_timestamp_go {
			label = "timestamp.go";
			labelloc="t";
			rankdir=TB;
			database_ErrUnsupportedType [label = "ErrUnsupportedType, Variable";shape = box;];
			database_ErrUnsupportedType -> database_Value;
			database_ErrUnsupportedType -> database_Scan;
			database_TimestampSerializer [label = "TimestampSerializer, Struct";shape = box;];
			database_TimestampSerializer -> database_;
			database_TimestampSerializer -> database_Value;
			database_Value [label = "Value, Method";shape = box;];
			database_Scan [label = "Scan, Method";shape = box;];
		}
		database_TimestampSerializer -> database_NewGormDB;
		database_TimestampSerializer -> database_TestTimestampSerializer_Value;
		database_TimestampSerializer -> database_TestTimestampSerializer_Nil_Value;
		database_TimestampSerializer -> database_TestTimestampSerializer_Scan;
		database_Value -> database_TestTimestampSerializer_Value;
		database_Value -> database_TestTimestampSerializer_Nil_Value;
		database_Scan -> database_TestTimestampSerializer_Scan;
		subgraph cluster_timestamp_test_go {
			label = "timestamp_test.go";
			labelloc="t";
			rankdir=TB;
			database_TestTimestampSerializer_Value [label = "TestTimestampSerializer_Value, Function";shape = box;];
			database_TestTimestampSerializer_Nil_Value [label = "TestTimestampSerializer_Nil_Value, Function";shape = box;];
			database_TestTimestampSerializer_Scan [label = "TestTimestampSerializer_Scan, Function";shape = box;];
		}
	}
	subgraph cluster_internal {
		label = "internal (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_cert {
		label = "cert (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_add_cert_go {
			label = "add_cert.go";
			labelloc="t";
			rankdir=TB;
			cert_AddTrustedCert [label = "AddTrustedCert, Function";shape = box;];
		}
		subgraph cluster_add_cert_darwin_go {
			label = "add_cert_darwin.go";
			labelloc="t";
			rankdir=TB;
			cert_AddTrustedCert [label = "AddTrustedCert, Function";shape = box;];
		}
		subgraph cluster_add_cert_linux_go {
			label = "add_cert_linux.go";
			labelloc="t";
			rankdir=TB;
			cert_AddTrustedCert [label = "AddTrustedCert, Function";shape = box;];
		}
		subgraph cluster_add_cert_windows_go {
			label = "add_cert_windows.go";
			labelloc="t";
			rankdir=TB;
			cert_AddTrustedCert [label = "AddTrustedCert, Function";shape = box;];
		}
		subgraph cluster_gen_certs_go {
			label = "gen_certs.go";
			labelloc="t";
			rankdir=TB;
			cert_Options [label = "Options, Struct";shape = box;];
			cert_Options -> cert_generateKeys;
			cert_Options -> cert_;
			cert_Options -> cert_GenerateSelfSignedCert;
			cert_CertFile [label = "CertFile, Field";shape = box;];
			cert_CertFile -> cert_GenerateSelfSignedCert;
			cert_Hosts [label = "Hosts, Field";shape = box;];
			cert_Hosts -> cert_GenerateSelfSignedCert;
			cert_KeyFile [label = "KeyFile, Field";shape = box;];
			cert_KeyFile -> cert_GenerateSelfSignedCert;
			cert_KeyType [label = "KeyType, Field";shape = box;];
			cert_KeyType -> cert_generateKeys;
			cert_ValidFor [label = "ValidFor, Field";shape = box;];
			cert_ValidFor -> cert_certPeriod;
			cert_ValidFrom [label = "ValidFrom, Field";shape = box;];
			cert_ValidFrom -> cert_certPeriod;
			cert_GenerateSelfSignedCert [label = "GenerateSelfSignedCert, Function";shape = box;];
			cert_generateKeys [label = "generateKeys, Function";shape = box;];
			cert_generateKeys -> cert_GenerateSelfSignedCert;
			cert_certPeriod [label = "certPeriod, Function";shape = box;];
			cert_certPeriod -> cert_GenerateSelfSignedCert;
			cert_serverCertificateTemplate [label = "serverCertificateTemplate, Function";shape = box;];
			cert_serverCertificateTemplate -> cert_GenerateSelfSignedCert;
			cert_caCertificateTemplate [label = "caCertificateTemplate, Function";shape = box;];
			cert_caCertificateTemplate -> cert_GenerateSelfSignedCert;
			cert_serialNumber [label = "serialNumber, Function";shape = box;];
			cert_serialNumber -> cert_serverCertificateTemplate;
			cert_serialNumber -> cert_caCertificateTemplate;
			cert_setHosts [label = "setHosts, Function";shape = box;];
			cert_setHosts -> cert_serverCertificateTemplate;
			cert_setHosts -> cert_caCertificateTemplate;
			cert_makeCertificate [label = "makeCertificate, Function";shape = box;];
			cert_makeCertificate -> cert_GenerateSelfSignedCert;
			cert_defaultFileFlags [label = "defaultFileFlags, Constant";shape = box;];
			cert_defaultFileFlags -> cert_savePEM;
			cert_savePEM [label = "savePEM, Function";shape = box;];
			cert_savePEM -> cert_GenerateSelfSignedCert;
			cert_publicKey [label = "publicKey, Function";shape = box;];
			cert_publicKey -> cert_GenerateSelfSignedCert;
		}
	}
	subgraph cluster_config {
		label = "config (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_env {
		label = "env (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_cert_go {
			label = "cert.go";
			labelloc="t";
			rankdir=TB;
			env_defaultDomain [label = "defaultDomain, Constant";shape = box;];
			env_defaultDomain -> env_Domain;
			env_defaultCertFile [label = "defaultCertFile, Constant";shape = box;];
			env_defaultCertFile -> env_CertFile;
			env_defaultKeyFile [label = "defaultKeyFile, Constant";shape = box;];
			env_defaultKeyFile -> env_KeyFile;
			env_Domain [label = "Domain, Function";shape = box;];
			env_Domain -> env_CertFile;
			env_Domain -> env_KeyFile;
			env_Whitelist [label = "Whitelist, Function";shape = box;];
			env_CertFile [label = "CertFile, Function";shape = box;];
			env_KeyFile [label = "KeyFile, Function";shape = box;];
			env_CertPath [label = "CertPath, Function";shape = box;];
			env_CertPath -> env_CertFile;
			env_CertPath -> env_KeyFile;
			env_IsLocal [label = "IsLocal, Function";shape = box;];
			env_IsLocal -> env_Whitelist;
		}
		env_Whitelist -> env_TestWhitelist;
		env_IsLocal -> env_TestIsLocal;
		subgraph cluster_env_test_go {
			label = "env_test.go";
			labelloc="t";
			rankdir=TB;
			env_TestScmProviderEnv [label = "TestScmProviderEnv, Function";shape = box;];
			env_TestLoad [label = "TestLoad, Function";shape = box;];
			env_TestExistsLogic [label = "TestExistsLogic, Function";shape = box;];
			env_TestSave [label = "TestSave, Function";shape = box;];
			env_TestWhitelist [label = "TestWhitelist, Function";shape = box;];
		}
		subgraph cluster_ip_test_go {
			label = "ip_test.go";
			labelloc="t";
			rankdir=TB;
			env_TestIsLocal [label = "TestIsLocal, Function";shape = box;];
		}
		subgraph cluster_load_go {
			label = "load.go";
			labelloc="t";
			rankdir=TB;
			env_Load [label = "Load, Function";shape = box;];
			env_ignore [label = "ignore, Function";shape = box;];
			env_ignore -> env_Load;
		}
		env_Load -> env_TestSave;
		env_Load -> env_TestLoad;
		subgraph cluster_path_go {
			label = "path.go";
			labelloc="t";
			rankdir=TB;
			env_quickfeedRoot [label = "quickfeedRoot, Variable";shape = box;];
			env_quickfeedRoot -> env_init;
			env_quickfeedRoot -> env_Root;
			env_quickfeedRoot -> env_setRoot;
			env_quickfeedModulePath [label = "quickfeedModulePath, Constant";shape = box;];
			env_quickfeedModulePath -> env_checkModulePath;
			env_init [label = "init, Function";shape = box;];
			env_Root [label = "Root, Function";shape = box;];
			env_Root -> env_TestdataPath;
			env_Root -> env_RootEnv;
			env_Root -> env_PublicEnv;
			env_Root -> env_PublicDir;
			env_Root -> env_DatabasePath;
			env_setRoot [label = "setRoot, Function";shape = box;];
			env_setRoot -> env_Root;
			env_gitRoot [label = "gitRoot, Function";shape = box;];
			env_gitRoot -> env_setRoot;
			env_checkModulePath [label = "checkModulePath, Function";shape = box;];
			env_checkModulePath -> env_setRoot;
			env_RootEnv [label = "RootEnv, Function";shape = box;];
			env_PublicEnv [label = "PublicEnv, Function";shape = box;];
			env_PublicDir [label = "PublicDir, Function";shape = box;];
			env_DatabasePath [label = "DatabasePath, Function";shape = box;];
			env_TestdataPath [label = "TestdataPath, Function";shape = box;];
		}
		env_quickfeedRoot -> env_TestRoot;
		env_quickfeedRoot -> env_TestSetRootWorkingDirOutside;
		env_quickfeedRoot -> env_TestSetRootWrongGitRepo;
		env_Root -> env_CertPath;
		env_Root -> env_TestRoot;
		env_Root -> env_AppKey;
		env_setRoot -> env_TestSetRootWrongGitRepo;
		env_setRoot -> env_TestSetRoot;
		env_setRoot -> env_TestSetRootWorkingDirOutside;
		subgraph cluster_path_test_go {
			label = "path_test.go";
			labelloc="t";
			rankdir=TB;
			env_TestRoot [label = "TestRoot, Function";shape = box;];
			env_TestSetRoot [label = "TestSetRoot, Function";shape = box;];
			env_TestSetRootWorkingDirOutside [label = "TestSetRootWorkingDirOutside, Function";shape = box;];
			env_TestSetRootWrongGitRepo [label = "TestSetRootWrongGitRepo, Function";shape = box;];
		}
		subgraph cluster_save_go {
			label = "save.go";
			labelloc="t";
			rankdir=TB;
			env_Prepared [label = "Prepared, Function";shape = box;];
			env_Save [label = "Save, Function";shape = box;];
			env_load [label = "load, Function";shape = box;];
			env_load -> env_Save;
			env_update [label = "update, Function";shape = box;];
			env_update -> env_Save;
			env_exists [label = "exists, Function";shape = box;];
			env_exists -> env_Prepared;
			env_exists -> env_Save;
			env_backupExistsError [label = "backupExistsError, Struct";shape = box;];
			env_backupExistsError -> env_ExistsError;
			env_filename [label = "filename, Field";shape = box;];
			env_filename -> env_ExistsError;
			env_filename -> env_Error;
			env_ExistsError [label = "ExistsError, Function";shape = box;];
			env_ExistsError -> env_Prepared;
			env_Error [label = "Error, Method";shape = box;];
			env_missingEnvError [label = "missingEnvError, Struct";shape = box;];
			env_missingEnvError -> env_MissingError;
			env_filename [label = "filename, Field";shape = box;];
			env_filename -> env_MissingError;
			env_filename -> env_Error;
			env_MissingError [label = "MissingError, Function";shape = box;];
			env_MissingError -> env_Prepared;
			env_Error [label = "Error, Method";shape = box;];
		}
		env_Prepared -> env_TestExistsLogic;
		env_Save -> env_TestSave;
		env_ExistsError -> env_TestExistsLogic;
		env_MissingError -> env_TestExistsLogic;
		subgraph cluster_scm_go {
			label = "scm.go";
			labelloc="t";
			rankdir=TB;
			env_defaultProvider [label = "defaultProvider, Constant";shape = box;];
			env_defaultProvider -> env_init;
			env_defaultAppName [label = "defaultAppName, Constant";shape = box;];
			env_defaultAppName -> env_AppName;
			env_defaultKeyPath [label = "defaultKeyPath, Constant";shape = box;];
			env_defaultKeyPath -> env_AppKey;
			env_defaultRepositoryPath [label = "defaultRepositoryPath, Constant";shape = box;];
			env_defaultRepositoryPath -> env_RepositoryPath;
			env_provider [label = "provider, Variable";shape = box;];
			env_provider -> env_init;
			env_provider -> env_ScmProvider;
			env_provider -> env_ClientID;
			env_provider -> env_ClientSecret;
			env_provider -> env_AppID;
			env_provider -> env_SetFakeProvider;
			env_init [label = "init, Function";shape = box;];
			env_ScmProvider [label = "ScmProvider, Function";shape = box;];
			env_RepositoryPath [label = "RepositoryPath, Function";shape = box;];
			env_ClientID [label = "ClientID, Function";shape = box;];
			env_ClientSecret [label = "ClientSecret, Function";shape = box;];
			env_AppID [label = "AppID, Function";shape = box;];
			env_AppID -> env_HasAppID;
			env_AppKey [label = "AppKey, Function";shape = box;];
			env_AppName [label = "AppName, Function";shape = box;];
			env_GetAccessToken [label = "GetAccessToken, Function";shape = box;];
			env_SetFakeProvider [label = "SetFakeProvider, Function";shape = box;];
			env_HasAppID [label = "HasAppID, Function";shape = box;];
		}
		env_ScmProvider -> env_TestScmProviderEnv;
		env_SetFakeProvider -> env_TestScmProviderEnv;
	}
	subgraph cluster_fileop {
		label = "fileop (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_copy_dir_go {
			label = "copy_dir.go";
			labelloc="t";
			rankdir=TB;
			fileop_CopyDir [label = "CopyDir, Function";shape = box;];
			fileop_copyFile [label = "copyFile, Function";shape = box;];
			fileop_copyFile -> fileop_CopyDir;
		}
	}
	subgraph cluster_qlog {
		label = "qlog (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_indented_go {
			label = "indented.go";
			labelloc="t";
			rankdir=TB;
			qlog_IndentJson [label = "IndentJson, Function";shape = box;];
		}
		subgraph cluster_logger_go {
			label = "logger.go";
			labelloc="t";
			rankdir=TB;
			qlog_Zap [label = "Zap, Function";shape = box;];
		}
	}
	subgraph cluster_qtest {
		label = "qtest (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_logger_helper_go {
			label = "logger_helper.go";
			labelloc="t";
			rankdir=TB;
			qtest_Logger [label = "Logger, Function";shape = box;];
		}
		qtest_Logger -> qtest_TestDB;
		subgraph cluster_mock_data_go {
			label = "mock_data.go";
			labelloc="t";
			rankdir=TB;
			qtest_MockOrg [label = "MockOrg, Constant";shape = box;];
			qtest_MockOrg -> qtest_;
			qtest_MockCourses [label = "MockCourses, Variable";shape = box;];
		}
		subgraph cluster_mock_stream_go {
			label = "mock_stream.go";
			labelloc="t";
			rankdir=TB;
			qtest_MockStream [label = "MockStream, Struct";shape = box;];
			qtest_MockStream -> qtest_;
			qtest_MockStream -> qtest_NewMockStream;
			qtest_MockStream -> qtest_Run;
			qtest_MockStream -> qtest_GetChannel;
			qtest_MockStream -> qtest_Send;
			qtest_MockStream -> qtest_Close;
			qtest_MessageMap [label = "MessageMap, Field";shape = box;];
			qtest_MessageMap -> qtest_NewMockStream;
			qtest_Messages [label = "Messages, Field";shape = box;];
			qtest_Messages -> qtest_NewMockStream;
			qtest_Messages -> qtest_Run;
			qtest_ch [label = "ch, Field";shape = box;];
			qtest_ch -> qtest_NewMockStream;
			qtest_ch -> qtest_Run;
			qtest_ch -> qtest_GetChannel;
			qtest_ch -> qtest_Send;
			qtest_ch -> qtest_Close;
			qtest_closed [label = "closed, Field";shape = box;];
			qtest_closed -> qtest_NewMockStream;
			qtest_closed -> qtest_Send;
			qtest_closed -> qtest_Close;
			qtest_counter [label = "counter, Field";shape = box;];
			qtest_counter -> qtest_NewMockStream;
			qtest_counter -> qtest_Run;
			qtest_counter -> qtest_SetCounter;
			qtest_ctx [label = "ctx, Field";shape = box;];
			qtest_ctx -> qtest_NewMockStream;
			qtest_ctx -> qtest_Run;
			qtest_mu [label = "mu, Field";shape = box;];
			qtest_mu -> qtest_Send;
			qtest_mu -> qtest_Close;
			qtest_NewMockStream [label = "NewMockStream, Function";shape = box;];
			qtest_Run [label = "Run, Method";shape = box;];
			qtest_GetChannel [label = "GetChannel, Method";shape = box;];
			qtest_Send [label = "Send, Method";shape = box;];
			qtest_Close [label = "Close, Method";shape = box;];
			qtest_SetCounter [label = "SetCounter, Method";shape = box;];
		}
		subgraph cluster_test_helper_go {
			label = "test_helper.go";
			labelloc="t";
			rankdir=TB;
			qtest_TestDB [label = "TestDB, Function";shape = box;];
			qtest_CreateFakeUser [label = "CreateFakeUser, Function";shape = box;];
			qtest_CreateFakeCustomUser [label = "CreateFakeCustomUser, Function";shape = box;];
			qtest_CreateCourse [label = "CreateCourse, Function";shape = box;];
			qtest_EnrollStudent [label = "EnrollStudent, Function";shape = box;];
			qtest_EnrollTeacher [label = "EnrollTeacher, Function";shape = box;];
			qtest_EnrollUser [label = "EnrollUser, Function";shape = box;];
			qtest_RandomString [label = "RandomString, Function";shape = box;];
			qtest_RequestWithCookie [label = "RequestWithCookie, Function";shape = box;];
			qtest_Ptr [label = "Ptr, Function";shape = box;];
		}
		subgraph cluster_testname_go {
			label = "testname.go";
			labelloc="t";
			rankdir=TB;
			qtest_Name [label = "Name, Function";shape = box;];
		}
		subgraph cluster_timestamp_helper_go {
			label = "timestamp_helper.go";
			labelloc="t";
			rankdir=TB;
			qtest_Timestamp [label = "Timestamp, Function";shape = box;];
		}
	}
	subgraph cluster_rand {
		label = "rand (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_rand_go {
			label = "rand.go";
			labelloc="t";
			rankdir=TB;
			rand_String [label = "String, Function";shape = box;];
		}
	}
	subgraph cluster_public {
		label = "public (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_assets {
		label = "assets (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_proto {
		label = "proto (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_qf {
		label = "qf (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_quickfeed_connectweb_ts {
			label = "quickfeed_connectweb.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_requests_pb_ts {
			label = "requests_pb.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_types_pb_ts {
			label = "types_pb.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_kit {
		label = "kit (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_score {
		label = "score (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_score_pb_ts {
			label = "score_pb.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_src {
		label = "src (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_App_tsx {
			label = "App.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Helpers_ts {
			label = "Helpers.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_client_ts {
			label = "client.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_consts_ts {
			label = "consts.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_index_tsx {
			label = "index.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_streamService_ts {
			label = "streamService.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_components {
		label = "components (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Card_tsx {
			label = "Card.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ComponentsHelpers_ts {
			label = "ComponentsHelpers.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseBanner_tsx {
			label = "CourseBanner.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseCard_tsx {
			label = "CourseCard.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseFavoriteButton_tsx {
			label = "CourseFavoriteButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseLinks_tsx {
			label = "CourseLinks.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Courses_tsx {
			label = "Courses.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Dashboard_tsx {
			label = "Dashboard.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_DynamicButton_tsx {
			label = "DynamicButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_DynamicTable_tsx {
			label = "DynamicTable.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Groups_tsx {
			label = "Groups.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Lab_tsx {
			label = "Lab.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_LabResult_tsx {
			label = "LabResult.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_LabResultTable_tsx {
			label = "LabResultTable.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Loading_tsx {
			label = "Loading.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ManageSubmissionStatus_tsx {
			label = "ManageSubmissionStatus.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Members_tsx {
			label = "Members.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBar_tsx {
			label = "NavBar.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavFavorites_tsx {
			label = "NavFavorites.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProgressBar_tsx {
			label = "ProgressBar.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_RedirectButton_tsx {
			label = "RedirectButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Release_tsx {
			label = "Release.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Results_tsx {
			label = "Results.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ReviewResult_tsx {
			label = "ReviewResult.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Search_tsx {
			label = "Search.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_UnstyledButton_tsx {
			label = "UnstyledButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_teacher {
		label = "teacher (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Assignments_tsx {
			label = "Assignments.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_EditBenchmark_tsx {
			label = "EditBenchmark.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_EditCriterion_tsx {
			label = "EditCriterion.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_RoleSwitch_tsx {
			label = "RoleSwitch.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_admin {
		label = "admin (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Button_tsx {
			label = "Button.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseCreationInfo_tsx {
			label = "CourseCreationInfo.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CreateCourse_tsx {
			label = "CreateCourse.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_EditCourse_tsx {
			label = "EditCourse.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_User_tsx {
			label = "User.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Users_tsx {
			label = "Users.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_dashboard {
		label = "dashboard (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_SubmissionsTable_tsx {
			label = "SubmissionsTable.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_navbar_buttons {
		label = "navbar-buttons (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_AboutButton_tsx {
			label = "AboutButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_AdminButton_tsx {
			label = "AdminButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_LogoutButton_tsx {
			label = "LogoutButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProfileButton_tsx {
			label = "ProfileButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_profile {
		label = "profile (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Profile_tsx {
			label = "Profile.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProfileCard_tsx {
			label = "ProfileCard.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProfileForm_tsx {
			label = "ProfileForm.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProfileInfo_tsx {
			label = "ProfileInfo.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SignupText_tsx {
			label = "SignupText.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_student {
		label = "student (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_AssignmentCard_tsx {
			label = "AssignmentCard.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseLabs_tsx {
			label = "CourseLabs.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SubmissionRow_tsx {
			label = "SubmissionRow.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SubmissionTypeIcon_tsx {
			label = "SubmissionTypeIcon.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_submissions {
		label = "submissions (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_SubmissionInfo_tsx {
			label = "SubmissionInfo.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SubmissionScore_tsx {
			label = "SubmissionScore.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SubmissionScores_tsx {
			label = "SubmissionScores.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_alerts {
		label = "alerts (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Alert_tsx {
			label = "Alert.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Alerts_tsx {
			label = "Alerts.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_forms {
		label = "forms (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_CourseForm_tsx {
			label = "CourseForm.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_FormInput_tsx {
			label = "FormInput.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_TableSort_tsx {
			label = "TableSort.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_group {
		label = "group (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Group_tsx {
			label = "Group.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_GroupForm_tsx {
			label = "GroupForm.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_manual_grading {
		label = "manual-grading (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Benchmark_tsx {
			label = "Benchmark.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Comment_tsx {
			label = "Comment.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CriteriaStatus_tsx {
			label = "CriteriaStatus.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Criterion_tsx {
			label = "Criterion.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_GradeComment_tsx {
			label = "GradeComment.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_MarkReadyButton_tsx {
			label = "MarkReadyButton.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ReviewForm_tsx {
			label = "ReviewForm.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ReviewInfo_tsx {
			label = "ReviewInfo.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_SummaryFeedback_tsx {
			label = "SummaryFeedback.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_navbar {
		label = "navbar (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_Breadcrumbs_tsx {
			label = "Breadcrumbs.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarActiveCourse_tsx {
			label = "NavBarActiveCourse.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarCourse_tsx {
			label = "NavBarCourse.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarLabs_tsx {
			label = "NavBarLabs.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarLink_tsx {
			label = "NavBarLink.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarTeacher_tsx {
			label = "NavBarTeacher.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_NavBarUser_tsx {
			label = "NavBarUser.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_StreamStatus_tsx {
			label = "StreamStatus.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ToggleSwitch_tsx {
			label = "ToggleSwitch.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_hooks {
		label = "hooks (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_windowsSize_tsx {
			label = "windowsSize.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_overmind {
		label = "overmind (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_actions_tsx {
			label = "actions.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_effects_tsx {
			label = "effects.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_index_tsx {
			label = "index.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_internalActions_tsx {
			label = "internalActions.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_state_tsx {
			label = "state.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_namespaces {
		label = "namespaces (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_review {
		label = "review (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_actions_ts {
			label = "actions.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_index_ts {
			label = "index.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_state_ts {
			label = "state.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_utils {
		label = "utils (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_errors_ts {
			label = "errors.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_pages {
		label = "pages (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_AboutPage_tsx {
			label = "AboutPage.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_AdminPage_tsx {
			label = "AdminPage.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CoursePage_tsx {
			label = "CoursePage.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_GroupPage_tsx {
			label = "GroupPage.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_StudentPage_tsx {
			label = "StudentPage.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_TeacherPage_tsx {
			label = "TeacherPage.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster___tests__ {
		label = "__tests__ (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_ComponentsHelpers_test_ts {
			label = "ComponentsHelpers.test.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_CourseCreationInfo_test_tsx {
			label = "CourseCreationInfo.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_Navbar_test_tsx {
			label = "Navbar.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_ProgressBar_test_tsx {
			label = "ProgressBar.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_TestHelpers_ts {
			label = "TestHelpers.ts";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_isValid_test_tsx {
			label = "isValid.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_profile_test_tsx {
			label = "profile.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_updateAdmin_test_tsx {
			label = "updateAdmin.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_updateEnrollment_test_tsx {
			label = "updateEnrollment.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_validateGroup_test_ts {
			label = "validateGroup.test.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_e2e {
		label = "e2e (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_E2ECourseVisibility_test_tsx {
			label = "E2ECourseVisibility.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_courseUtilityLinks_test_tsx {
			label = "courseUtilityLinks.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_navbarResponsive_test_tsx {
			label = "navbarResponsive.test.tsx";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_mock_data {
		label = "mock_data (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_mockData_ts {
			label = "mockData.ts";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_ci {
		label = "ci (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_ci_go {
			label = "ci.go";
			labelloc="t";
			rankdir=TB;
			ci_Job [label = "Job, Struct";shape = box;];
			ci_Job -> ci_;
			ci_BindDir [label = "BindDir, Field";shape = box;];
			ci_Commands [label = "Commands, Field";shape = box;];
			ci_Dockerfile [label = "Dockerfile, Field";shape = box;];
			ci_Env [label = "Env, Field";shape = box;];
			ci_Image [label = "Image, Field";shape = box;];
			ci_Name [label = "Name, Field";shape = box;];
			ci_Runner [label = "Runner, Interface";shape = box;];
			ci_Run [label = "Run, Method";shape = box;];
		}
		ci_Job -> ci_Run;
		ci_Job -> ci_createImage;
		ci_Job -> ci_pullImage;
		ci_Job -> ci_Close;
		ci_Job -> ci_TestDockerMultilineScript;
		ci_Job -> ci_TestDockerBindDir;
		ci_Job -> ci_TestDockerEnvVars;
		ci_Job -> ci_TestDockerBuild;
		ci_Job -> ci_TestDockerBuildRebuild;
		ci_Job -> ci_TestDockerRunAsNonRoot;
		ci_Job -> ci_TestDockerPull;
		ci_Job -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Job -> ci_TestDockerTimeout;
		ci_Job -> ci_TestDockerOpenFileDescriptors;
		ci_Job -> ci_TestDocker;
		ci_Job -> ci_TestLocal;
		ci_Job -> ci_;
		ci_Job -> ci_parseTestRunnerScript;
		ci_Job -> ci_TestCloneAndCopyRunTests;
		ci_Job -> ci_testRunData;
		ci_BindDir -> ci_createImage;
		ci_BindDir -> ci_TestDockerBindDir;
		ci_BindDir -> ci_TestDockerEnvVars;
		ci_BindDir -> ci_TestDockerRunAsNonRoot;
		ci_BindDir -> ci_parseTestRunnerScript;
		ci_Commands -> ci_createImage;
		ci_Commands -> ci_TestDockerMultilineScript;
		ci_Commands -> ci_TestDockerBindDir;
		ci_Commands -> ci_TestDockerEnvVars;
		ci_Commands -> ci_TestDockerBuild;
		ci_Commands -> ci_TestDockerBuildRebuild;
		ci_Commands -> ci_TestDockerRunAsNonRoot;
		ci_Commands -> ci_TestDockerPull;
		ci_Commands -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Commands -> ci_TestDockerTimeout;
		ci_Commands -> ci_TestDockerOpenFileDescriptors;
		ci_Commands -> ci_TestDocker;
		ci_Commands -> ci_TestLocal;
		ci_Commands -> ci_Run;
		ci_Commands -> ci_parseTestRunnerScript;
		ci_Commands -> ci_TestParseTestRunnerScript;
		ci_Commands -> ci_TestCloneAndCopyRunTests;
		ci_Commands -> ci_testRunData;
		ci_Dockerfile -> ci_createImage;
		ci_Dockerfile -> ci_buildImage;
		ci_Dockerfile -> ci_TestDockerBuild;
		ci_Dockerfile -> ci_TestDockerBuildRebuild;
		ci_Dockerfile -> ci_TestDockerRunAsNonRoot;
		ci_Dockerfile -> ci_testRunData;
		ci_Env -> ci_createImage;
		ci_Env -> ci_TestDockerEnvVars;
		ci_Env -> ci_TestDockerRunAsNonRoot;
		ci_Env -> ci_Run;
		ci_Env -> ci_parseTestRunnerScript;
		ci_Env -> ci_TestParseTestRunnerScript;
		ci_Image -> ci_createImage;
		ci_Image -> ci_waitForContainer;
		ci_Image -> ci_buildImage;
		ci_Image -> ci_Run;
		ci_Image -> ci_TestDockerMultilineScript;
		ci_Image -> ci_TestDockerBindDir;
		ci_Image -> ci_TestDockerEnvVars;
		ci_Image -> ci_TestDockerBuild;
		ci_Image -> ci_TestDockerBuildRebuild;
		ci_Image -> ci_TestDockerRunAsNonRoot;
		ci_Image -> ci_TestDockerPull;
		ci_Image -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Image -> ci_TestDockerTimeout;
		ci_Image -> ci_TestDockerOpenFileDescriptors;
		ci_Image -> ci_TestDocker;
		ci_Image -> ci_parseTestRunnerScript;
		ci_Image -> ci_TestParseTestRunnerScript;
		ci_Image -> ci_testRunData;
		ci_Name -> ci_createImage;
		ci_Name -> ci_waitForContainer;
		ci_Name -> ci_Run;
		ci_Name -> ci_TestDockerMultilineScript;
		ci_Name -> ci_TestDockerBindDir;
		ci_Name -> ci_TestDockerEnvVars;
		ci_Name -> ci_TestDockerBuild;
		ci_Name -> ci_TestDockerBuildRebuild;
		ci_Name -> ci_TestDockerRunAsNonRoot;
		ci_Name -> ci_TestDockerPull;
		ci_Name -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Name -> ci_TestDockerTimeout;
		ci_Name -> ci_TestDockerOpenFileDescriptors;
		ci_Name -> ci_TestDocker;
		ci_Name -> ci_parseTestRunnerScript;
		ci_Name -> ci_TestParseTestRunnerScript;
		ci_Name -> ci_testRunData;
		ci_Runner -> ci_String;
		ci_Runner -> ci_loadDockerfile;
		ci_Run -> ci_TestDockerMultilineScript;
		ci_Run -> ci_TestDockerBindDir;
		ci_Run -> ci_TestDockerEnvVars;
		ci_Run -> ci_TestDockerBuild;
		ci_Run -> ci_TestDockerBuildRebuild;
		ci_Run -> ci_TestDockerRunAsNonRoot;
		ci_Run -> ci_TestDockerPull;
		ci_Run -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Run -> ci_TestDockerTimeout;
		ci_Run -> ci_TestDockerOpenFileDescriptors;
		ci_Run -> ci_TestDocker;
		ci_Run -> ci_TestLocal;
		ci_Run -> ci_RunTests;
		ci_Run -> ci_TestCloneAndCopyRunTests;
		ci_Run -> ci_testRunData;
		subgraph cluster_clone_repositories_go {
			label = "clone_repositories.go";
			labelloc="t";
			rankdir=TB;
			ci_cloneMissingRepositories [label = "cloneMissingRepositories, Function";shape = box;];
			ci_hasAssignment [label = "hasAssignment, Function";shape = box;];
			ci_scanStudentRepo [label = "scanStudentRepo, Function";shape = box;];
			ci_exists [label = "exists, Function";shape = box;];
			ci_exists -> ci_cloneMissingRepositories;
			ci_exists -> ci_hasAssignment;
			ci_walk [label = "walk, Function";shape = box;];
			ci_walk -> ci_scanStudentRepo;
		}
		ci_cloneMissingRepositories -> ci_clone;
		ci_hasAssignment -> ci_clone;
		ci_scanStudentRepo -> ci_RunTests;
		ci_exists -> ci_moduleCachePath;
		ci_exists -> ci_TestModuleCachePath;
		subgraph cluster_consts_go {
			label = "consts.go";
			labelloc="t";
			rankdir=TB;
			ci_secretEnvName [label = "secretEnvName, Constant";shape = box;];
			ci_ErrConflict [label = "ErrConflict, Variable";shape = box;];
		}
		ci_secretEnvName -> ci_scanStudentRepo;
		ci_secretEnvName -> ci_EnvVars;
		ci_ErrConflict -> ci_createImage;
		ci_ErrConflict -> ci_RunTests;
		subgraph cluster_docker_go {
			label = "docker.go";
			labelloc="t";
			rankdir=TB;
			ci_DefaultContainerTimeout [label = "DefaultContainerTimeout, Variable";shape = box;];
			ci_QuickFeedPath [label = "QuickFeedPath, Variable";shape = box;];
			ci_QuickFeedPath -> ci_createImage;
			ci_GoModCache [label = "GoModCache, Variable";shape = box;];
			ci_GoModCache -> ci_createImage;
			ci_maxToScan [label = "maxToScan, Variable";shape = box;];
			ci_maxToScan -> ci_Run;
			ci_maxLogSize [label = "maxLogSize, Variable";shape = box;];
			ci_maxLogSize -> ci_Run;
			ci_lastSegmentSize [label = "lastSegmentSize, Variable";shape = box;];
			ci_lastSegmentSize -> ci_Run;
			ci_Docker [label = "Docker, Struct";shape = box;];
			ci_Docker -> ci_Run;
			ci_Docker -> ci_createImage;
			ci_Docker -> ci_waitForContainer;
			ci_Docker -> ci_pullImage;
			ci_Docker -> ci_;
			ci_Docker -> ci_NewDockerCI;
			ci_Docker -> ci_Close;
			ci_client [label = "client, Field";shape = box;];
			ci_client -> ci_createImage;
			ci_client -> ci_waitForContainer;
			ci_client -> ci_pullImage;
			ci_client -> ci_buildImage;
			ci_client -> ci_NewDockerCI;
			ci_client -> ci_Close;
			ci_client -> ci_Run;
			ci_logger [label = "logger, Field";shape = box;];
			ci_logger -> ci_createImage;
			ci_logger -> ci_waitForContainer;
			ci_logger -> ci_buildImage;
			ci_logger -> ci_NewDockerCI;
			ci_logger -> ci_Close;
			ci_logger -> ci_Run;
			ci_NewDockerCI [label = "NewDockerCI, Function";shape = box;];
			ci_Close [label = "Close, Method";shape = box;];
			ci_Close -> ci_pullImage;
			ci_Close -> ci_buildImage;
			ci_Run [label = "Run, Method";shape = box;];
			ci_createImage [label = "createImage, Method";shape = box;];
			ci_createImage -> ci_Run;
			ci_waitForContainer [label = "waitForContainer, Method";shape = box;];
			ci_waitForContainer -> ci_Run;
			ci_pullImage [label = "pullImage, Method";shape = box;];
			ci_pullImage -> ci_createImage;
			ci_buildImage [label = "buildImage, Method";shape = box;];
			ci_buildImage -> ci_createImage;
			ci_printInfo [label = "printInfo, Function";shape = box;];
			ci_printInfo -> ci_buildImage;
			ci_dockerJSON [label = "dockerJSON, Struct";shape = box;];
			ci_dockerJSON -> ci_printInfo;
			ci_Error [label = "Error, Field";shape = box;];
			ci_Error -> ci_printInfo;
			ci_ID [label = "ID, Field";shape = box;];
			ci_ID -> ci_String;
			ci_Status [label = "Status, Field";shape = box;];
			ci_Status -> ci_String;
			ci_Stream [label = "Stream, Field";shape = box;];
			ci_Stream -> ci_String;
			ci_String [label = "String, Method";shape = box;];
		}
		ci_QuickFeedPath -> ci_parseTestRunnerScript;
		ci_QuickFeedPath -> ci_TestParseTestRunnerScript;
		ci_GoModCache -> ci_moduleCachePath;
		ci_GoModCache -> ci_TestModuleCachePath;
		ci_Docker -> ci_init;
		ci_NewDockerCI -> ci_dockerClient;
		ci_Close -> ci_dockerClient;
		ci_Run -> ci_TestDockerMultilineScript;
		ci_Run -> ci_TestDockerBindDir;
		ci_Run -> ci_TestDockerEnvVars;
		ci_Run -> ci_TestDockerBuild;
		ci_Run -> ci_TestDockerBuildRebuild;
		ci_Run -> ci_TestDockerRunAsNonRoot;
		ci_Run -> ci_TestDockerPull;
		ci_Run -> ci_TestDockerPullFromNonDockerHubRepositories;
		ci_Run -> ci_TestDockerTimeout;
		ci_Run -> ci_TestDockerOpenFileDescriptors;
		ci_Run -> ci_TestDocker;
		ci_Run -> ci_RunTests;
		ci_Run -> ci_testRunData;
		subgraph cluster_docker_test_go {
			label = "docker_test.go";
			labelloc="t";
			rankdir=TB;
			ci_docker [label = "docker, Variable";shape = box;];
			ci_docker -> ci_TestDockerBindDir;
			ci_docker -> ci_TestDockerEnvVars;
			ci_docker -> ci_TestDockerBuild;
			ci_docker -> ci_TestDockerBuildRebuild;
			ci_docker -> ci_init;
			ci_docker -> ci_TestDockerRunAsNonRoot;
			ci_docker -> ci_TestDockerPull;
			ci_docker -> ci_TestDockerPullFromNonDockerHubRepositories;
			ci_docker -> ci_TestDockerTimeout;
			ci_docker -> ci_TestDockerOpenFileDescriptors;
			ci_docker -> ci_TestDocker;
			ci_docker -> ci_TestDockerMultilineScript;
			ci_init [label = "init, Function";shape = box;];
			ci_dockerClient [label = "dockerClient, Function";shape = box;];
			ci_dockerClient -> ci_TestDockerBindDir;
			ci_dockerClient -> ci_TestDockerEnvVars;
			ci_dockerClient -> ci_TestDockerBuild;
			ci_dockerClient -> ci_TestDockerBuildRebuild;
			ci_dockerClient -> ci_TestDockerRunAsNonRoot;
			ci_dockerClient -> ci_TestDockerPull;
			ci_dockerClient -> ci_TestDockerPullFromNonDockerHubRepositories;
			ci_dockerClient -> ci_TestDockerTimeout;
			ci_dockerClient -> ci_TestDockerOpenFileDescriptors;
			ci_dockerClient -> ci_TestDocker;
			ci_dockerClient -> ci_TestDockerMultilineScript;
			ci_deleteDockerImages [label = "deleteDockerImages, Function";shape = box;];
			ci_deleteDockerImages -> ci_TestDockerBuild;
			ci_deleteDockerImages -> ci_TestDockerPull;
			ci_deleteDockerImages -> ci_TestDockerPullFromNonDockerHubRepositories;
			ci_TestDocker [label = "TestDocker, Function";shape = box;];
			ci_TestDockerMultilineScript [label = "TestDockerMultilineScript, Function";shape = box;];
			ci_TestDockerBindDir [label = "TestDockerBindDir, Function";shape = box;];
			ci_TestDockerEnvVars [label = "TestDockerEnvVars, Function";shape = box;];
			ci_TestDockerBuild [label = "TestDockerBuild, Function";shape = box;];
			ci_TestDockerBuildRebuild [label = "TestDockerBuildRebuild, Function";shape = box;];
			ci_TestDockerRunAsNonRoot [label = "TestDockerRunAsNonRoot, Function";shape = box;];
			ci_TestDockerPull [label = "TestDockerPull, Function";shape = box;];
			ci_TestDockerPullFromNonDockerHubRepositories [label = "TestDockerPullFromNonDockerHubRepositories, Function";shape = box;];
			ci_TestDockerTimeout [label = "TestDockerTimeout, Function";shape = box;];
			ci_TestDockerOpenFileDescriptors [label = "TestDockerOpenFileDescriptors, Function";shape = box;];
			ci_countOpenFiles [label = "countOpenFiles, Function";shape = box;];
			ci_countOpenFiles -> ci_TestDockerOpenFileDescriptors;
		}
		ci_dockerClient -> ci_TestRunTests;
		ci_dockerClient -> ci_TestRunTestsTimeout;
		subgraph cluster_docker_unix_test_go {
			label = "docker_unix_test.go";
			labelloc="t";
			rankdir=TB;
			ci_checkOwner [label = "checkOwner, Function";shape = box;];
		}
		ci_checkOwner -> ci_TestDockerRunAsNonRoot;
		subgraph cluster_docker_windows_test_go {
			label = "docker_windows_test.go";
			labelloc="t";
			rankdir=TB;
			ci_checkOwner [label = "checkOwner, Function";shape = box;];
		}
		subgraph cluster_local_test_go {
			label = "local_test.go";
			labelloc="t";
			rankdir=TB;
			ci_TestLocal [label = "TestLocal, Function";shape = box;];
		}
		subgraph cluster_local_unix_go {
			label = "local_unix.go";
			labelloc="t";
			rankdir=TB;
			ci_Local [label = "Local, Struct";shape = box;];
			ci_Local -> ci_;
			ci_Run [label = "Run, Method";shape = box;];
		}
		ci_Local -> ci_TestLocal;
		ci_Local -> ci_TestCloneAndCopyRunTests;
		ci_Run -> ci_TestLocal;
		ci_Run -> ci_RunTests;
		ci_Run -> ci_TestCloneAndCopyRunTests;
		ci_Run -> ci_testRunData;
		subgraph cluster_local_windows_go {
			label = "local_windows.go";
			labelloc="t";
			rankdir=TB;
			ci_Local [label = "Local, Struct";shape = box;];
			ci_Run [label = "Run, Method";shape = box;];
		}
		subgraph cluster_metrics_go {
			label = "metrics.go";
			labelloc="t";
			rankdir=TB;
			ci_TestExecutionMetricsCollectors [label = "TestExecutionMetricsCollectors, Function";shape = box;];
			ci_cloneTimeGauge [label = "cloneTimeGauge, Variable";shape = box;];
			ci_cloneTimeGauge -> ci_TestExecutionMetricsCollectors;
			ci_validationTimeGauge [label = "validationTimeGauge, Variable";shape = box;];
			ci_validationTimeGauge -> ci_TestExecutionMetricsCollectors;
			ci_testExecutionTimeGauge [label = "testExecutionTimeGauge, Variable";shape = box;];
			ci_testExecutionTimeGauge -> ci_TestExecutionMetricsCollectors;
			ci_testsStartedCounter [label = "testsStartedCounter, Variable";shape = box;];
			ci_testsStartedCounter -> ci_TestExecutionMetricsCollectors;
			ci_testsFailedCounter [label = "testsFailedCounter, Variable";shape = box;];
			ci_testsFailedCounter -> ci_TestExecutionMetricsCollectors;
			ci_testsFailedWithOutputCounter [label = "testsFailedWithOutputCounter, Variable";shape = box;];
			ci_testsFailedExtractResultsCounter [label = "testsFailedExtractResultsCounter, Variable";shape = box;];
			ci_testsSucceededCounter [label = "testsSucceededCounter, Variable";shape = box;];
			ci_testsSucceededCounter -> ci_TestExecutionMetricsCollectors;
			ci_timer [label = "timer, Function";shape = box;];
		}
		ci_cloneTimeGauge -> ci_clone;
		ci_validationTimeGauge -> ci_scanStudentRepo;
		ci_testExecutionTimeGauge -> ci_RunTests;
		ci_testsStartedCounter -> ci_RunTests;
		ci_testsFailedCounter -> ci_RunTests;
		ci_testsFailedWithOutputCounter -> ci_RunTests;
		ci_testsFailedExtractResultsCounter -> ci_RunTests;
		ci_testsSucceededCounter -> ci_RunTests;
		ci_timer -> ci_scanStudentRepo;
		ci_timer -> ci_clone;
		ci_timer -> ci_RunTests;
		subgraph cluster_module_cache_go {
			label = "module_cache.go";
			labelloc="t";
			rankdir=TB;
			ci_moduleCachePath [label = "moduleCachePath, Function";shape = box;];
		}
		ci_moduleCachePath -> ci_createImage;
		ci_moduleCachePath -> ci_TestModuleCachePath;
		subgraph cluster_module_cache_test_go {
			label = "module_cache_test.go";
			labelloc="t";
			rankdir=TB;
			ci_TestModuleCachePath [label = "TestModuleCachePath, Function";shape = box;];
		}
		subgraph cluster_parse_script_go {
			label = "parse_script.go";
			labelloc="t";
			rankdir=TB;
			ci_parseTestRunnerScript [label = "parseTestRunnerScript, Method";shape = box;];
			ci_loadRunScript [label = "loadRunScript, Method";shape = box;];
			ci_loadRunScript -> ci_parseTestRunnerScript;
			ci_parseRunScript [label = "parseRunScript, Function";shape = box;];
			ci_parseRunScript -> ci_parseTestRunnerScript;
			ci_EnvVars [label = "EnvVars, Function";shape = box;];
			ci_EnvVars -> ci_parseTestRunnerScript;
		}
		ci_parseTestRunnerScript -> ci_TestParseBadTestRunnerScript;
		ci_parseTestRunnerScript -> ci_TestParseTestRunnerScript;
		ci_parseTestRunnerScript -> ci_RunTests;
		ci_loadRunScript -> ci_TestLoadRunScript;
		subgraph cluster_parse_script_test_go {
			label = "parse_script_test.go";
			labelloc="t";
			rankdir=TB;
			ci_testRunData [label = "testRunData, Function";shape = box;];
			ci_testRunData -> ci_TestParseBadTestRunnerScript;
			ci_testRunData -> ci_TestParseTestRunnerScript;
			ci_TestLoadRunScript [label = "TestLoadRunScript, Function";shape = box;];
			ci_TestParseTestRunnerScript [label = "TestParseTestRunnerScript, Function";shape = box;];
			ci_TestParseBadTestRunnerScript [label = "TestParseBadTestRunnerScript, Function";shape = box;];
		}
		subgraph cluster_record_results_go {
			label = "record_results.go";
			labelloc="t";
			rankdir=TB;
			ci_RecordResults [label = "RecordResults, Method";shape = box;];
			ci_previousSubmission [label = "previousSubmission, Method";shape = box;];
			ci_previousSubmission -> ci_RecordResults;
			ci_newSubmission [label = "newSubmission, Method";shape = box;];
			ci_newSubmission -> ci_RecordResults;
			ci_newManualReviewSubmission [label = "newManualReviewSubmission, Method";shape = box;];
			ci_newManualReviewSubmission -> ci_newSubmission;
			ci_newTestRunSubmission [label = "newTestRunSubmission, Method";shape = box;];
			ci_newTestRunSubmission -> ci_newSubmission;
			ci_updateSlipDays [label = "updateSlipDays, Method";shape = box;];
			ci_updateSlipDays -> ci_RecordResults;
			ci_GetOwners [label = "GetOwners, Method";shape = box;];
		}
		ci_RecordResults -> ci_TestRecordResults;
		ci_RecordResults -> ci_TestRecordResultsForManualReview;
		ci_RecordResults -> ci_TestStreamRecordResults;
		ci_GetOwners -> ci_TestStreamRecordResults;
		subgraph cluster_run_tests_go {
			label = "run_tests.go";
			labelloc="t";
			rankdir=TB;
			ci_quickfeedTestsPath [label = "quickfeedTestsPath, Constant";shape = box;];
			ci_quickfeedTestsPath -> ci_RunTests;
			ci_RunData [label = "RunData, Struct";shape = box;];
			ci_RunData -> ci_RunTests;
			ci_RunData -> ci_;
			ci_RunData -> ci_String;
			ci_Assignment [label = "Assignment, Field";shape = box;];
			ci_Assignment -> ci_RunTests;
			ci_Assignment -> ci_clone;
			ci_Assignment -> ci_String;
			ci_BranchName [label = "BranchName, Field";shape = box;];
			ci_BranchName -> ci_clone;
			ci_CommitID [label = "CommitID, Field";shape = box;];
			ci_CommitID -> ci_String;
			ci_Course [label = "Course, Field";shape = box;];
			ci_Course -> ci_RunTests;
			ci_Course -> ci_clone;
			ci_Course -> ci_String;
			ci_EnvVarsFn [label = "EnvVarsFn, Field";shape = box;];
			ci_JobOwner [label = "JobOwner, Field";shape = box;];
			ci_JobOwner -> ci_RunTests;
			ci_JobOwner -> ci_clone;
			ci_JobOwner -> ci_String;
			ci_Rebuild [label = "Rebuild, Field";shape = box;];
			ci_Repo [label = "Repo, Field";shape = box;];
			ci_Repo -> ci_clone;
			ci_Repo -> ci_RunTests;
			ci_String [label = "String, Method";shape = box;];
			ci_RunTests [label = "RunTests, Method";shape = box;];
			ci_clone [label = "clone, Method";shape = box;];
			ci_clone -> ci_RunTests;
		}
		ci_RunData -> ci_;
		ci_RunData -> ci_parseTestRunnerScript;
		ci_RunData -> ci_testRunData;
		ci_RunData -> ci_TestLoadRunScript;
		ci_RunData -> ci_newTestRunSubmission;
		ci_RunData -> ci_updateSlipDays;
		ci_RunData -> ci_RecordResults;
		ci_RunData -> ci_previousSubmission;
		ci_RunData -> ci_newSubmission;
		ci_RunData -> ci_newManualReviewSubmission;
		ci_RunData -> ci_TestCloneAndCopyRunTests;
		ci_RunData -> ci_TestRecordResults;
		ci_RunData -> ci_TestRecordResultsForManualReview;
		ci_RunData -> ci_TestStreamRecordResults;
		ci_RunData -> ci_loadDockerfile;
		ci_Assignment -> ci_parseTestRunnerScript;
		ci_Assignment -> ci_loadRunScript;
		ci_Assignment -> ci_TestParseBadTestRunnerScript;
		ci_Assignment -> ci_testRunData;
		ci_Assignment -> ci_TestLoadRunScript;
		ci_Assignment -> ci_TestParseTestRunnerScript;
		ci_Assignment -> ci_updateSlipDays;
		ci_Assignment -> ci_previousSubmission;
		ci_Assignment -> ci_newManualReviewSubmission;
		ci_Assignment -> ci_newTestRunSubmission;
		ci_Assignment -> ci_TestCloneAndCopyRunTests;
		ci_Assignment -> ci_TestRecordResults;
		ci_Assignment -> ci_TestRecordResultsForManualReview;
		ci_Assignment -> ci_TestStreamRecordResults;
		ci_Assignment -> ci_TestRunTests;
		ci_CommitID -> ci_TestParseTestRunnerScript;
		ci_CommitID -> ci_testRunData;
		ci_CommitID -> ci_newManualReviewSubmission;
		ci_CommitID -> ci_newTestRunSubmission;
		ci_CommitID -> ci_TestCloneAndCopyRunTests;
		ci_CommitID -> ci_TestRecordResults;
		ci_CommitID -> ci_TestStreamRecordResults;
		ci_Course -> ci_loadRunScript;
		ci_Course -> ci_testRunData;
		ci_Course -> ci_TestLoadRunScript;
		ci_Course -> ci_TestCloneAndCopyRunTests;
		ci_Course -> ci_TestRecordResults;
		ci_Course -> ci_TestRecordResultsForManualReview;
		ci_Course -> ci_TestStreamRecordResults;
		ci_EnvVarsFn -> ci_parseTestRunnerScript;
		ci_JobOwner -> ci_testRunData;
		ci_JobOwner -> ci_TestCloneAndCopyRunTests;
		ci_JobOwner -> ci_TestRecordResults;
		ci_JobOwner -> ci_TestRecordResultsForManualReview;
		ci_JobOwner -> ci_TestStreamRecordResults;
		ci_Rebuild -> ci_RecordResults;
		ci_Rebuild -> ci_newTestRunSubmission;
		ci_Rebuild -> ci_TestRecordResults;
		ci_Rebuild -> ci_TestStreamRecordResults;
		ci_Repo -> ci_parseTestRunnerScript;
		ci_Repo -> ci_testRunData;
		ci_Repo -> ci_GetOwners;
		ci_Repo -> ci_previousSubmission;
		ci_Repo -> ci_newManualReviewSubmission;
		ci_Repo -> ci_newTestRunSubmission;
		ci_Repo -> ci_TestCloneAndCopyRunTests;
		ci_Repo -> ci_TestRecordResults;
		ci_Repo -> ci_TestRecordResultsForManualReview;
		ci_Repo -> ci_TestStreamRecordResults;
		ci_String -> ci_parseTestRunnerScript;
		ci_RunTests -> ci_TestRunTestsTimeout;
		ci_RunTests -> ci_TestRunTests;
		ci_clone -> ci_TestCloneAndCopyRunTests;
		subgraph cluster_run_tests_clone_test_go {
			label = "run_tests_clone_test.go";
			labelloc="t";
			rankdir=TB;
			ci_init [label = "init, Function";shape = box;];
			ci_TestCloneAndCopyRunTests [label = "TestCloneAndCopyRunTests, Function";shape = box;];
		}
		subgraph cluster_run_tests_test_go {
			label = "run_tests_test.go";
			labelloc="t";
			rankdir=TB;
			ci_loadDockerfile [label = "loadDockerfile, Function";shape = box;];
			ci_loadDockerfile -> ci_testRunData;
			ci_testRunData [label = "testRunData, Function";shape = box;];
			ci_testRunData -> ci_TestRunTestsTimeout;
			ci_testRunData -> ci_TestRunTests;
			ci_TestRunTests [label = "TestRunTests, Function";shape = box;];
			ci_TestRunTestsTimeout [label = "TestRunTestsTimeout, Function";shape = box;];
			ci_TestRecordResults [label = "TestRecordResults, Function";shape = box;];
			ci_TestRecordResultsForManualReview [label = "TestRecordResultsForManualReview, Function";shape = box;];
			ci_TestStreamRecordResults [label = "TestStreamRecordResults, Function";shape = box;];
			ci_runStream [label = "runStream, Function";shape = box;];
			ci_runStream -> ci_TestStreamRecordResults;
		}
		subgraph cluster_truncate_go {
			label = "truncate.go";
			labelloc="t";
			rankdir=TB;
			ci_truncateMsg [label = "truncateMsg, Constant";shape = box;];
			ci_truncateMsg -> ci_truncateLog;
			ci_truncateLog [label = "truncateLog, Function";shape = box;];
			ci_findScoreLines [label = "findScoreLines, Function";shape = box;];
			ci_findScoreLines -> ci_truncateLog;
		}
		ci_truncateMsg -> ci_TestLogTruncate;
		ci_truncateLog -> ci_Run;
		ci_truncateLog -> ci_TestLogTruncate;
		subgraph cluster_truncate_test_go {
			label = "truncate_test.go";
			labelloc="t";
			rankdir=TB;
			ci_TestLogTruncate [label = "TestLogTruncate, Function";shape = box;];
		}
	}
	subgraph cluster_testdata {
		label = "testdata (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_assignments {
		label = "assignments (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_lab1_go {
			label = "lab1.go";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_tests {
		label = "tests (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_x_test_go {
			label = "x_test.go";
			labelloc="t";
			rankdir=TB;
			tests_TestX [label = "TestX, Function";shape = box;];
		}
	}
	subgraph cluster_cmd {
		label = "cmd (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_graph {
		label = "graph (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_main_go {
			label = "main.go";
			labelloc="t";
			rankdir=TB;
			graph_rootFolderName [label = "rootFolderName, Constant";shape = box;];
			graph_rootFolderName -> graph_getKeys;
			graph_rootFolderName -> graph_main;
			graph_rootFolderName -> graph_getFolderAndFileIndex;
			graph_rootFolderName -> graph_createMap;
			graph_function [label = "function, Constant";shape = box;];
			graph_function -> graph_getRelatedMethod;
			graph_method [label = "method, Constant";shape = box;];
			graph_method -> graph_extractSymbols;
			graph_method -> graph_getRelatedMethod;
			graph_main [label = "main, Function";shape = box;];
			graph_getContentFromCache [label = "getContentFromCache, Method";shape = box;];
			graph_getContentFromCache -> graph_main;
			graph_createMap [label = "createMap, Method";shape = box;];
			graph_createMap -> graph_main;
			graph_clean [label = "clean, Function";shape = box;];
			graph_clean -> graph_createMap;
			graph_clean -> graph_clean;
			graph_populate [label = "populate, Function";shape = box;];
			graph_populate -> graph_populate;
			graph_populate -> graph_createMap;
			graph_runGopls [label = "runGopls, Function";shape = box;];
			graph_runGopls -> graph_setSymbols;
			graph_runGopls -> graph_findRefs;
			graph_setSymbols [label = "setSymbols, Method";shape = box;];
			graph_setSymbols -> graph_populate;
			graph_setSymbols -> graph_findParentsForRefs;
			graph_extractSymbols [label = "extractSymbols, Function";shape = box;];
			graph_extractSymbols -> graph_setSymbols;
			graph_parseStringToInt [label = "parseStringToInt, Function";shape = box;];
			graph_parseStringToInt -> graph_getRelatedMethod;
			graph_findRefs [label = "findRefs, Method";shape = box;];
			graph_findRefs -> graph_populate;
			graph_assignRefsToMap [label = "assignRefsToMap, Method";shape = box;];
			graph_assignRefsToMap -> graph_findRefs;
			graph_parseRefs [label = "parseRefs, Function";shape = box;];
			graph_parseRefs -> graph_findRefs;
			graph_createRefInfo [label = "createRefInfo, Function";shape = box;];
			graph_createRefInfo -> graph_findRefs;
			graph_createRefInfo -> graph_findParentsForRefs;
			graph_getKeys [label = "getKeys, Function";shape = box;];
			graph_getKeys -> graph_getFolderAndFileIndex;
			graph_getFolderAndFileIndex [label = "getFolderAndFileIndex, Method";shape = box;];
			graph_getFolderAndFileIndex -> graph_findParentsForRefs;
			graph_findParentsForRefs [label = "findParentsForRefs, Function";shape = box;];
			graph_findParentsForRefs -> graph_findRefs;
			graph_getLastEntry [label = "getLastEntry, Function";shape = box;];
			graph_getLastEntry -> graph_createRefInfo;
			graph_getLastEntry -> graph_findParentsForRefs;
			graph_getRelatedMethod [label = "getRelatedMethod, Function";shape = box;];
			graph_getRelatedMethod -> graph_findParentsForRefs;
			graph_fMap [label = "fMap, Struct";shape = box;];
			graph_fMap -> graph_clean;
			graph_fMap -> graph_parseStringToInt;
			graph_fMap -> graph_main;
			graph_fMap -> graph_getKeys;
			graph_fMap -> graph_getFolderAndFileIndex;
			graph_fMap -> graph_getRelatedMethod;
			graph_fMap -> graph_getPos;
			graph_fMap -> graph_getContent;
			graph_fMap -> graph_getContentFromCache;
			graph_fMap -> graph_createMap;
			graph_Folder [label = "Folder, Field";shape = box;];
			graph_Folder -> graph_clean;
			graph_Folder -> graph_populate;
			graph_Folder -> graph_main;
			graph_Folder -> graph_getFolderAndFileIndex;
			graph_Folder -> graph_getContent;
			graph_Key [label = "Key, Field";shape = box;];
			graph_Key -> graph_main;
			graph_Key -> graph_getFolderAndFileIndex;
			graph_folder [label = "folder, Struct";shape = box;];
			graph_folder -> graph_runGopls;
			graph_folder -> graph_parseStringToInt;
			graph_folder -> graph_findRefs;
			graph_folder -> graph_main;
			graph_folder -> graph_getKeys;
			graph_folder -> graph_getFolderAndFileIndex;
			graph_folder -> graph_getRelatedMethod;
			graph_folder -> graph_getContent;
			graph_Errors [label = "Errors, Field";shape = box;];
			graph_Errors -> graph_setSymbols;
			graph_Errors -> graph_findRefs;
			graph_Errors -> graph_findParentsForRefs;
			graph_Files [label = "Files, Field";shape = box;];
			graph_Files -> graph_populate;
			graph_Files -> graph_setSymbols;
			graph_Files -> graph_findRefs;
			graph_Files -> graph_assignRefsToMap;
			graph_Files -> graph_getFolderAndFileIndex;
			graph_Files -> graph_findParentsForRefs;
			graph_Files -> graph_getContent;
			graph_Files -> graph_clean;
			graph_FolderPath [label = "FolderPath, Field";shape = box;];
			graph_FolderPath -> graph_getFolderAndFileIndex;
			graph_FolderPath -> graph_getContent;
			graph_Refs [label = "Refs, Field";shape = box;];
			graph_Refs -> graph_assignRefsToMap;
			graph_SubFolders [label = "SubFolders, Field";shape = box;];
			graph_SubFolders -> graph_populate;
			graph_SubFolders -> graph_getFolderAndFileIndex;
			graph_SubFolders -> graph_getContent;
			graph_SubFolders -> graph_clean;
			graph_parentFolder [label = "parentFolder, Field";shape = box;];
			graph_parentFolder -> graph_getFolderAndFileIndex;
			graph_parentFolder -> graph_getContent;
			graph_goPlsError [label = "goPlsError, Struct";shape = box;];
			graph_goPlsError -> graph_setSymbols;
			graph_goPlsError -> graph_findRefs;
			graph_goPlsError -> graph_findParentsForRefs;
			graph_goPlsError -> graph_getRelatedMethod;
			graph_Command [label = "Command, Field";shape = box;];
			graph_Command -> graph_setSymbols;
			graph_Command -> graph_findRefs;
			graph_Command -> graph_findParentsForRefs;
			graph_Error [label = "Error, Field";shape = box;];
			graph_Error -> graph_setSymbols;
			graph_Error -> graph_findRefs;
			graph_Error -> graph_findParentsForRefs;
			graph_Input [label = "Input, Field";shape = box;];
			graph_Input -> graph_setSymbols;
			graph_Input -> graph_findRefs;
			graph_Input -> graph_findParentsForRefs;
			graph_Output [label = "Output, Field";shape = box;];
			graph_Output -> graph_setSymbols;
			graph_Output -> graph_findRefs;
			graph_Output -> graph_findParentsForRefs;
			graph_file [label = "file, Struct";shape = box;];
			graph_file -> graph_getRelatedMethod;
			graph_file -> graph_getContent;
			graph_Name [label = "Name, Field";shape = box;];
			graph_Name -> graph_populate;
			graph_Name -> graph_getFolderAndFileIndex;
			graph_Name -> graph_getContent;
			graph_Path [label = "Path, Field";shape = box;];
			graph_Path -> graph_populate;
			graph_Path -> graph_getContent;
			graph_Refs [label = "Refs, Field";shape = box;];
			graph_Refs -> graph_assignRefsToMap;
			graph_Symbols [label = "Symbols, Field";shape = box;];
			graph_Symbols -> graph_setSymbols;
			graph_Symbols -> graph_findRefs;
			graph_Symbols -> graph_assignRefsToMap;
			graph_Symbols -> graph_findParentsForRefs;
			graph_symbol [label = "symbol, Struct";shape = box;];
			graph_symbol -> graph_setSymbols;
			graph_symbol -> graph_extractSymbols;
			graph_symbol -> graph_findParentsForRefs;
			graph_symbol -> graph_getLastEntry;
			graph_symbol -> graph_getRelatedMethod;
			graph_Kind [label = "Kind, Field";shape = box;];
			graph_Kind -> graph_extractSymbols;
			graph_Kind -> graph_getRelatedMethod;
			graph_Name [label = "Name, Field";shape = box;];
			graph_Name -> graph_extractSymbols;
			graph_Name -> graph_findRefs;
			graph_Name -> graph_findParentsForRefs;
			graph_Position [label = "Position, Field";shape = box;];
			graph_Position -> graph_extractSymbols;
			graph_Position -> graph_findRefs;
			graph_Position -> graph_findParentsForRefs;
			graph_Position -> graph_getRelatedMethod;
			graph_Refs [label = "Refs, Field";shape = box;];
			graph_Refs -> graph_assignRefsToMap;
			graph_ref [label = "ref, Struct";shape = box;];
			graph_ref -> graph_findRefs;
			graph_ref -> graph_getFolderAndFileIndex;
			graph_ref -> graph_findParentsForRefs;
			graph_ref -> graph_getRelatedMethod;
			graph_Info [label = "Info, Field";shape = box;];
			graph_Info -> graph_assignRefsToMap;
			graph_Info -> graph_findParentsForRefs;
			graph_Source [label = "Source, Field";shape = box;];
			graph_Source -> graph_assignRefsToMap;
			graph_Source -> graph_findParentsForRefs;
			graph_refInfo [label = "refInfo, Struct";shape = box;];
			graph_refInfo -> graph_parseRefs;
			graph_refInfo -> graph_createRefInfo;
			graph_refInfo -> graph_getFolderAndFileIndex;
			graph_refInfo -> graph_getRelatedMethod;
			graph_FileName [label = "FileName, Field";shape = box;];
			graph_FileName -> graph_assignRefsToMap;
			graph_FileName -> graph_createRefInfo;
			graph_FolderName [label = "FolderName, Field";shape = box;];
			graph_FolderName -> graph_assignRefsToMap;
			graph_FolderName -> graph_createRefInfo;
			graph_MethodName [label = "MethodName, Field";shape = box;];
			graph_MethodName -> graph_createRefInfo;
			graph_Path [label = "Path, Field";shape = box;];
			graph_Path -> graph_createRefInfo;
			graph_position [label = "position, Struct";shape = box;];
			graph_position -> graph_extractSymbols;
			graph_position -> graph_findParentsForRefs;
			graph_position -> graph_getRelatedMethod;
			graph_CharRange [label = "CharRange, Field";shape = box;];
			graph_CharRange -> graph_extractSymbols;
			graph_CharRange -> graph_getPos;
			graph_Line [label = "Line, Field";shape = box;];
			graph_Line -> graph_extractSymbols;
			graph_Line -> graph_findParentsForRefs;
			graph_Line -> graph_getRelatedMethod;
			graph_Line -> graph_getPos;
			graph_getPos [label = "getPos, Method";shape = box;];
			graph_getPos -> graph_findRefs;
			graph_getContent [label = "getContent, Function";shape = box;];
			graph_getContent -> graph_getContent;
			graph_getContent -> graph_createMap;
			graph_isValid [label = "isValid, Function";shape = box;];
			graph_isValid -> graph_getContent;
			graph_getFileExtension [label = "getFileExtension, Function";shape = box;];
			graph_getFileExtension -> graph_isValid;
		}
	}
	subgraph cluster_qcm {
		label = "qcm (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_main_go {
			label = "main.go";
			labelloc="t";
			rankdir=TB;
			qcm_cli [label = "cli, Variable";shape = box;];
			qcm_cli -> qcm_runner;
			qcm_cli -> qcm_getSCMClient;
			qcm_cli -> qcm_studentRepo;
			qcm_cli -> qcm_studentRepoURL;
			qcm_cli -> qcm_clone;
			qcm_cli -> qcm_main;
			qcm_cli -> qcm_runTests;
			qcm_Clone [label = "Clone, Field";shape = box;];
			qcm_Clone -> qcm_runner;
			qcm_Clone -> qcm_getSCMClient;
			qcm_Clone -> qcm_studentRepo;
			qcm_Clone -> qcm_studentRepoURL;
			qcm_Clone -> qcm_clone;
			qcm_Clone -> qcm_main;
			qcm_Clone -> qcm_runTests;
			qcm_main [label = "main, Function";shape = box;];
			qcm_runTests [label = "runTests, Function";shape = box;];
			qcm_runTests -> qcm_main;
			qcm_runner [label = "runner, Function";shape = box;];
			qcm_runner -> qcm_runTests;
			qcm_getSCMClient [label = "getSCMClient, Function";shape = box;];
			qcm_getSCMClient -> qcm_main;
			qcm_studentRepo [label = "studentRepo, Function";shape = box;];
			qcm_studentRepo -> qcm_studentRepoURL;
			qcm_studentRepo -> qcm_runTests;
			qcm_studentRepoURL [label = "studentRepoURL, Function";shape = box;];
			qcm_studentRepoURL -> qcm_runTests;
			qcm_clone [label = "clone, Function";shape = box;];
			qcm_clone -> qcm_main;
			qcm_readFile [label = "readFile, Function";shape = box;];
			qcm_readFile -> qcm_runTests;
			qcm_exists [label = "exists, Function";shape = box;];
			qcm_exists -> qcm_main;
			qcm_check [label = "check, Function";shape = box;];
			qcm_check -> qcm_runner;
			qcm_check -> qcm_getSCMClient;
			qcm_check -> qcm_clone;
			qcm_check -> qcm_readFile;
			qcm_check -> qcm_runTests;
		}
	}
	subgraph cluster_vercheck {
		label = "vercheck (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_main_go {
			label = "main.go";
			labelloc="t";
			rankdir=TB;
			vercheck_pbgo [label = "pbgo, Constant";shape = box;];
			vercheck_pbgo -> vercheck_main;
			vercheck_grpcpb [label = "grpcpb, Constant";shape = box;];
			vercheck_grpcpb -> vercheck_main;
			vercheck_main [label = "main, Function";shape = box;];
			vercheck_checkVersions [label = "checkVersions, Function";shape = box;];
			vercheck_checkVersions -> vercheck_main;
			vercheck_toolVersion [label = "toolVersion, Function";shape = box;];
			vercheck_toolVersion -> vercheck_main;
			vercheck_scan [label = "scan, Function";shape = box;];
			vercheck_scan -> vercheck_main;
			vercheck_check [label = "check, Function";shape = box;];
			vercheck_check -> vercheck_scan;
		}
	}
	subgraph cluster_approvelist {
		label = "approvelist (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_main_go {
			label = "main.go";
			labelloc="t";
			rankdir=TB;
			approvelist_srcSuffix [label = "srcSuffix, Constant";shape = box;];
			approvelist_srcSuffix -> approvelist_loadApproveSheet;
			approvelist_srcSuffix -> approvelist_saveApproveSheet;
			approvelist_dstSuffix [label = "dstSuffix, Constant";shape = box;];
			approvelist_dstSuffix -> approvelist_saveApproveSheet;
			approvelist_pass [label = "pass, Constant";shape = box;];
			approvelist_pass -> approvelist_main;
			approvelist_fail [label = "fail, Constant";shape = box;];
			approvelist_fail -> approvelist_main;
			approvelist_NewQuickFeed [label = "NewQuickFeed, Function";shape = box;];
			approvelist_NewQuickFeed -> approvelist_getSubmissions;
			approvelist_main [label = "main, Function";shape = box;];
			approvelist_output [label = "output, Struct";shape = box;];
			approvelist_output -> approvelist_main;
			approvelist_output -> approvelist_newOutput;
			approvelist_output -> approvelist_addFS;
			approvelist_output -> approvelist_addQF;
			approvelist_output -> approvelist_addBoth;
			approvelist_both [label = "both, Field";shape = box;];
			approvelist_both -> approvelist_newOutput;
			approvelist_both -> approvelist_addBoth;
			approvelist_both -> approvelist_Print;
			approvelist_fs [label = "fs, Field";shape = box;];
			approvelist_fs -> approvelist_newOutput;
			approvelist_fs -> approvelist_addFS;
			approvelist_fs -> approvelist_Print;
			approvelist_negRow [label = "negRow, Field";shape = box;];
			approvelist_negRow -> approvelist_newOutput;
			approvelist_negRow -> approvelist_addQF;
			approvelist_qf [label = "qf, Field";shape = box;];
			approvelist_qf -> approvelist_newOutput;
			approvelist_qf -> approvelist_addQF;
			approvelist_qf -> approvelist_Print;
			approvelist_newOutput [label = "newOutput, Function";shape = box;];
			approvelist_newOutput -> approvelist_main;
			approvelist_addFS [label = "addFS, Method";shape = box;];
			approvelist_addFS -> approvelist_main;
			approvelist_addQF [label = "addQF, Method";shape = box;];
			approvelist_addQF -> approvelist_main;
			approvelist_addBoth [label = "addBoth, Method";shape = box;];
			approvelist_addBoth -> approvelist_main;
			approvelist_Print [label = "Print, Method";shape = box;];
			approvelist_Print -> approvelist_main;
			approvelist_approved [label = "approved, Function";shape = box;];
			approvelist_approved -> approvelist_main;
			approvelist_head [label = "head, Function";shape = box;];
			approvelist_head -> approvelist_Print;
			approvelist_out [label = "out, Function";shape = box;];
			approvelist_out -> approvelist_addFS;
			approvelist_out -> approvelist_addBoth;
			approvelist_outNoRow [label = "outNoRow, Function";shape = box;];
			approvelist_outNoRow -> approvelist_addQF;
			approvelist_mark [label = "mark, Function";shape = box;];
			approvelist_mark -> approvelist_out;
			approvelist_mark -> approvelist_outNoRow;
			approvelist_Keys [label = "Keys, Function";shape = box;];
			approvelist_Keys -> approvelist_Print;
			approvelist_getSubmissions [label = "getSubmissions, Function";shape = box;];
			approvelist_getSubmissions -> approvelist_main;
			approvelist_partialMatch [label = "partialMatch, Function";shape = box;];
			approvelist_partialMatch -> approvelist_lookupRowByName;
			approvelist_fileName [label = "fileName, Function";shape = box;];
			approvelist_fileName -> approvelist_loadApproveSheet;
			approvelist_fileName -> approvelist_saveApproveSheet;
			approvelist_firstNameColumn [label = "firstNameColumn, Constant";shape = box;];
			approvelist_firstNameColumn -> approvelist_newApproveSheet;
			approvelist_firstNameColumn -> approvelist_fullName;
			approvelist_lastNameColumn [label = "lastNameColumn, Constant";shape = box;];
			approvelist_lastNameColumn -> approvelist_newApproveSheet;
			approvelist_lastNameColumn -> approvelist_fullName;
			approvelist_studentNumColumn [label = "studentNumColumn, Constant";shape = box;];
			approvelist_studentNumColumn -> approvelist_newApproveSheet;
			approvelist_studentNumColumn -> approvelist_studentNum;
			approvelist_candidateNumColumn [label = "candidateNumColumn, Constant";shape = box;];
			approvelist_candidateNumColumn -> approvelist_newApproveSheet;
			approvelist_approvedColumn [label = "approvedColumn, Constant";shape = box;];
			approvelist_approvedColumn -> approvelist_newApproveSheet;
			approvelist_approvedColumn -> approvelist_approveCell;
			approvelist_approveSheet [label = "approveSheet, Struct";shape = box;];
			approvelist_approveSheet -> approvelist_fileName;
			approvelist_approveSheet -> approvelist_newApproveSheet;
			approvelist_approveSheet -> approvelist_fullName;
			approvelist_approveSheet -> approvelist_studentNum;
			approvelist_approveSheet -> approvelist_lookupStudentByRow;
			approvelist_approveSheet -> approvelist_lookupRow;
			approvelist_approveSheet -> approvelist_lookupRowByName;
			approvelist_approveSheet -> approvelist_setApproveCell;
			approvelist_approveSheet -> approvelist_approveCell;
			approvelist_approveMap [label = "approveMap, Field";shape = box;];
			approvelist_approveMap -> approvelist_main;
			approvelist_approveMap -> approvelist_newApproveSheet;
			approvelist_approveMap -> approvelist_setApproveCell;
			approvelist_approveNameMap [label = "approveNameMap, Field";shape = box;];
			approvelist_approveNameMap -> approvelist_newApproveSheet;
			approvelist_approveNameMap -> approvelist_lookupRowByName;
			approvelist_approveStudMap [label = "approveStudMap, Field";shape = box;];
			approvelist_approveStudMap -> approvelist_main;
			approvelist_approveStudMap -> approvelist_newApproveSheet;
			approvelist_approveStudMap -> approvelist_lookupRow;
			approvelist_headerIndexes [label = "headerIndexes, Field";shape = box;];
			approvelist_headerIndexes -> approvelist_newApproveSheet;
			approvelist_headerIndexes -> approvelist_fullName;
			approvelist_headerIndexes -> approvelist_studentNum;
			approvelist_headerLabels [label = "headerLabels, Field";shape = box;];
			approvelist_headerLabels -> approvelist_newApproveSheet;
			approvelist_headerLabels -> approvelist_approveCell;
			approvelist_rows [label = "rows, Field";shape = box;];
			approvelist_rows -> approvelist_newApproveSheet;
			approvelist_rows -> approvelist_lookupStudentByRow;
			approvelist_sheetName [label = "sheetName, Field";shape = box;];
			approvelist_sheetName -> approvelist_main;
			approvelist_sheetName -> approvelist_newApproveSheet;
			approvelist_newApproveSheet [label = "newApproveSheet, Function";shape = box;];
			approvelist_newApproveSheet -> approvelist_loadApproveSheet;
			approvelist_fullName [label = "fullName, Method";shape = box;];
			approvelist_fullName -> approvelist_newApproveSheet;
			approvelist_fullName -> approvelist_lookupStudentByRow;
			approvelist_studentNum [label = "studentNum, Method";shape = box;];
			approvelist_studentNum -> approvelist_newApproveSheet;
			approvelist_lookupStudentByRow [label = "lookupStudentByRow, Method";shape = box;];
			approvelist_lookupStudentByRow -> approvelist_main;
			approvelist_lookupRow [label = "lookupRow, Method";shape = box;];
			approvelist_lookupRow -> approvelist_main;
			approvelist_lookupRowByName [label = "lookupRowByName, Method";shape = box;];
			approvelist_lookupRowByName -> approvelist_main;
			approvelist_setApproveCell [label = "setApproveCell, Method";shape = box;];
			approvelist_setApproveCell -> approvelist_main;
			approvelist_approveCell [label = "approveCell, Method";shape = box;];
			approvelist_approveCell -> approvelist_setApproveCell;
			approvelist_loadApproveSheet [label = "loadApproveSheet, Function";shape = box;];
			approvelist_loadApproveSheet -> approvelist_main;
			approvelist_saveApproveSheet [label = "saveApproveSheet, Function";shape = box;];
			approvelist_saveApproveSheet -> approvelist_main;
		}
	}
	subgraph cluster_kit {
		label = "kit (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sh {
		label = "sh (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_cmd_go {
			label = "cmd.go";
			labelloc="t";
			rankdir=TB;
			sh_MustRun [label = "MustRun, Function";shape = box;];
			sh_Run [label = "Run, Function";shape = box;];
			sh_RunA [label = "RunA, Function";shape = box;];
			sh_RunA -> sh_Run;
			sh_Output [label = "Output, Function";shape = box;];
			sh_OutputA [label = "OutputA, Function";shape = box;];
			sh_OutputA -> sh_RunRaceTest;
			sh_OutputA -> sh_Output;
			sh_OutputA -> sh_RunCountTest;
			sh_OutputErr [label = "OutputErr, Function";shape = box;];
			sh_OutputErrA [label = "OutputErrA, Function";shape = box;];
			sh_OutputErrA -> sh_OutputErr;
			sh_RunCountTest [label = "RunCountTest, Function";shape = box;];
			sh_RunRaceTest [label = "RunRaceTest, Function";shape = box;];
			sh_internalRun [label = "internalRun, Function";shape = box;];
			sh_internalRun -> sh_RunA;
			sh_internalRun -> sh_OutputA;
			sh_internalRun -> sh_OutputErrA;
			sh_cmdRan [label = "cmdRan, Function";shape = box;];
			sh_cmdRan -> sh_internalRun;
		}
		sh_Run -> sh_TestRun;
		sh_Output -> sh_TestOutput;
		sh_Output -> sh_TestLintAG;
		subgraph cluster_cmd_race_test_go {
			label = "cmd_race_test.go";
			labelloc="t";
			rankdir=TB;
			sh_TestRunRaceTest [label = "TestRunRaceTest, Function";shape = box;];
		}
		subgraph cluster_cmd_test_go {
			label = "cmd_test.go";
			labelloc="t";
			rankdir=TB;
			sh_TestRun [label = "TestRun, Function";shape = box;];
			sh_TestOutput [label = "TestOutput, Function";shape = box;];
			sh_TestLintAG [label = "TestLintAG, Function";shape = box;];
		}
		subgraph cluster_cmd_todo_check_go {
			label = "cmd_todo_check.go";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_race_test_go {
			label = "race_test.go";
			labelloc="t";
			rankdir=TB;
			sh_TestWithDataRace [label = "TestWithDataRace, Function";shape = box;];
			sh_TestWithoutDataRace [label = "TestWithoutDataRace, Function";shape = box;];
		}
	}
	subgraph cluster_src {
		label = "src (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_main {
		label = "main (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_java {
		label = "java (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_exercise {
		label = "exercise (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_doc_go {
			label = "doc.go";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_main_test_go {
			label = "main_test.go";
			labelloc="t";
			rankdir=TB;
			exercise_scores [label = "scores, Variable";shape = box;];
			exercise_scores -> exercise_TestMain;
			exercise_TestMain [label = "TestMain, Function";shape = box;];
		}
		exercise_scores -> exercise_TestMultipleChoice0;
		exercise_scores -> exercise_init;
		exercise_scores -> exercise_TestMultipleChoice1;
		exercise_scores -> exercise_TestMultipleChoice2;
		exercise_scores -> exercise_TestMultipleChoice3;
		exercise_scores -> exercise_TestMultipleChoiceWithFail;
		subgraph cluster_multiple_choice_go {
			label = "multiple_choice.go";
			labelloc="t";
			rankdir=TB;
			exercise_qNumRegExp [label = "qNumRegExp, Variable";shape = box;];
			exercise_qNumRegExp -> exercise_ParseMarkdownAnswers;
			exercise_selectionRegExp [label = "selectionRegExp, Variable";shape = box;];
			exercise_selectionRegExp -> exercise_ParseMarkdownAnswers;
			exercise_ParseMarkdownAnswers [label = "ParseMarkdownAnswers, Function";shape = box;];
			exercise_ParseMarkdownAnswers -> exercise_MultipleChoice;
			exercise_CheckMultipleChoice [label = "CheckMultipleChoice, Function";shape = box;];
			exercise_CheckMultipleChoice -> exercise_MultipleChoice;
			exercise_Print [label = "Print, Function";shape = box;];
			exercise_MultipleChoice [label = "MultipleChoice, Function";shape = box;];
		}
		exercise_ParseMarkdownAnswers -> exercise_TestMultipleChoice0;
		exercise_ParseMarkdownAnswers -> exercise_TestMultipleChoice1;
		exercise_ParseMarkdownAnswers -> exercise_TestMultipleChoice2;
		exercise_ParseMarkdownAnswers -> exercise_TestMultipleChoice3;
		exercise_ParseMarkdownAnswers -> exercise_TestMultipleChoiceWithFail;
		exercise_ParseMarkdownAnswers -> exercise_TestParseMarkdownAnswers;
		exercise_CheckMultipleChoice -> exercise_TestMultipleChoice0;
		exercise_CheckMultipleChoice -> exercise_TestMultipleChoice1;
		exercise_CheckMultipleChoice -> exercise_TestMultipleChoice2;
		exercise_CheckMultipleChoice -> exercise_TestMultipleChoice3;
		exercise_CheckMultipleChoice -> exercise_TestMultipleChoiceWithFail;
		exercise_CheckMultipleChoice -> exercise_TestCheckMultipleChoice;
		exercise_Print -> exercise_TestCheckMultipleChoice;
		subgraph cluster_multiple_choice_test_go {
			label = "multiple_choice_test.go";
			labelloc="t";
			rankdir=TB;
			exercise_init [label = "init, Function";shape = box;];
			exercise_tests [label = "tests, Variable";shape = box;];
			exercise_tests -> exercise_TestMultipleChoice0;
			exercise_tests -> exercise_init;
			exercise_tests -> exercise_TestMultipleChoice1;
			exercise_tests -> exercise_TestMultipleChoice2;
			exercise_tests -> exercise_TestMultipleChoice3;
			exercise_tests -> exercise_TestMultipleChoiceWithFail;
			exercise_tests -> exercise_TestParseMarkdownAnswers;
			exercise_tests -> exercise_TestCheckMultipleChoice;
			exercise_TestParseMarkdownAnswers [label = "TestParseMarkdownAnswers, Function";shape = box;];
			exercise_TestCheckMultipleChoice [label = "TestCheckMultipleChoice, Function";shape = box;];
			exercise_failTestEnvName [label = "failTestEnvName, Constant";shape = box;];
			exercise_failTestEnvName -> exercise_TestMultipleChoice0;
			exercise_failTestEnvName -> exercise_TestMultipleChoice1;
			exercise_failTestEnvName -> exercise_TestMultipleChoice2;
			exercise_failTestEnvName -> exercise_TestMultipleChoice3;
			exercise_failTestEnvName -> exercise_TestMultipleChoiceWithFail;
			exercise_TestMultipleChoice0 [label = "TestMultipleChoice0, Function";shape = box;];
			exercise_TestMultipleChoice0 -> exercise_init;
			exercise_TestMultipleChoice1 [label = "TestMultipleChoice1, Function";shape = box;];
			exercise_TestMultipleChoice1 -> exercise_init;
			exercise_TestMultipleChoice2 [label = "TestMultipleChoice2, Function";shape = box;];
			exercise_TestMultipleChoice2 -> exercise_init;
			exercise_TestMultipleChoice3 [label = "TestMultipleChoice3, Function";shape = box;];
			exercise_TestMultipleChoice3 -> exercise_init;
			exercise_TestMultipleChoiceWithFail [label = "TestMultipleChoiceWithFail, Function";shape = box;];
			exercise_TestMultipleChoiceWithFail -> exercise_init;
		}
	}
	subgraph cluster_internal {
		label = "internal (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_test {
		label = "test (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_callframe_go {
			label = "callframe.go";
			labelloc="t";
			rankdir=TB;
			test_testPkg [label = "testPkg, Constant";shape = box;];
			test_testPkg -> test_CallFrame;
			test_scorePkg [label = "scorePkg, Constant";shape = box;];
			test_scorePkg -> test_CallFrame;
			test_CallFrame [label = "CallFrame, Function";shape = box;];
			test_unwindCallFrames [label = "unwindCallFrames, Function";shape = box;];
			test_unwindCallFrames -> test_CallFrame;
		}
		test_testPkg -> test_TestCallFrame;
		test_testPkg -> test_TestFrame;
		test_testPkg -> test_TestFrame2;
		test_testPkg -> test_TestFrame3;
		test_CallFrame -> test_TestCallFrame;
		test_CallFrame -> test_IsCaller;
		test_CallFrame -> test_CallerName;
		test_CallFrame -> test_ErrMsg;
		test_unwindCallFrames -> test_TestFrame;
		test_unwindCallFrames -> test_TestFrame2;
		test_unwindCallFrames -> test_TestFrame3;
		subgraph cluster_callframe_test_go {
			label = "callframe_test.go";
			labelloc="t";
			rankdir=TB;
			test_TestCallFrame [label = "TestCallFrame, Function";shape = box;];
			test_TestFrame [label = "TestFrame, Function";shape = box;];
			test_TestFrame2 [label = "TestFrame2, Function";shape = box;];
			test_TestFrame3 [label = "TestFrame3, Function";shape = box;];
		}
		subgraph cluster_testname_go {
			label = "testname.go";
			labelloc="t";
			rankdir=TB;
			test_Name [label = "Name, Function";shape = box;];
			test_IsCaller [label = "IsCaller, Function";shape = box;];
			test_CallerName [label = "CallerName, Function";shape = box;];
			test_ErrMsg [label = "ErrMsg, Function";shape = box;];
			test_ErrMsg -> test_Name;
			test_stripPkg [label = "stripPkg, Function";shape = box;];
			test_stripPkg -> test_IsCaller;
			test_lastElem [label = "lastElem, Function";shape = box;];
			test_lastElem -> test_Name;
			test_lastElem -> test_CallerName;
			test_firstElem [label = "firstElem, Function";shape = box;];
			test_firstElem -> test_IsCaller;
		}
		test_Name -> test_TestTestNamePanic;
		test_IsCaller -> test_isCallerShouldBeFalse;
		test_IsCaller -> test_TestIsCaller;
		test_CallerName -> test_TestCallerName;
		test_CallerName -> test_callerName;
		test_stripPkg -> test_CallFrame;
		subgraph cluster_testname_test_go {
			label = "testname_test.go";
			labelloc="t";
			rankdir=TB;
			test_fib [label = "fib, Function";shape = box;];
			test_fib -> test_TestTestNamePanic;
			test_TestTestNamePanic [label = "TestTestNamePanic, Function";shape = box;];
			test_isCallerShouldBeFalse [label = "isCallerShouldBeFalse, Function";shape = box;];
			test_isCallerShouldBeFalse -> test_TestIsCaller;
			test_TestIsCaller [label = "TestIsCaller, Function";shape = box;];
			test_callerName [label = "callerName, Function";shape = box;];
			test_callerName -> test_TestCallerName;
			test_TestCallerName [label = "TestCallerName, Function";shape = box;];
		}
	}
	subgraph cluster_testdata {
		label = "testdata (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_a {
		label = "a (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_a_go {
			label = "a.go";
			labelloc="t";
			rankdir=TB;
			a_TestNoArgs [label = "TestNoArgs, Function";shape = box;];
			a_NotATest [label = "NotATest, Function";shape = box;];
			a_TestFire [label = "TestFire, Function";shape = box;];
			a_TestNoTParam [label = "TestNoTParam, Function";shape = box;];
			a_TesttooManyParams [label = "TesttooManyParams, Function";shape = box;];
			a_TesttooManyNames [label = "TesttooManyNames, Function";shape = box;];
			a_TestnoTParam [label = "TestnoTParam, Function";shape = box;];
		}
	}
	subgraph cluster_score {
		label = "score (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_doc_go {
			label = "doc.go";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_generate_go {
			label = "generate.go";
			labelloc="t";
			rankdir=TB;
		}
		subgraph cluster_gradingscheme_go {
			label = "gradingscheme.go";
			labelloc="t";
			rankdir=TB;
			score_GradingScheme [label = "GradingScheme, Struct";shape = box;];
			score_GradingScheme -> score_;
			score_GradeNames [label = "GradeNames, Field";shape = box;];
			score_GradeNames -> score_Grade;
			score_GradePoints [label = "GradePoints, Field";shape = box;];
			score_GradePoints -> score_Grade;
			score_ID [label = "ID, Field";shape = box;];
			score_Name [label = "Name, Field";shape = box;];
			score_Grade [label = "Grade, Method";shape = box;];
		}
		score_GradingScheme -> score_TestPassFailGradingScheme;
		score_GradingScheme -> score_TestCBiasGradingScheme;
		score_GradingScheme -> score_TestNoBiasGradingScheme;
		score_GradingScheme -> score_TestSumGrade;
		score_GradeNames -> score_TestPassFailGradingScheme;
		score_GradeNames -> score_TestCBiasGradingScheme;
		score_GradeNames -> score_TestNoBiasGradingScheme;
		score_GradeNames -> score_TestSumGrade;
		score_GradePoints -> score_TestPassFailGradingScheme;
		score_GradePoints -> score_TestCBiasGradingScheme;
		score_GradePoints -> score_TestNoBiasGradingScheme;
		score_GradePoints -> score_TestSumGrade;
		score_ID -> score_TestPassFailGradingScheme;
		score_ID -> score_TestCBiasGradingScheme;
		score_ID -> score_TestNoBiasGradingScheme;
		score_Name -> score_TestPassFailGradingScheme;
		score_Name -> score_TestCBiasGradingScheme;
		score_Name -> score_TestNoBiasGradingScheme;
		score_Name -> score_TestSumGrade;
		score_Grade -> score_TestNoBiasGradingScheme;
		score_Grade -> score_TestPassFailGradingScheme;
		score_Grade -> score_TestCBiasGradingScheme;
		score_Grade -> score_TestSumGrade;
		subgraph cluster_gradingscheme_test_go {
			label = "gradingscheme_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestPassFailGradingScheme [label = "TestPassFailGradingScheme, Function";shape = box;];
			score_TestCBiasGradingScheme [label = "TestCBiasGradingScheme, Function";shape = box;];
			score_TestNoBiasGradingScheme [label = "TestNoBiasGradingScheme, Function";shape = box;];
		}
		subgraph cluster_main_test_go {
			label = "main_test.go";
			labelloc="t";
			rankdir=TB;
			score_scores [label = "scores, Variable";shape = box;];
			score_scores -> score_TestMain;
			score_TestMain [label = "TestMain, Function";shape = box;];
		}
		score_scores -> score_TestPanicTriangularPanicWithMsg;
		score_scores -> score_TestPanicHandlerWithMsg;
		score_scores -> score_init;
		score_scores -> score_TestPanicTriangularBefore;
		score_scores -> score_TestPanicTriangularPanic;
		score_scores -> score_TestPanicTriangularAfter;
		score_scores -> score_TestPanicHandler;
		score_scores -> score_TestDuplicateAdd;
		subgraph cluster_panic_test_go {
			label = "panic_test.go";
			labelloc="t";
			rankdir=TB;
			score_panicTestEnvName [label = "panicTestEnvName, Constant";shape = box;];
			score_panicTestEnvName -> score_TestPanicTriangularPanicWithMsg;
			score_panicTestEnvName -> score_TestPanicHandlerWithMsg;
			score_panicTestEnvName -> score_TestPanicTriangularPanic;
			score_panicTestEnvName -> score_TestPanicHandler;
			score_triangularTests [label = "triangularTests, Variable";shape = box;];
			score_triangularTests -> score_TestPanicHandler;
			score_triangularTests -> score_TestPanicTriangularPanicWithMsg;
			score_triangularTests -> score_TestPanicHandlerWithMsg;
			score_triangularTests -> score_init;
			score_triangularTests -> score_TestPanicTriangularBefore;
			score_triangularTests -> score_TestPanicTriangularPanic;
			score_triangularTests -> score_TestPanicTriangularAfter;
			score_init [label = "init, Function";shape = box;];
			score_TestPanicTriangularBefore [label = "TestPanicTriangularBefore, Function";shape = box;];
			score_TestPanicTriangularBefore -> score_init;
			score_TestPanicTriangularPanic [label = "TestPanicTriangularPanic, Function";shape = box;];
			score_TestPanicTriangularPanic -> score_init;
			score_TestPanicTriangularAfter [label = "TestPanicTriangularAfter, Function";shape = box;];
			score_TestPanicTriangularAfter -> score_init;
			score_TestPanicHandler [label = "TestPanicHandler, Function";shape = box;];
			score_TestPanicHandler -> score_init;
			score_TestPanicTriangularPanicWithMsg [label = "TestPanicTriangularPanicWithMsg, Function";shape = box;];
			score_TestPanicTriangularPanicWithMsg -> score_init;
			score_TestPanicHandlerWithMsg [label = "TestPanicHandlerWithMsg, Function";shape = box;];
			score_TestPanicHandlerWithMsg -> score_init;
			score_triangular [label = "triangular, Function";shape = box;];
			score_triangular -> score_TestPanicTriangularBefore;
			score_triangular -> score_TestPanicTriangularAfter;
			score_triangularPanic [label = "triangularPanic, Function";shape = box;];
			score_triangularPanic -> score_TestPanicHandler;
			score_triangularPanic -> score_TestPanicTriangularPanicWithMsg;
			score_triangularPanic -> score_TestPanicHandlerWithMsg;
			score_triangularPanic -> score_TestPanicTriangularPanic;
		}
		subgraph cluster_parse_go {
			label = "parse.go";
			labelloc="t";
			rankdir=TB;
			score_ErrScoreNotFound [label = "ErrScoreNotFound, Variable";shape = box;];
			score_ErrScoreNotFound -> score_parse;
			score_ErrScoreInterval [label = "ErrScoreInterval, Variable";shape = box;];
			score_ErrScoreInterval -> score_isValid;
			score_ErrMaxScore [label = "ErrMaxScore, Variable";shape = box;];
			score_ErrMaxScore -> score_isValid;
			score_ErrWeight [label = "ErrWeight, Variable";shape = box;];
			score_ErrWeight -> score_isValid;
			score_ErrEmptyTestName [label = "ErrEmptyTestName, Variable";shape = box;];
			score_ErrEmptyTestName -> score_isValid;
			score_ErrSecret [label = "ErrSecret, Variable";shape = box;];
			score_ErrSecret -> score_isValid;
			score_ErrSuppressedSecret [label = "ErrSuppressedSecret, Variable";shape = box;];
			score_ErrSuppressedSecret -> score_parse;
			score_parse [label = "parse, Function";shape = box;];
			score_isValid [label = "isValid, Method";shape = box;];
			score_isValid -> score_parse;
			score_HasPrefix [label = "HasPrefix, Function";shape = box;];
		}
		score_ErrScoreNotFound -> score_TestParseNonJSONStrings;
		score_ErrScoreInterval -> score_TestParseJSONStrings;
		score_ErrScoreInterval -> score_TestValidate;
		score_ErrMaxScore -> score_TestParseJSONStrings;
		score_ErrMaxScore -> score_internalAdd;
		score_ErrMaxScore -> score_TestValidate;
		score_ErrWeight -> score_TestParseJSONStrings;
		score_ErrWeight -> score_internalAdd;
		score_ErrWeight -> score_TestValidate;
		score_ErrEmptyTestName -> score_TestParseJSONStrings;
		score_ErrSecret -> score_TestParseJSONStrings;
		score_parse -> score_TestParseNonJSONStrings;
		score_parse -> score_TestParseJSONStrings;
		score_parse -> score_ExtractResults;
		score_isValid -> score_TestScoreIsValid;
		score_isValid -> score_Validate;
		score_isValid -> score_validate;
		score_HasPrefix -> score_ExtractResults;
		subgraph cluster_parse_test_go {
			label = "parse_test.go";
			labelloc="t";
			rankdir=TB;
			score_theSecret [label = "theSecret, Constant";shape = box;];
			score_theSecret -> score_TestParseJSONStrings;
			score_theSecret -> score_TestScoreIsValid;
			score_theSecret -> score_;
			score_theSecret -> score_TestParseNonJSONStrings;
			score_nonJSONLog [label = "nonJSONLog, Variable";shape = box;];
			score_nonJSONLog -> score_TestParseNonJSONStrings;
			score_TestParseNonJSONStrings [label = "TestParseNonJSONStrings, Function";shape = box;];
			score_jsonLog [label = "jsonLog, Variable";shape = box;];
			score_jsonLog -> score_TestParseJSONStrings;
			score_TestParseJSONStrings [label = "TestParseJSONStrings, Function";shape = box;];
			score_scoreValidTests [label = "scoreValidTests, Variable";shape = box;];
			score_scoreValidTests -> score_TestScoreIsValid;
			score_TestScoreIsValid [label = "TestScoreIsValid, Function";shape = box;];
			score_clone [label = "clone, Function";shape = box;];
			score_clone -> score_TestScoreIsValid;
		}
		score_theSecret -> score_TestAddScore;
		subgraph cluster_registry_go {
			label = "registry.go";
			labelloc="t";
			rankdir=TB;
			score_registry [label = "registry, Struct";shape = box;];
			score_registry -> score_AddSubWithTask;
			score_registry -> score_Max;
			score_registry -> score_Min;
			score_registry -> score_MaxByName;
			score_registry -> score_MinByName;
			score_registry -> score_internalAdd;
			score_registry -> score_;
			score_registry -> score_NewRegistry;
			score_registry -> score_Validate;
			score_registry -> score_PrintTestInfo;
			score_registry -> score_Add;
			score_registry -> score_AddWithTask;
			score_registry -> score_AddSub;
			score_scores [label = "scores, Field";shape = box;];
			score_scores -> score_internalAdd;
			score_scores -> score_get;
			score_scores -> score_NewRegistry;
			score_scores -> score_Validate;
			score_scores -> score_PrintTestInfo;
			score_testNames [label = "testNames, Field";shape = box;];
			score_testNames -> score_internalAdd;
			score_testNames -> score_NewRegistry;
			score_testNames -> score_PrintTestInfo;
			score_NewRegistry [label = "NewRegistry, Function";shape = box;];
			score_Validate [label = "Validate, Method";shape = box;];
			score_PrintTestInfo [label = "PrintTestInfo, Method";shape = box;];
			score_Add [label = "Add, Method";shape = box;];
			score_AddWithTask [label = "AddWithTask, Method";shape = box;];
			score_AddSub [label = "AddSub, Method";shape = box;];
			score_AddSubWithTask [label = "AddSubWithTask, Method";shape = box;];
			score_Max [label = "Max, Method";shape = box;];
			score_Min [label = "Min, Method";shape = box;];
			score_MaxByName [label = "MaxByName, Method";shape = box;];
			score_MinByName [label = "MinByName, Method";shape = box;];
			score_ErrDuplicateScoreTest [label = "ErrDuplicateScoreTest, Variable";shape = box;];
			score_ErrDuplicateScoreTest -> score_internalAdd;
			score_ErrUnauthorizedLookup [label = "ErrUnauthorizedLookup, Variable";shape = box;];
			score_ErrUnauthorizedLookup -> score_get;
			score_ErrUnknownScoreTest [label = "ErrUnknownScoreTest, Variable";shape = box;];
			score_ErrUnknownScoreTest -> score_get;
			score_internalAdd [label = "internalAdd, Method";shape = box;];
			score_internalAdd -> score_AddSubWithTask;
			score_internalAdd -> score_Add;
			score_internalAdd -> score_AddWithTask;
			score_internalAdd -> score_AddSub;
			score_get [label = "get, Method";shape = box;];
			score_get -> score_Max;
			score_get -> score_Min;
			score_get -> score_MaxByName;
			score_get -> score_MinByName;
		}
		score_NewRegistry -> score_;
		score_NewRegistry -> score_fibonacci;
		score_Validate -> score_TestMain;
		score_PrintTestInfo -> score_TestMain;
		score_Add -> score_init;
		score_Add -> score_TestDuplicateAdd;
		score_AddSub -> score_init;
		score_Max -> score_TestPanicTriangularPanicWithMsg;
		score_Max -> score_TestPanicHandlerWithMsg;
		score_Max -> score_TestPanicTriangularBefore;
		score_Max -> score_TestPanicTriangularPanic;
		score_Max -> score_TestPanicTriangularAfter;
		score_Max -> score_TestPanicHandler;
		score_Max -> score_TestFibonacciMax;
		score_Min -> score_TestFibonacciMin;
		score_MaxByName -> score_TestFibonacciSubTest;
		score_MaxByName -> score_TestStudentAttackCode;
		score_MinByName -> score_TestFibonacciSubTest;
		score_MinByName -> score_TestStudentAttackCode;
		subgraph cluster_registry_example_test_go {
			label = "registry_example_test.go";
			labelloc="t";
			rankdir=TB;
			score_fibonacci [label = "fibonacci, Function";shape = box;];
			score_fibonacci -> score_TestFibonacciSubTest;
			score_fibonacci -> score_fibonacci;
			score_fibonacci -> score_TestFibonacciMax;
			score_fibonacci -> score_TestFibonacciMin;
			score_scoreRegistry [label = "scoreRegistry, Variable";shape = box;];
			score_scoreRegistry -> score_TestFibonacciSubTest;
			score_scoreRegistry -> score_TestStudentAttackCode;
			score_scoreRegistry -> score_init;
			score_scoreRegistry -> score_TestFibonacciMax;
			score_scoreRegistry -> score_TestFibonacciMin;
			score_init [label = "init, Function";shape = box;];
			score_numCorrect [label = "numCorrect, Constant";shape = box;];
			score_numCorrect -> score_TestFibonacciSubTest;
			score_numCorrect -> score_TestFibonacciMax;
			score_numCorrect -> score_TestFibonacciMin;
			score_fibonacciTests [label = "fibonacciTests, Variable";shape = box;];
			score_fibonacciTests -> score_TestFibonacciSubTest;
			score_fibonacciTests -> score_init;
			score_fibonacciTests -> score_TestFibonacciMax;
			score_fibonacciTests -> score_TestFibonacciMin;
			score_TestFibonacciMax [label = "TestFibonacciMax, Function";shape = box;];
			score_TestFibonacciMax -> score_init;
			score_once [label = "once, Variable";shape = box;];
			score_once -> score_TestFibonacciMin;
			score_ran [label = "ran, Variable";shape = box;];
			score_ran -> score_TestFibonacciMin;
			score_TestFibonacciMin [label = "TestFibonacciMin, Function";shape = box;];
			score_TestFibonacciMin -> score_init;
			score_TestFibonacciSubTest [label = "TestFibonacciSubTest, Function";shape = box;];
			score_TestFibonacciSubTest -> score_init;
			score_subTestName [label = "subTestName, Function";shape = box;];
			score_subTestName -> score_TestFibonacciSubTest;
			score_subTestName -> score_init;
			score_TestStudentAttackCode [label = "TestStudentAttackCode, Function";shape = box;];
			score_TestDuplicateAdd [label = "TestDuplicateAdd, Function";shape = box;];
			score_TestDuplicateAdd -> score_TestDuplicateAdd;
		}
		subgraph cluster_registry_test_go {
			label = "registry_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestPrintTestInfoOrder [label = "TestPrintTestInfoOrder, Function";shape = box;];
		}
		subgraph cluster_results_go {
			label = "results.go";
			labelloc="t";
			rankdir=TB;
			score_Results [label = "Results, Struct";shape = box;];
			score_Results -> score_Error;
			score_Results -> score_ExtractResults;
			score_Results -> score_;
			score_Results -> score_newResults;
			score_Results -> score_toScoreSlice;
			score_Results -> score_addScore;
			score_Results -> score_validate;
			score_Results -> score_Sum;
			score_Results -> score_TaskSum;
			score_BuildInfo [label = "BuildInfo, Field";shape = box;];
			score_BuildInfo -> score_ExtractResults;
			score_Scores [label = "Scores, Field";shape = box;];
			score_Scores -> score_ExtractResults;
			score_Scores -> score_newResults;
			score_Scores -> score_validate;
			score_Scores -> score_internalSum;
			score_scoreMap [label = "scoreMap, Field";shape = box;];
			score_scoreMap -> score_newResults;
			score_scoreMap -> score_toScoreSlice;
			score_scoreMap -> score_addScore;
			score_testNames [label = "testNames, Field";shape = box;];
			score_testNames -> score_newResults;
			score_testNames -> score_toScoreSlice;
			score_testNames -> score_addScore;
			score_newResults [label = "newResults, Function";shape = box;];
			score_newResults -> score_ExtractResults;
			score_toScoreSlice [label = "toScoreSlice, Method";shape = box;];
			score_toScoreSlice -> score_ExtractResults;
			score_toScoreSlice -> score_newResults;
			score_addScore [label = "addScore, Method";shape = box;];
			score_addScore -> score_ExtractResults;
			score_addScore -> score_newResults;
			score_validate [label = "validate, Method";shape = box;];
			score_Sum [label = "Sum, Method";shape = box;];
			score_TaskSum [label = "TaskSum, Method";shape = box;];
			score_TaskSum -> score_Sum;
			score_internalSum [label = "internalSum, Method";shape = box;];
			score_internalSum -> score_TaskSum;
			score_weightedScore [label = "weightedScore, Function";shape = box;];
			score_weightedScore -> score_internalSum;
			score_parseErrors [label = "parseErrors, Class";shape = box;];
			score_parseErrors -> score_weightedScore;
			score_parseErrors -> score_ExtractResults;
			score_Error [label = "Error, Method";shape = box;];
			score_Error -> score_Error;
			score_ExtractResults [label = "ExtractResults, Function";shape = box;];
		}
		score_Results -> score_TestAddScore;
		score_Results -> score_TestScoreNil;
		score_Results -> score_;
		score_Results -> score_TestMarkdownComment;
		score_BuildInfo -> score_TestExtractResultsExecTime;
		score_BuildInfo -> score_TestExtractResults;
		score_BuildInfo -> score_TestExtractResultsWithWhitespace;
		score_Scores -> score_TestAddScore;
		score_Scores -> score_TestScoreNil;
		score_Scores -> score_MarkdownComment;
		score_Scores -> score_TestMarkdownComment;
		score_Scores -> score_TestExtractResultsWithMultipleNonZeroScoreLines;
		score_Scores -> score_TestExtractResultsWithPanickedAndMaliciousScoreLines;
		score_Scores -> score_TestExtractResultsWithTwoScoreLines;
		score_Scores -> score_TestExtractResultsWithMultipleZeroScoreLines;
		score_newResults -> score_TestScore100;
		score_newResults -> score_TestAddScore;
		score_newResults -> score_TestSumGrade;
		score_newResults -> score_TestTaskSum;
		score_newResults -> score_TestScoresSum;
		score_newResults -> score_TestValidate;
		score_validate -> score_TestScore100;
		score_validate -> score_TestSumGrade;
		score_validate -> score_TestScoresSum;
		score_validate -> score_TestValidate;
		score_Sum -> score_TestScore100;
		score_Sum -> score_TestScoreNil;
		score_Sum -> score_TestSumGrade;
		score_Sum -> score_TestScoresSum;
		score_TaskSum -> score_TestTaskSum;
		score_internalSum -> score_MarkdownComment;
		score_weightedScore -> score_weightedScore;
		score_Error -> score_parse;
		score_Error -> score_isValid;
		score_Error -> score_TestScoreIsValid;
		score_Error -> score_TestParseNonJSONStrings;
		score_Error -> score_internalAdd;
		score_Error -> score_get;
		score_Error -> score_TestValidate;
		score_ExtractResults -> score_TestExtractResultsWithMultipleNonZeroScoreLines;
		score_ExtractResults -> score_TestExtractResultsWithPanickedAndMaliciousScoreLines;
		score_ExtractResults -> score_TestExtractResultsExecTime;
		score_ExtractResults -> score_TestExtractResults;
		score_ExtractResults -> score_TestExtractResultsWithWhitespace;
		score_ExtractResults -> score_TestExtractResultsWithTwoScoreLines;
		score_ExtractResults -> score_TestExtractResultsWithMultipleZeroScoreLines;
		subgraph cluster_results_internal_test_go {
			label = "results_internal_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestScoreNil [label = "TestScoreNil, Function";shape = box;];
			score_TestScoresSum [label = "TestScoresSum, Function";shape = box;];
			score_TestScore100 [label = "TestScore100, Function";shape = box;];
			score_TestAddScore [label = "TestAddScore, Function";shape = box;];
			score_TestSumGrade [label = "TestSumGrade, Function";shape = box;];
			score_TestTaskSum [label = "TestTaskSum, Function";shape = box;];
			score_TestValidate [label = "TestValidate, Function";shape = box;];
		}
		subgraph cluster_results_markdown_go {
			label = "results_markdown.go";
			labelloc="t";
			rankdir=TB;
			score_MarkdownComment [label = "MarkdownComment, Method";shape = box;];
		}
		score_MarkdownComment -> score_TestMarkdownComment;
		subgraph cluster_results_markdown_test_go {
			label = "results_markdown_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestMarkdownComment [label = "TestMarkdownComment, Function";shape = box;];
		}
		subgraph cluster_results_test_go {
			label = "results_test.go";
			labelloc="t";
			rankdir=TB;
			score_theSecret [label = "theSecret, Constant";shape = box;];
			score_TestExtractResults [label = "TestExtractResults, Function";shape = box;];
			score_TestExtractResultsWithWhitespace [label = "TestExtractResultsWithWhitespace, Function";shape = box;];
			score_TestExtractResultsWithTwoScoreLines [label = "TestExtractResultsWithTwoScoreLines, Function";shape = box;];
			score_TestExtractResultsWithMultipleZeroScoreLines [label = "TestExtractResultsWithMultipleZeroScoreLines, Function";shape = box;];
			score_TestExtractResultsWithMultipleNonZeroScoreLines [label = "TestExtractResultsWithMultipleNonZeroScoreLines, Function";shape = box;];
			score_TestExtractResultsWithPanickedAndMaliciousScoreLines [label = "TestExtractResultsWithPanickedAndMaliciousScoreLines, Function";shape = box;];
			score_TestExtractResultsExecTime [label = "TestExtractResultsExecTime, Function";shape = box;];
		}
		subgraph cluster_score_go {
			label = "score.go";
			labelloc="t";
			rankdir=TB;
			score_Fail [label = "Fail, Method";shape = box;];
			score_Inc [label = "Inc, Method";shape = box;];
			score_IncBy [label = "IncBy, Method";shape = box;];
			score_Dec [label = "Dec, Method";shape = box;];
			score_DecBy [label = "DecBy, Method";shape = box;];
			score_Normalize [label = "Normalize, Method";shape = box;];
			score_weightedScore [label = "weightedScore, Method";shape = box;];
			score_Equal [label = "Equal, Method";shape = box;];
			score_RelativeScore [label = "RelativeScore, Method";shape = box;];
			score_Print [label = "Print, Method";shape = box;];
			score_PanicHandler [label = "PanicHandler, Method";shape = box;];
			score_internalFail [label = "internalFail, Method";shape = box;];
			score_internalFail -> score_PanicHandler;
			score_internalFail -> score_Print;
			score_json [label = "json, Method";shape = box;];
			score_json -> score_Print;
			score_printPanicMessage [label = "printPanicMessage, Function";shape = box;];
			score_printPanicMessage -> score_PanicHandler;
			score_printPanicMessage -> score_Print;
		}
		score_Inc -> score_TestFibonacciSubTest;
		score_Inc -> score_TestFibonacciMin;
		score_Dec -> score_TestPanicHandler;
		score_Dec -> score_TestPanicTriangularPanicWithMsg;
		score_Dec -> score_TestPanicHandlerWithMsg;
		score_Dec -> score_TestPanicTriangularBefore;
		score_Dec -> score_TestPanicTriangularPanic;
		score_Dec -> score_TestPanicTriangularAfter;
		score_Dec -> score_TestFibonacciSubTest;
		score_Dec -> score_TestFibonacciMax;
		score_Normalize -> score_TestNormalize;
		score_weightedScore -> score_MarkdownComment;
		score_Equal -> score_TestParseJSONStrings;
		score_RelativeScore -> score_TestRelativeScore;
		score_Print -> score_TestPanicHandler;
		score_Print -> score_TestPanicTriangularPanicWithMsg;
		score_Print -> score_TestPanicHandlerWithMsg;
		score_Print -> score_TestPanicTriangularBefore;
		score_Print -> score_TestPanicTriangularPanic;
		score_Print -> score_TestPanicTriangularAfter;
		score_PanicHandler -> score_TestPanicHandler;
		score_PanicHandler -> score_TestPanicHandlerWithMsg;
		score_json -> score_PrintTestInfo;
		subgraph cluster_score_pb_go {
			label = "score.pb.go";
			labelloc="t";
			rankdir=TB;
			score_Score [label = "Score, Struct";shape = box;];
			score_Score -> score_GetTestName;
			score_Score -> score_GetTaskName;
			score_Score -> score_GetScore;
			score_Score -> score_GetMaxScore;
			score_Score -> score_GetWeight;
			score_Score -> score_file_kit_score_score_proto_rawDescGZIP;
			score_Score -> score_file_kit_score_score_proto_init;
			score_Score -> score_;
			score_Score -> score_Reset;
			score_Score -> score_String;
			score_Score -> score_ProtoMessage;
			score_Score -> score_ProtoReflect;
			score_Score -> score_Descriptor;
			score_Score -> score_GetID;
			score_Score -> score_GetSubmissionID;
			score_Score -> score_GetSecret;
			score_ID [label = "ID, Field";shape = box;];
			score_ID -> score_GetID;
			score_MaxScore [label = "MaxScore, Field";shape = box;];
			score_MaxScore -> score_GetMaxScore;
			score_Score [label = "Score, Field";shape = box;];
			score_Score -> score_GetScore;
			score_Secret [label = "Secret, Field";shape = box;];
			score_Secret -> score_GetSecret;
			score_SubmissionID [label = "SubmissionID, Field";shape = box;];
			score_SubmissionID -> score_GetSubmissionID;
			score_TaskName [label = "TaskName, Field";shape = box;];
			score_TaskName -> score_GetTaskName;
			score_TestDetails [label = "TestDetails, Field";shape = box;];
			score_TestDetails -> score_GetTestDetails;
			score_TestName [label = "TestName, Field";shape = box;];
			score_TestName -> score_GetTestName;
			score_Weight [label = "Weight, Field";shape = box;];
			score_Weight -> score_GetWeight;
			score_sizeCache [label = "sizeCache, Field";shape = box;];
			score_sizeCache -> score_file_kit_score_score_proto_init;
			score_state [label = "state, Field";shape = box;];
			score_state -> score_file_kit_score_score_proto_init;
			score_unknownFields [label = "unknownFields, Field";shape = box;];
			score_unknownFields -> score_file_kit_score_score_proto_init;
			score_Reset [label = "Reset, Method";shape = box;];
			score_String [label = "String, Method";shape = box;];
			score_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			score_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			score_Descriptor [label = "Descriptor, Method";shape = box;];
			score_GetID [label = "GetID, Method";shape = box;];
			score_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			score_GetSecret [label = "GetSecret, Method";shape = box;];
			score_GetTestName [label = "GetTestName, Method";shape = box;];
			score_GetTaskName [label = "GetTaskName, Method";shape = box;];
			score_GetScore [label = "GetScore, Method";shape = box;];
			score_GetMaxScore [label = "GetMaxScore, Method";shape = box;];
			score_GetWeight [label = "GetWeight, Method";shape = box;];
			score_GetTestDetails [label = "GetTestDetails, Method";shape = box;];
			score_BuildInfo [label = "BuildInfo, Struct";shape = box;];
			score_BuildInfo -> score_GetTestDetails;
			score_BuildInfo -> score_Reset;
			score_BuildInfo -> score_String;
			score_BuildInfo -> score_ProtoMessage;
			score_BuildInfo -> score_ProtoReflect;
			score_BuildInfo -> score_Descriptor;
			score_BuildInfo -> score_GetID;
			score_BuildInfo -> score_GetSubmissionID;
			score_BuildInfo -> score_GetBuildLog;
			score_BuildInfo -> score_GetExecTime;
			score_BuildInfo -> score_GetBuildDate;
			score_BuildInfo -> score_file_kit_score_score_proto_rawDescGZIP;
			score_BuildInfo -> score_file_kit_score_score_proto_init;
			score_BuildDate [label = "BuildDate, Field";shape = box;];
			score_BuildDate -> score_GetBuildDate;
			score_BuildLog [label = "BuildLog, Field";shape = box;];
			score_BuildLog -> score_GetBuildLog;
			score_ExecTime [label = "ExecTime, Field";shape = box;];
			score_ExecTime -> score_GetExecTime;
			score_ID [label = "ID, Field";shape = box;];
			score_ID -> score_GetID;
			score_SubmissionDate [label = "SubmissionDate, Field";shape = box;];
			score_SubmissionDate -> score_GetSubmissionDate;
			score_SubmissionID [label = "SubmissionID, Field";shape = box;];
			score_SubmissionID -> score_GetSubmissionID;
			score_sizeCache [label = "sizeCache, Field";shape = box;];
			score_sizeCache -> score_file_kit_score_score_proto_init;
			score_state [label = "state, Field";shape = box;];
			score_state -> score_file_kit_score_score_proto_init;
			score_unknownFields [label = "unknownFields, Field";shape = box;];
			score_unknownFields -> score_file_kit_score_score_proto_init;
			score_Reset [label = "Reset, Method";shape = box;];
			score_String [label = "String, Method";shape = box;];
			score_ProtoMessage [label = "ProtoMessage, Method";shape = box;];
			score_ProtoReflect [label = "ProtoReflect, Method";shape = box;];
			score_Descriptor [label = "Descriptor, Method";shape = box;];
			score_GetID [label = "GetID, Method";shape = box;];
			score_GetSubmissionID [label = "GetSubmissionID, Method";shape = box;];
			score_GetBuildLog [label = "GetBuildLog, Method";shape = box;];
			score_GetExecTime [label = "GetExecTime, Method";shape = box;];
			score_GetBuildDate [label = "GetBuildDate, Method";shape = box;];
			score_GetSubmissionDate [label = "GetSubmissionDate, Method";shape = box;];
			score_File_kit_score_score_proto [label = "File_kit_score_score_proto, Variable";shape = box;];
			score_File_kit_score_score_proto -> score_file_kit_score_score_proto_init;
			score_file_kit_score_score_proto_rawDesc [label = "file_kit_score_score_proto_rawDesc, Variable";shape = box;];
			score_file_kit_score_score_proto_rawDesc -> score_GetSubmissionDate;
			score_file_kit_score_score_proto_rawDesc -> score_file_kit_score_score_proto_init;
			score_file_kit_score_score_proto_rawDescOnce [label = "file_kit_score_score_proto_rawDescOnce, Variable";shape = box;];
			score_file_kit_score_score_proto_rawDescOnce -> score_file_kit_score_score_proto_rawDescGZIP;
			score_file_kit_score_score_proto_rawDescData [label = "file_kit_score_score_proto_rawDescData, Variable";shape = box;];
			score_file_kit_score_score_proto_rawDescData -> score_file_kit_score_score_proto_rawDescGZIP;
			score_file_kit_score_score_proto_rawDescGZIP [label = "file_kit_score_score_proto_rawDescGZIP, Function";shape = box;];
			score_file_kit_score_score_proto_rawDescGZIP -> score_Descriptor;
			score_file_kit_score_score_proto_msgTypes [label = "file_kit_score_score_proto_msgTypes, Variable";shape = box;];
			score_file_kit_score_score_proto_msgTypes -> score_Reset;
			score_file_kit_score_score_proto_msgTypes -> score_ProtoReflect;
			score_file_kit_score_score_proto_msgTypes -> score_file_kit_score_score_proto_init;
			score_file_kit_score_score_proto_goTypes [label = "file_kit_score_score_proto_goTypes, Variable";shape = box;];
			score_file_kit_score_score_proto_goTypes -> score_file_kit_score_score_proto_init;
			score_file_kit_score_score_proto_depIdxs [label = "file_kit_score_score_proto_depIdxs, Variable";shape = box;];
			score_file_kit_score_score_proto_depIdxs -> score_file_kit_score_score_proto_init;
			score_init [label = "init, Function";shape = box;];
			score_file_kit_score_score_proto_init [label = "file_kit_score_score_proto_init, Function";shape = box;];
			score_file_kit_score_score_proto_init -> score_file_kit_score_score_proto_rawDescGZIP;
		}
		score_Score -> score_;
		score_Score -> score_parse;
		score_Score -> score_TestParseJSONStrings;
		score_Score -> score_TestScoreIsValid;
		score_Score -> score_clone;
		score_Score -> score_AddSubWithTask;
		score_Score -> score_Max;
		score_Score -> score_Min;
		score_Score -> score_MaxByName;
		score_Score -> score_internalAdd;
		score_Score -> score_NewRegistry;
		score_Score -> score_TestStudentAttackCode;
		score_Score -> score_newResults;
		score_Score -> score_toScoreSlice;
		score_Score -> score_TestScore100;
		score_Score -> score_TestAddScore;
		score_Score -> score_TestSumGrade;
		score_Score -> score_TestScoresSum;
		score_Score -> score_TestTaskSum;
		score_Score -> score_TestValidate;
		score_Score -> score_TestMarkdownComment;
		score_Score -> score_Print;
		score_Score -> score_PanicHandler;
		score_Score -> score_internalFail;
		score_Score -> score_Fail;
		score_Score -> score_Inc;
		score_Score -> score_IncBy;
		score_Score -> score_Dec;
		score_Score -> score_DecBy;
		score_Score -> score_Normalize;
		score_Score -> score_weightedScore;
		score_Score -> score_Equal;
		score_Score -> score_RelativeScore;
		score_Score -> score_TestRelativeScore;
		score_Score -> score_TestNormalize;
		score_MaxScore -> score_isValid;
		score_MaxScore -> score_TestParseJSONStrings;
		score_MaxScore -> score_clone;
		score_MaxScore -> score_internalAdd;
		score_MaxScore -> score_internalSum;
		score_MaxScore -> score_TestScore100;
		score_MaxScore -> score_TestAddScore;
		score_MaxScore -> score_TestSumGrade;
		score_MaxScore -> score_TestTaskSum;
		score_MaxScore -> score_TestValidate;
		score_MaxScore -> score_MarkdownComment;
		score_MaxScore -> score_TestMarkdownComment;
		score_MaxScore -> score_Inc;
		score_MaxScore -> score_IncBy;
		score_MaxScore -> score_Normalize;
		score_MaxScore -> score_weightedScore;
		score_MaxScore -> score_Equal;
		score_MaxScore -> score_RelativeScore;
		score_MaxScore -> score_TestRelativeScore;
		score_MaxScore -> score_TestNormalize;
		score_Score -> score_isValid;
		score_Score -> score_TestFibonacciSubTest;
		score_Score -> score_TestFibonacciMax;
		score_Score -> score_TestFibonacciMin;
		score_Score -> score_internalSum;
		score_Score -> score_addScore;
		score_Score -> score_MarkdownComment;
		score_Score -> score_TestExtractResultsWithMultipleNonZeroScoreLines;
		score_Score -> score_TestExtractResultsWithMultipleZeroScoreLines;
		score_Secret -> score_isValid;
		score_Secret -> score_TestParseJSONStrings;
		score_Secret -> score_clone;
		score_Secret -> score_internalAdd;
		score_Secret -> score_TestAddScore;
		score_TaskName -> score_internalAdd;
		score_TaskName -> score_internalSum;
		score_TaskName -> score_TestTaskSum;
		score_TaskName -> score_MarkdownComment;
		score_TaskName -> score_TestMarkdownComment;
		score_TestDetails -> score_addScore;
		score_TestName -> score_TestParseJSONStrings;
		score_TestName -> score_clone;
		score_TestName -> score_internalAdd;
		score_TestName -> score_TestFibonacciSubTest;
		score_TestName -> score_TestFibonacciMax;
		score_TestName -> score_TestFibonacciMin;
		score_TestName -> score_TestScore100;
		score_TestName -> score_TestAddScore;
		score_TestName -> score_TestSumGrade;
		score_TestName -> score_TestTaskSum;
		score_TestName -> score_TestValidate;
		score_TestName -> score_MarkdownComment;
		score_TestName -> score_TestMarkdownComment;
		score_TestName -> score_TestExtractResultsWithPanickedAndMaliciousScoreLines;
		score_TestName -> score_Equal;
		score_TestName -> score_RelativeScore;
		score_TestName -> score_Print;
		score_TestName -> score_TestRelativeScore;
		score_TestName -> score_TestNormalize;
		score_Weight -> score_isValid;
		score_Weight -> score_TestParseJSONStrings;
		score_Weight -> score_clone;
		score_Weight -> score_internalAdd;
		score_Weight -> score_internalSum;
		score_Weight -> score_TestAddScore;
		score_Weight -> score_TestSumGrade;
		score_Weight -> score_TestTaskSum;
		score_Weight -> score_TestValidate;
		score_Weight -> score_TestScore100;
		score_Weight -> score_MarkdownComment;
		score_Weight -> score_TestMarkdownComment;
		score_Weight -> score_weightedScore;
		score_Weight -> score_Equal;
		score_GetTestName -> score_isValid;
		score_GetTestName -> score_addScore;
		score_GetScore -> score_addScore;
		score_GetMaxScore -> score_Max;
		score_GetMaxScore -> score_MaxByName;
		score_BuildInfo -> score_;
		score_BuildInfo -> score_ExtractResults;
		score_BuildDate -> score_ExtractResults;
		score_BuildLog -> score_ExtractResults;
		score_BuildLog -> score_TestExtractResults;
		score_BuildLog -> score_TestExtractResultsWithWhitespace;
		score_ExecTime -> score_ExtractResults;
		score_ExecTime -> score_TestExtractResultsExecTime;
		score_SubmissionDate -> score_ExtractResults;
		subgraph cluster_score_test_go {
			label = "score_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestRelativeScore [label = "TestRelativeScore, Function";shape = box;];
			score_TestNormalize [label = "TestNormalize, Function";shape = box;];
		}
		subgraph cluster_session_secret_go {
			label = "session_secret.go";
			labelloc="t";
			rankdir=TB;
			score_secretEnvName [label = "secretEnvName, Constant";shape = box;];
			score_secretEnvName -> score_init;
			score_sessionSecret [label = "sessionSecret, Variable";shape = box;];
			score_sessionSecret -> score_init;
			score_init [label = "init, Function";shape = box;];
		}
		score_secretEnvName -> score_TestSessionSecret;
		score_sessionSecret -> score_internalAdd;
		score_sessionSecret -> score_Validate;
		subgraph cluster_session_secret_test_go {
			label = "session_secret_test.go";
			labelloc="t";
			rankdir=TB;
			score_TestSessionSecret [label = "TestSessionSecret, Function";shape = box;];
		}
	}
	subgraph cluster_testdata {
		label = "testdata (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_fibonacci_ag_test_go {
			label = "fibonacci_ag_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_init [label = "init, Function";shape = box;];
			sequence_fibonacciTestsAG [label = "fibonacciTestsAG, Variable";shape = box;];
			sequence_fibonacciTestsAG -> sequence_init;
			sequence_fibonacciTestsAG -> sequence_TestFibonacciAG;
			sequence_fibonacciTestsAG -> sequence_TestFibonacciAttackAG;
			sequence_fibonacciTestsAG -> sequence_TestFibonacciAttack2AG;
			sequence_TestFibonacciAG [label = "TestFibonacciAG, Function";shape = box;];
			sequence_TestFibonacciAG -> sequence_init;
			sequence_panicTestEnvName [label = "panicTestEnvName, Constant";shape = box;];
			sequence_panicTestEnvName -> sequence_TestFibonacciAttackAG;
			sequence_panicTestEnvName -> sequence_TestFibonacciAttack2AG;
			sequence_TestFibonacciAttackAG [label = "TestFibonacciAttackAG, Function";shape = box;];
			sequence_TestFibonacciAttackAG -> sequence_init;
			sequence_TestFibonacciAttack2AG [label = "TestFibonacciAttack2AG, Function";shape = box;];
			sequence_TestFibonacciAttack2AG -> sequence_init;
		}
		subgraph cluster_fibonacci_attack_go {
			label = "fibonacci_attack.go";
			labelloc="t";
			rankdir=TB;
			sequence_fibonacciAttack [label = "fibonacciAttack, Function";shape = box;];
			sequence_fibonacciAttack2 [label = "fibonacciAttack2, Function";shape = box;];
		}
		sequence_fibonacciAttack -> sequence_TestFibonacciAttackAG;
		sequence_fibonacciAttack2 -> sequence_TestFibonacciAttack2AG;
		subgraph cluster_fibonacci_sol_go {
			label = "fibonacci_sol.go";
			labelloc="t";
			rankdir=TB;
			sequence_fibonacci [label = "fibonacci, Function";shape = box;];
			sequence_fibonacci -> sequence_fibonacci;
		}
		sequence_fibonacci -> sequence_TestFibonacciAG;
		subgraph cluster_main_test_go {
			label = "main_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_scores [label = "scores, Variable";shape = box;];
			sequence_scores -> sequence_TestMain;
			sequence_TestMain [label = "TestMain, Function";shape = box;];
		}
		sequence_scores -> sequence_init;
		sequence_scores -> sequence_TestFibonacciAG;
		sequence_scores -> sequence_TestFibonacciAttackAG;
		sequence_scores -> sequence_TestFibonacciAttack2AG;
		sequence_scores -> sequence_fibonacciAttack;
		sequence_scores -> sequence_fibonacciAttack2;
		sequence_scores -> sequence_TestTriangularAG;
		sequence_scores -> sequence_TestTriangularRecurrenceAG;
		sequence_scores -> sequence_TestTriangularFormulaAG;
		sequence_scores -> sequence_TestTriangularSubTestAG;
		subgraph cluster_triangular_ag_test_go {
			label = "triangular_ag_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_init [label = "init, Function";shape = box;];
			sequence_funcs [label = "funcs, Variable";shape = box;];
			sequence_funcs -> sequence_init;
			sequence_funcs -> sequence_TestTriangularSubTestAG;
			sequence_triangularTestsAG [label = "triangularTestsAG, Variable";shape = box;];
			sequence_triangularTestsAG -> sequence_init;
			sequence_triangularTestsAG -> sequence_TestTriangularAG;
			sequence_triangularTestsAG -> sequence_TestTriangularRecurrenceAG;
			sequence_triangularTestsAG -> sequence_TestTriangularFormulaAG;
			sequence_triangularTestsAG -> sequence_TestTriangularSubTestAG;
			sequence_TestTriangularAG [label = "TestTriangularAG, Function";shape = box;];
			sequence_TestTriangularAG -> sequence_init;
			sequence_TestTriangularRecurrenceAG [label = "TestTriangularRecurrenceAG, Function";shape = box;];
			sequence_TestTriangularRecurrenceAG -> sequence_init;
			sequence_TestTriangularFormulaAG [label = "TestTriangularFormulaAG, Function";shape = box;];
			sequence_TestTriangularFormulaAG -> sequence_init;
			sequence_TestTriangularSubTestAG [label = "TestTriangularSubTestAG, Function";shape = box;];
			sequence_TestTriangularSubTestAG -> sequence_init;
		}
		subgraph cluster_triangular_sol_go {
			label = "triangular_sol.go";
			labelloc="t";
			rankdir=TB;
			sequence_triangularRecurrence [label = "triangularRecurrence, Function";shape = box;];
			sequence_triangularFormula [label = "triangularFormula, Function";shape = box;];
			sequence_triangular [label = "triangular, Function";shape = box;];
			sequence_triangular -> sequence_triangularRecurrence;
		}
		sequence_triangularRecurrence -> sequence_init;
		sequence_triangularRecurrence -> sequence_TestTriangularRecurrenceAG;
		sequence_triangularFormula -> sequence_init;
		sequence_triangularFormula -> sequence_TestTriangularFormulaAG;
		sequence_triangular -> sequence_init;
		sequence_triangular -> sequence_TestTriangularAG;
	}
	subgraph cluster_testdata {
		label = "testdata (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_courses {
		label = "courses (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_qf102_2022 {
		label = "qf102-2022 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_assignments {
		label = "assignments (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_lab1_go {
			label = "lab1.go";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_tests {
		label = "tests (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_my_test_go {
			label = "my_test.go";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_user_labs {
		label = "user-labs (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_dummy_go {
			label = "dummy.go";
			labelloc="t";
			rankdir=TB;
		}
	}
	subgraph cluster_qf104_2022 {
		label = "qf104-2022 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_assignments {
		label = "assignments (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_fibonacci_go {
			label = "fibonacci.go";
			labelloc="t";
			rankdir=TB;
			sequence_fibonacci [label = "fibonacci, Function";shape = box;];
		}
	}
	subgraph cluster_lab2 {
		label = "lab2 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_triangular_go {
			label = "triangular.go";
			labelloc="t";
			rankdir=TB;
			sequence_triangularRecurrence [label = "triangularRecurrence, Function";shape = box;];
			sequence_triangularFormula [label = "triangularFormula, Function";shape = box;];
			sequence_triangular [label = "triangular, Function";shape = box;];
		}
	}
	subgraph cluster_meling_labs {
		label = "meling-labs (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_fibonacci_go {
			label = "fibonacci.go";
			labelloc="t";
			rankdir=TB;
			sequence_fibonacci [label = "fibonacci, Function";shape = box;];
			sequence_fibonacci -> sequence_fibonacci;
		}
	}
	subgraph cluster_lab2 {
		label = "lab2 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_triangular_go {
			label = "triangular.go";
			labelloc="t";
			rankdir=TB;
			sequence_triangularRecurrence [label = "triangularRecurrence, Function";shape = box;];
			sequence_triangularFormula [label = "triangularFormula, Function";shape = box;];
			sequence_triangular [label = "triangular, Function";shape = box;];
			sequence_triangular -> sequence_triangularRecurrence;
		}
	}
	subgraph cluster_tests {
		label = "tests (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_lab2 {
		label = "lab2 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_main_test_go {
			label = "main_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_scores [label = "scores, Variable";shape = box;];
			sequence_scores -> sequence_TestMain;
			sequence_TestMain [label = "TestMain, Function";shape = box;];
		}
		sequence_scores -> sequence_init;
		sequence_scores -> sequence_TestTriangularAG;
		sequence_scores -> sequence_TestTriangularRecurrenceAG;
		sequence_scores -> sequence_TestTriangularFormulaAG;
		sequence_scores -> sequence_TestTriangularSubTestAG;
		subgraph cluster_triangular_ag_test_go {
			label = "triangular_ag_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_init [label = "init, Function";shape = box;];
			sequence_funcs [label = "funcs, Variable";shape = box;];
			sequence_funcs -> sequence_init;
			sequence_funcs -> sequence_TestTriangularSubTestAG;
			sequence_triangularTestsAG [label = "triangularTestsAG, Variable";shape = box;];
			sequence_triangularTestsAG -> sequence_init;
			sequence_triangularTestsAG -> sequence_TestTriangularAG;
			sequence_triangularTestsAG -> sequence_TestTriangularRecurrenceAG;
			sequence_triangularTestsAG -> sequence_TestTriangularFormulaAG;
			sequence_triangularTestsAG -> sequence_TestTriangularSubTestAG;
			sequence_TestTriangularAG [label = "TestTriangularAG, Function";shape = box;];
			sequence_TestTriangularAG -> sequence_init;
			sequence_TestTriangularRecurrenceAG [label = "TestTriangularRecurrenceAG, Function";shape = box;];
			sequence_TestTriangularRecurrenceAG -> sequence_init;
			sequence_TestTriangularFormulaAG [label = "TestTriangularFormulaAG, Function";shape = box;];
			sequence_TestTriangularFormulaAG -> sequence_init;
			sequence_TestTriangularSubTestAG [label = "TestTriangularSubTestAG, Function";shape = box;];
			sequence_TestTriangularSubTestAG -> sequence_init;
		}
	}
	subgraph cluster_lab1 {
		label = "lab1 (folder)";
		labelloc="t";
		rankdir=TB;
	}
	subgraph cluster_sequence {
		label = "sequence (folder)";
		labelloc="t";
		rankdir=TB;
		subgraph cluster_fibonacci_ag_test_go {
			label = "fibonacci_ag_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_init [label = "init, Function";shape = box;];
			sequence_fibonacciTestsAG [label = "fibonacciTestsAG, Variable";shape = box;];
			sequence_fibonacciTestsAG -> sequence_TestFibonacciAG;
			sequence_fibonacciTestsAG -> sequence_init;
			sequence_TestFibonacciAG [label = "TestFibonacciAG, Function";shape = box;];
			sequence_TestFibonacciAG -> sequence_init;
		}
		subgraph cluster_main_test_go {
			label = "main_test.go";
			labelloc="t";
			rankdir=TB;
			sequence_scores [label = "scores, Variable";shape = box;];
			sequence_scores -> sequence_TestMain;
			sequence_TestMain [label = "TestMain, Function";shape = box;];
		}
		sequence_scores -> sequence_TestFibonacciAG;
		sequence_scores -> sequence_init;
	}
}
